[
  {
    "id": "ProntoQA_1",
    "program": "```python\nfrom z3 import *\n\n# Define the variables\njompus = Bool('jompus')\nyumpus = Bool('yumpus')\naggressive = Bool('aggressive')\ndumpus = Bool('dumpus')\nwooden = Bool('wooden')\nwumpus = Bool('wumpus')\nred = Bool('red')\nimpus = Bool('impus')\nopaque = Bool('opaque')\ntumpus = Bool('tumpus')\nnumpus = Bool('numpus')\nsour = Bool('sour')\nvumpus = Bool('vumpus')\nearthy = Bool('earthy')\nzumpus = Bool('zumpus')\nrompus = Bool('rompus')\nmax = Bool('max')\n\n# Define the constraints\nconstraints = [\n    Implies(jompus, Not(shy)),\n    Implies(jompus, yumpus),\n    Implies(yumpus, aggressive),\n    Implies(yumpus, dumpus),\n    Not(wooden),\n    Implies(dumpus, wumpus),\n    Implies(wumpus, red),\n    Implies(wumpus, impus),\n    Implies(impus, opaque),\n    Implies(impus, tumpus),\n    Implies(tumpus, Not(sour)),\n    Implies(tumpus, vumpus),\n    Implies(vumpus, earthy),\n    Implies(vumpus, zumpus),\n    Implies(zumpus, small),\n    Implies(zumpus, rompus),\n    max\n]\n\n# Create a solver and add the constraints\nsolver = Solver()\nsolver.add(constraints)\n\n# Add the negation of the statement we want to check\nsolver.add(Not(sour))\n\n# Check if the constraints are satisfiable\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```\n\nThe output of this program will be either A for True or B for False, indicating whether the statement \"Max is sour\" is true or false based on the given context.",
    "answer": "B"
  },
  {
    "id": "ProntoQA_2",
    "program": "```python\nfrom z3 import *\n\n# Define the variables\ntumpus = Bool('tumpus')\nrompus = Bool('rompus')\nnumpus = Bool('numpus')\nluminous = Bool('luminous')\nyumpus = Bool('yumpus')\ntransparent = Bool('transparent')\nzumpus = Bool('zumpus')\nbitter = Bool('bitter')\nimpus = Bool('impus')\ndumpus = Bool('dumpus')\nvumpus = Bool('vumpus')\njompus = Bool('jompus')\nwumpus = Bool('wumpus')\nstella = Bool('stella')\n\n# Define the constraints\nconstraints = [\n    Implies(tumpus, Not(angry)),\n    Implies(tumpus, rompus),\n    Implies(numpus, Not(bright)),\n    Implies(rompus, Not(luminous)),\n    Implies(rompus, yumpus),\n    Implies(yumpus, transparent),\n    Implies(yumpus, zumpus),\n    Implies(zumpus, Not(bitter)),\n    Implies(zumpus, impus),\n    Implies(impus, red),\n    Implies(impus, dumpus),\n    Implies(dumpus, happy),\n    Implies(dumpus, vumpus),\n    Implies(vumpus, bright),\n    Implies(vumpus, jompus),\n    Implies(jompus, large),\n    Implies(jompus, wumpus),\n    stella == yumpus\n]\n\n# Check if Stella is bright\ns = Solver()\ns.add(constraints)\ns.add(stella)\nresult = s.check()\n\n# Print the result\nif result == sat:\n    print(\"A\")  # Stella is bright\nelse:\n    print(\"B\")  # Stella is not bright\n```\n\nThe output of this program will be either A for True or B for False, indicating whether the statement \"Stella is bright\" is true or false based on the given constraints.",
    "answer": "A"
  },
  {
    "id": "ProntoQA_3",
    "program": "```python\nfrom z3 import *\n\n# Define the variables\nvumpus = Bool('vumpus')\ntumpus = Bool('tumpus')\nbrown = Bool('brown')\nwumpus = Bool('wumpus')\nrompus = Bool('rompus')\nzumpus = Bool('zumpus')\nhappy = Bool('happy')\nimpus = Bool('impus')\ndumpus = Bool('dumpus')\nnumpus = Bool('numpus')\nbitter = Bool('bitter')\njompus = Bool('jompus')\ncold = Bool('cold')\nyumpus = Bool('yumpus')\nwren = Bool('wren')\n\n# Define the constraints\nconstraints = [\n    Implies(vumpus, tumpus),\n    Implies(tumpus, brown),\n    Implies(tumpus, wumpus),\n    Implies(wumpus, rompus),\n    Implies(zumpus, metallic),\n    Implies(rompus, happy),\n    Implies(rompus, impus),\n    Implies(impus, dumpus),\n    Not(metallic),\n    Implies(dumpus, numpus),\n    Implies(numpus, bitter),\n    Implies(numpus, jompus),\n    Implies(jompus, cold),\n    Implies(jompus, yumpus),\n    wren\n]\n\n# Create a solver and add the constraints\nsolver = Solver()\nsolver.add(constraints)\n\n# Add the negation of the statement \"Wren is metallic\"\nsolver.add(Not(wren))\n\n# Check if the constraints are satisfiable\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```\n\nThe output of this program will be either A for True or B for False, indicating whether the statement \"Wren is not metallic\" is true or false based on the given constraints.",
    "answer": "A"
  },
  {
    "id": "ProntoQA_4",
    "program": "```python\nfrom z3 import *\n\n# Define the variables\nrompus = Bool('rompus')\nimpus = Bool('impus')\nyumpus = Bool('yumpus')\norange = Bool('orange')\nzumpus = Bool('zumpus')\nhot = Bool('hot')\nnumpus = Bool('numpus')\nmetallic = Bool('metallic')\nwumpus = Bool('wumpus')\ndumpus = Bool('dumpus')\nbright = Bool('bright')\njompus = Bool('jompus')\nsmall = Bool('small')\nvumpus = Bool('vumpus')\nshy = Bool('shy')\ntumpus = Bool('tumpus')\nalex = Bool('alex')\n\n# Define the constraints\nconstraints = [\n    Implies(rompus, impus),\n    Not(small),\n    Not(yumpus),\n    Implies(impus, orange),\n    Implies(impus, zumpus),\n    Not(hot),\n    Implies(zumpus, numpus),\n    Implies(numpus, metallic),\n    Implies(numpus, wumpus),\n    Not(And(wumpus, kind)),\n    Implies(wumpus, dumpus),\n    Not(dumpus),\n    Implies(dumpus, jompus),\n    Implies(jompus, small),\n    Implies(jompus, vumpus),\n    Not(And(vumpus, shy)),\n    Implies(vumpus, tumpus),\n    Eq(alex, zumpus)\n]\n\n# Create a solver and add the constraints\nsolver = Solver()\nsolver.add(constraints)\n\n# Check if the statement \"Alex is not small\" is true or false\nsolver.add(Not(alex))\nsolver.add(small)\nresult = solver.check()\n\n# Print the result\nif result == sat:\n    print(\"B\")  # False\nelse:\n    print(\"A\")  # True\n```\n\nThe output of this program will be \"A\", indicating that the statement \"Alex is not small\" is true.",
    "answer": "B"
  },
  {
    "id": "ProntoQA_5",
    "program": "```python\nfrom z3 import *\n\n# Define the variables\nrompus = Bool('rompus')\nzumpus = Bool('zumpus')\nhappy = Bool('happy')\nnumpus = Bool('numpus')\ntemperate = Bool('temperate')\ntumpus = Bool('tumpus')\nlarge = Bool('large')\nyumpus = Bool('yumpus')\nearthy = Bool('earthy')\njompus = Bool('jompus')\nblue = Bool('blue')\nwumpus = Bool('wumpus')\ndull = Bool('dull')\nimpus = Bool('impus')\nvumpus = Bool('vumpus')\ndumpus = Bool('dumpus')\nalex = Bool('alex')\n\n# Create the solver\nsolver = Solver()\n\n# Add the constraints\nsolver.add(Implies(rompus, And(zumpus, Not(happy))))\nsolver.add(Implies(zumpus, numpus))\nsolver.add(Implies(numpus, Not(temperate)))\nsolver.add(Implies(numpus, tumpus))\nsolver.add(Implies(tumpus, Not(large)))\nsolver.add(Implies(tumpus, yumpus))\nsolver.add(Implies(yumpus, earthy))\nsolver.add(Implies(yumpus, jompus))\nsolver.add(Implies(jompus, blue))\nsolver.add(Implies(jompus, wumpus))\nsolver.add(Implies(wumpus, Not(dull)))\nsolver.add(Implies(wumpus, impus))\nsolver.add(Implies(vumpus, dull))\nsolver.add(Implies(impus, dumpus))\nsolver.add(alex, numpus)\n\n# Add the statement to check\nstatement = Not(dull)\n\n# Check if the statement is satisfiable\nsolver.add(Not(statement))\nif solver.check() == unsat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```\n\nThe output of this program will be either A for True or B for False.",
    "answer": "A"
  }
]