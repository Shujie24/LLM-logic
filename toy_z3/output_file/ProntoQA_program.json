[
  {
    "id": "ProntoQA_1",
    "context": "Jompuses are not shy. Jompuses are yumpuses. Each yumpus is aggressive. Each yumpus is a dumpus. Dumpuses are not wooden. Dumpuses are wumpuses. Wumpuses are red. Every wumpus is an impus. Each impus is opaque. Impuses are tumpuses. Numpuses are sour. Tumpuses are not sour. Tumpuses are vumpuses. Vumpuses are earthy. Every vumpus is a zumpus. Zumpuses are small. Zumpuses are rompuses. Max is a yumpus.",
    "question": "Is the following statement true or false? Max is sour.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Jompuses are not shy\njompus = Bool(\"jompus\")\nshy = Bool(\"shy\")\n\n# Jompuses are yumpuses\n# Jompuses has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Each yumpus is aggressive\naggressive = Bool(\"aggressive\")\n# Each yumpus is a dumpus\ndumpus = Bool(\"dumpus\")\n\n# Dumpuses are not wooden\n# Dumpuses has been defined before\nwooden = Bool(\"wooden\")\n\n# Dumpuses are wumpuses\n# Dumpuses has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Wumpuses are red\n# Wumpuses has been defined before\nred = Bool(\"red\")\n\n# Every wumpus is an impus\nimpus = Bool(\"impus\")\n# Each impus is opaque\nopaque = Bool(\"opaque\")\n\n# Impuses are tumpuses\n# Impuses has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Numpuses are sour\nnumpus = Bool(\"numpus\")\nsour = Bool(\"sour\")\n\n# Tumpuses are not sour\n# Tumpuses has been defined before\n# Sour has been defined before\n\n# Tumpuses are vumpuses\n# Tumpuses has been defined before\nvumpus = Bool(\"vumpus\")\n\n# Vumpuses are earthy\n# Vumpuses has been defined before\nearthy = Bool(\"earthy\")\n\n# Every vumpus is a zumpus\nzumpus = Bool(\"zumpus\")\n# Zumpuses are small\n# Zumpuses has been defined before\nsmall = Bool(\"small\")\n# Zumpuses are rompuses\n# Zumpuses has been defined before\nrompus = Bool(\"rompus\")\n\n# Max is a yumpus\nmax = Bool(\"max\")\n# Yumpuses has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Jompuses are not shy\nsolver.add(Implies(jompus, Not(shy)))\n# Jompuses are yumpuses\nsolver.add(Implies(jompus, yumpus))\n# Each yumpus is aggressive\nsolver.add(Implies(yumpus, aggressive))\n# Each yumpus is a dumpus\nsolver.add(Implies(yumpus, dumpus))\n# Dumpuses are not wooden\nsolver.add(Implies(dumpus, Not(wooden)))\n# Dumpuses are wumpuses\nsolver.add(Implies(dumpus, wumpus))\n# Wumpuses are red\nsolver.add(Implies(wumpus, red))\n# Every wumpus is an impus\nsolver.add(Implies(wumpus, impus))\n# Each impus is opaque\nsolver.add(Implies(impus, opaque))\n# Impuses are tumpuses\nsolver.add(Implies(impus, tumpus))\n# Numpuses are sour\nsolver.add(Implies(numpus, sour))\n# Tumpuses are not sour\nsolver.add(Implies(tumpus, Not(sour)))\n# Tumpuses are vumpuses\nsolver.add(Implies(tumpus, vumpus))\n# Vumpuses are earthy\nsolver.add(Implies(vumpus, earthy))\n# Every vumpus is a zumpus\nsolver.add(Implies(vumpus, zumpus))\n# Zumpuses are small\nsolver.add(Implies(zumpus, small))\n# Zumpuses are rompuses\nsolver.add(Implies(zumpus, rompus))\n# Max is a yumpus\nsolver.add(Implies(max, yumpus))\n\n# Create facts in the problem\nsolver.add(max)\n\n# Create statements to be checked\n# Max is sour\nsolver.add(max, sour)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_2",
    "context": "Every tumpus is not angry. Tumpuses are rompuses. Every numpus is not bright. Rompuses are not luminous. Rompuses are yumpuses. Yumpuses are transparent. Yumpuses are zumpuses. Each zumpus is not bitter. Zumpuses are impuses. Impuses are red. Each impus is a dumpus. Every dumpus is happy. Each dumpus is a vumpus. Vumpuses are bright. Every vumpus is a jompus. Jompuses are large. Each jompus is a wumpus. Stella is a yumpus.",
    "question": "Is the following statement true or false? Stella is bright.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every tumpus is not angry\ntumpus = Bool(\"tumpus\")\nangry = Bool(\"angry\")\n\n# Tumpuses are rompuses\n# Tumpuses has been defined before\nrompus = Bool(\"rompus\")\n\n# Every numpus is not bright\nnumpus = Bool(\"numpus\")\nbright = Bool(\"bright\")\n\n# Rompuses are not luminous\n# Rompuses has been defined before\nluminous = Bool(\"luminous\")\n\n# Rompuses are yumpuses\n# Rompuses has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Yumpuses are transparent\n# Yumpuses has been defined before\ntransparent = Bool(\"transparent\")\n\n# Yumpuses are zumpuses\n# Yumpuses has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Each zumpus is not bitter\nzumpus_bitter = Bool(\"zumpus_bitter\")\nbitter = Bool(\"bitter\")\n\n# Zumpuses are impuses\n# Zumpuses has been defined before\nimpus = Bool(\"impus\")\n\n# Impuses are red\n# Impuses has been defined before\nred = Bool(\"red\")\n\n# Each impus is a dumpus\nimpus_dumpus = Bool(\"impus_dumpus\")\ndumpus = Bool(\"dumpus\")\n\n# Every dumpus is happy\n# Dumpus has been defined before\nhappy = Bool(\"happy\")\n\n# Each dumpus is a vumpus\ndumpus_vumpus = Bool(\"dumpus_vumpus\")\nvumpus = Bool(\"vumpus\")\n\n# Vumpuses are bright\n# Vumpuses has been defined before\n# Bright has been defined before\n\n# Every vumpus is a jompus\n# Vumpuses has been defined before\njompus = Bool(\"jompus\")\n\n# Jompuses are large\n# Jompuses has been defined before\nlarge = Bool(\"large\")\n\n# Each jompus is a wumpus\njompus_wumpus = Bool(\"jompus_wumpus\")\nwumpus = Bool(\"wumpus\")\n\n# Stella is a yumpus\nstella = Bool(\"stella\")\n# Yumpuses has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every tumpus is not angry\nsolver.add(Implies(tumpus, Not(angry)))\n\n# Tumpuses are rompuses\nsolver.add(Implies(tumpus, rompus))\n\n# Every numpus is not bright\nsolver.add(Implies(numpus, Not(bright)))\n\n# Rompuses are not luminous\nsolver.add(Implies(rompus, Not(luminous)))\n\n# Rompuses are yumpuses\nsolver.add(Implies(rompus, yumpus))\n\n# Yumpuses are transparent\nsolver.add(Implies(yumpus, transparent))\n\n# Yumpuses are zumpuses\nsolver.add(Implies(yumpus, zumpus))\n\n# Each zumpus is not bitter\nsolver.add(Implies(zumpus, Not(bitter)))\n\n# Zumpuses are impuses\nsolver.add(Implies(zumpus, impus))\n\n# Impuses are red\nsolver.add(Implies(impus, red))\n\n# Each impus is a dumpus\nsolver.add(Implies(impus, dumpus))\n\n# Every dumpus is happy\nsolver.add(Implies(dumpus, happy))\n\n# Each dumpus is a vumpus\nsolver.add(Implies(dumpus, vumpus))\n\n# Vumpuses are bright\nsolver.add(Implies(vumpus, bright))\n\n# Every vumpus is a jompus\nsolver.add(Implies(vumpus, jompus))\n\n# Jompuses are large\nsolver.add(Implies(jompus, large))\n\n# Each jompus is a wumpus\nsolver.add(Implies(jompus, wumpus))\n\n# Stella is a yumpus\nsolver.add(Implies(stella, yumpus))\n\n# Create facts in the problem\nsolver.add(stella)\n\n# Create statements to be checked\n# Stella is bright\nsolver.add(stella, bright)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_3",
    "context": "Vumpuses are floral. Vumpuses are tumpuses. Tumpuses are brown. Each tumpus is a wumpus. Wumpuses are small. Each wumpus is a rompus. Each zumpus is metallic. Every rompus is happy. Rompuses are impuses. Each impus is amenable. Each impus is a dumpus. Every dumpus is not metallic. Dumpuses are numpuses. Each numpus is bitter. Each numpus is a jompus. Every jompus is cold. Each jompus is a yumpus. Wren is a tumpus.",
    "question": "Is the following statement true or false? Wren is not metallic.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Vumpuses are floral\nvumpus = Bool(\"vumpus\")\nfloral = Bool(\"floral\")\n\n# Vumpuses are tumpuses\n# Vumpuses has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Tumpuses are brown\n# Tumpuses has been defined before\nbrown = Bool(\"brown\")\n\n# Each tumpus is a wumpus\n# Tumpuses has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Wumpuses are small\n# Wumpuses has been defined before\nsmall = Bool(\"small\")\n\n# Each wumpus is a rompus\n# Wumpuses has been defined before\nrompus = Bool(\"rompus\")\n\n# Each zumpus is metallic\n# Zumpuses has been defined before\nmetallic = Bool(\"metallic\")\n\n# Every rompus is happy\nrompus = Bool(\"rompus\")\nhappy = Bool(\"happy\")\n\n# Rompuses are impuses\n# Rompuses has been defined before\nimpus = Bool(\"impus\")\n\n# Each impus is amenable\n# Impus has been defined before\namenable = Bool(\"amenable\")\n\n# Each impus is a dumpus\n# Impus has been defined before\ndumpus = Bool(\"dumpus\")\n\n# Every dumpus is not metallic\n# Dumpuses has been defined before\nmetallic = Bool(\"metallic\")\n\n# Dumpuses are numpuses\n# Dumpuses has been defined before\nnumpus = Bool(\"numpus\")\n\n# Each numpus is bitter\n# Numpus has been defined before\nbitter = Bool(\"bitter\")\n\n# Each numpus is a jompus\n# Numpus has been defined before\njompus = Bool(\"jompus\")\n\n# Every jompus is cold\n# Jompus has been defined before\ncold = Bool(\"cold\")\n\n# Each jompus is a yumpus\n# Jompus has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Wren is a tumpus\nwren = Bool(\"wren\")\n# Tumpuses has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Vumpuses are floral\nsolver.add(Implies(vumpus, floral))\n\n# Vumpuses are tumpuses\nsolver.add(Implies(vumpus, tumpus))\n\n# Tumpuses are brown\nsolver.add(Implies(tumpus, brown))\n\n# Each tumpus is a wumpus\nsolver.add(Implies(tumpus, wumpus))\n\n# Wumpuses are small\nsolver.add(Implies(wumpus, small))\n\n# Each wumpus is a rompus\nsolver.add(Implies(wumpus, rompus))\n\n# Each zumpus is metallic\nsolver.add(Implies(zumpus, metallic))\n\n# Every rompus is happy\nsolver.add(Implies(rompus, happy))\n\n# Rompuses are impuses\nsolver.add(Implies(rompus, impus))\n\n# Each impus is amenable\nsolver.add(Implies(impus, amenable))\n\n# Each impus is a dumpus\nsolver.add(Implies(impus, dumpus))\n\n# Every dumpus is not metallic\nsolver.add(Implies(dumpus, Not(metallic)))\n\n# Dumpuses are numpuses\nsolver.add(Implies(dumpus, numpus))\n\n# Each numpus is bitter\nsolver.add(Implies(numpus, bitter))\n\n# Each numpus is a jompus\nsolver.add(Implies(numpus, jompus))\n\n# Every jompus is cold\nsolver.add(Implies(jompus, cold))\n\n# Each jompus is a yumpus\nsolver.add(Implies(jompus, yumpus))\n\n# Wren is a tumpus\nsolver.add(Implies(wren, tumpus))\n\n# Create facts in the problem\nsolver.add(wren)\n\n# Create statements to be checked\n# Wren is not metallic\nsolver.add(wren, Not(metallic))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_3",
    "context": "Vumpuses are floral. Vumpuses are tumpuses. Tumpuses are brown. Each tumpus is a wumpus. Wumpuses are small. Each wumpus is a rompus. Each zumpus is metallic. Every rompus is happy. Rompuses are impuses. Each impus is amenable. Each impus is a dumpus. Every dumpus is not metallic. Dumpuses are numpuses. Each numpus is bitter. Each numpus is a jompus. Every jompus is cold. Each jompus is a yumpus. Wren is a tumpus.",
    "question": "Is the following statement true or false? Wren is not metallic.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Vumpuses are floral\nvumpus = Bool(\"vumpus\")\nfloral = Bool(\"floral\")\n\n# Vumpuses are tumpuses\n# Vumpuses has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Tumpuses are brown\n# Tumpuses has been defined before\nbrown = Bool(\"brown\")\n\n# Each tumpus is a wumpus\n# Tumpuses has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Wumpuses are small\n# Wumpuses has been defined before\nsmall = Bool(\"small\")\n\n# Each wumpus is a rompus\n# Wumpuses has been defined before\nrompus = Bool(\"rompus\")\n\n# Each zumpus is metallic\n# Zumpuses has been defined before\nzumpus = Bool(\"zumpus\")\nmetallic = Bool(\"metallic\")\n\n# Every rompus is happy\nrompus = Bool(\"rompus\")\nhappy = Bool(\"happy\")\n\n# Rompuses are impuses\n# Rompuses has been defined before\nimpus = Bool(\"impus\")\n\n# Each impus is amenable\n# Impus has been defined before\namenable = Bool(\"amenable\")\n\n# Each impus is a dumpus\n# Impus has been defined before\ndumpus = Bool(\"dumpus\")\n\n# Every dumpus is not metallic\n# Dumpuses has been defined before\nmetallic = Bool(\"metallic\")\n\n# Dumpuses are numpuses\n# Dumpuses has been defined before\nnumpus = Bool(\"numpus\")\n\n# Each numpus is bitter\n# Numpus has been defined before\nbitter = Bool(\"bitter\")\n\n# Each numpus is a jompus\n# Numpus has been defined before\njompus = Bool(\"jompus\")\n\n# Every jompus is cold\n# Jompus has been defined before\ncold = Bool(\"cold\")\n\n# Each jompus is a yumpus\n# Jompus has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Wren is a tumpus\nwren = Bool(\"wren\")\n# Tumpuses has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Vumpuses are floral\nsolver.add(Implies(vumpus, floral))\n\n# Vumpuses are tumpuses\nsolver.add(Implies(vumpus, tumpus))\n\n# Tumpuses are brown\nsolver.add(Implies(tumpus, brown))\n\n# Each tumpus is a wumpus\nsolver.add(Implies(tumpus, wumpus))\n\n# Wumpuses are small\nsolver.add(Implies(wumpus, small))\n\n# Each wumpus is a rompus\nsolver.add(Implies(wumpus, rompus))\n\n# Each zumpus is metallic\nsolver.add(Implies(zumpus, metallic))\n\n# Every rompus is happy\nsolver.add(Implies(rompus, happy))\n\n# Rompuses are impuses\nsolver.add(Implies(rompus, impus))\n\n# Each impus is amenable\nsolver.add(Implies(impus, amenable))\n\n# Each impus is a dumpus\nsolver.add(Implies(impus, dumpus))\n\n# Every dumpus is not metallic\nsolver.add(Implies(dumpus, Not(metallic)))\n\n# Dumpuses are numpuses\nsolver.add(Implies(dumpus, numpus))\n\n# Each numpus is bitter\nsolver.add(Implies(numpus, bitter))\n\n# Each numpus is a jompus\nsolver.add(Implies(numpus, jompus))\n\n# Every jompus is cold\nsolver.add(Implies(jompus, cold))\n\n# Each jompus is a yumpus\nsolver.add(Implies(jompus, yumpus))\n\n# Wren is a tumpus\nsolver.add(Implies(wren, tumpus))\n\n# Create facts in the problem\nsolver.add(wren)\n\n# Create statements to be checked\n# Wren is not metallic\nsolver.add(Not(metallic))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  }
]