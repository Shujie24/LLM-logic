[
  {
    "id": "ProntoQA_1",
    "context": "Jompuses are not shy. Jompuses are yumpuses. Each yumpus is aggressive. Each yumpus is a dumpus. Dumpuses are not wooden. Dumpuses are wumpuses. Wumpuses are red. Every wumpus is an impus. Each impus is opaque. Impuses are tumpuses. Numpuses are sour. Tumpuses are not sour. Tumpuses are vumpuses. Vumpuses are earthy. Every vumpus is a zumpus. Zumpuses are small. Zumpuses are rompuses. Max is a yumpus.",
    "question": "Is the following statement true or false? Max is sour.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Jompuses are not shy\njompus = Bool(\"jompus\")\n# Jompuses are yumpuses\nyumpus = Bool(\"yumpus\")\n# Each yumpus is aggressive\naggressive = Bool(\"aggressive\")\n# Each yumpus is a dumpus\ndumpus = Bool(\"dumpus\")\n# Dumpuses are not wooden\nwooden = Bool(\"wooden\")\n# Dumpuses are wumpuses\nwumpus = Bool(\"wumpus\")\n# Wumpuses are red\nred = Bool(\"red\")\n# Every wumpus is an impus\nimpus = Bool(\"impus\")\n# Each impus is opaque\nopaque = Bool(\"opaque\")\n# Impuses are tumpuses\ntumpus = Bool(\"tumpus\")\n# Numpuses are sour\nnumpus = Bool(\"numpus\")\n# Tumpuses are not sour\nsour = Bool(\"sour\")\n# Tumpuses are vumpuses\nvumpus = Bool(\"vumpus\")\n# Vumpuses are earthy\nearthy = Bool(\"earthy\")\n# Every vumpus is a zumpus\nzumpus = Bool(\"zumpus\")\n# Zumpuses are small\nsmall = Bool(\"small\")\n# Zumpuses are rompuses\nrompus = Bool(\"rompus\")\n# Max is a yumpus\nmax = Bool(\"max\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Jompuses are not shy\nsolver.add(Implies(jompus, Not(shy)))\n# Jompuses are yumpuses\nsolver.add(Implies(jompus, yumpus))\n# Each yumpus is aggressive\nsolver.add(Implies(yumpus, aggressive))\n# Each yumpus is a dumpus\nsolver.add(Implies(yumpus, dumpus))\n# Dumpuses are not wooden\nsolver.add(Implies(dumpus, Not(wooden)))\n# Dumpuses are wumpuses\nsolver.add(Implies(dumpus, wumpus))\n# Wumpuses are red\nsolver.add(Implies(wumpus, red))\n# Every wumpus is an impus\nsolver.add(Implies(wumpus, impus))\n# Each impus is opaque\nsolver.add(Implies(impus, opaque))\n# Impuses are tumpuses\nsolver.add(Implies(impus, tumpus))\n# Numpuses are sour\nsolver.add(Implies(numpus, sour))\n# Tumpuses are not sour\nsolver.add(Implies(tumpus, Not(sour)))\n# Tumpuses are vumpuses\nsolver.add(Implies(tumpus, vumpus))\n# Vumpuses are earthy\nsolver.add(Implies(vumpus, earthy))\n# Every vumpus is a zumpus\nsolver.add(Implies(vumpus, zumpus))\n# Zumpuses are small\nsolver.add(Implies(zumpus, small))\n# Zumpuses are rompuses\nsolver.add(Implies(zumpus, rompus))\n# Max is a yumpus\nsolver.add(Implies(max, yumpus))\n\n# Create facts in the problem\nsolver.add(max)\n\n# Create statements to be checked\nsolver.add(max, sour)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_1",
    "context": "Jompuses are not shy. Jompuses are yumpuses. Each yumpus is aggressive. Each yumpus is a dumpus. Dumpuses are not wooden. Dumpuses are wumpuses. Wumpuses are red. Every wumpus is an impus. Each impus is opaque. Impuses are tumpuses. Numpuses are sour. Tumpuses are not sour. Tumpuses are vumpuses. Vumpuses are earthy. Every vumpus is a zumpus. Zumpuses are small. Zumpuses are rompuses. Max is a yumpus.",
    "question": "Is the following statement true or false? Max is sour.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Jompuses are not shy\njompus = Bool(\"jompus\")\n# Jompuses are yumpuses\nyumpus = Bool(\"yumpus\")\n# Each yumpus is aggressive\naggressive = Bool(\"aggressive\")\n# Each yumpus is a dumpus\ndumpus = Bool(\"dumpus\")\n# Dumpuses are not wooden\nwooden = Bool(\"wooden\")\n# Dumpuses are wumpuses\nwumpus = Bool(\"wumpus\")\n# Wumpuses are red\nred = Bool(\"red\")\n# Every wumpus is an impus\nimpus = Bool(\"impus\")\n# Each impus is opaque\nopaque = Bool(\"opaque\")\n# Impuses are tumpuses\ntumpus = Bool(\"tumpus\")\n# Numpuses are sour\nnumpus = Bool(\"numpus\")\n# Tumpuses are not sour\nsour = Bool(\"sour\")\n# Tumpuses are vumpuses\nvumpus = Bool(\"vumpus\")\n# Vumpuses are earthy\nearthy = Bool(\"earthy\")\n# Every vumpus is a zumpus\nzumpus = Bool(\"zumpus\")\n# Zumpuses are small\nsmall = Bool(\"small\")\n# Zumpuses are rompuses\nrompus = Bool(\"rompus\")\n# Max is a yumpus\nmax = Bool(\"max\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Jompuses are not shy\nsolver.add(Implies(jompus, Not(Bool(\"shy\"))))\n# Jompuses are yumpuses\nsolver.add(Implies(jompus, yumpus))\n# Each yumpus is aggressive\nsolver.add(Implies(yumpus, aggressive))\n# Each yumpus is a dumpus\nsolver.add(Implies(yumpus, dumpus))\n# Dumpuses are not wooden\nsolver.add(Implies(dumpus, Not(wooden)))\n# Dumpuses are wumpuses\nsolver.add(Implies(dumpus, wumpus))\n# Wumpuses are red\nsolver.add(Implies(wumpus, red))\n# Every wumpus is an impus\nsolver.add(Implies(wumpus, impus))\n# Each impus is opaque\nsolver.add(Implies(impus, opaque))\n# Impuses are tumpuses\nsolver.add(Implies(impus, tumpus))\n# Numpuses are sour\nsolver.add(Implies(numpus, sour))\n# Tumpuses are not sour\nsolver.add(Implies(tumpus, Not(sour)))\n# Tumpuses are vumpuses\nsolver.add(Implies(tumpus, vumpus))\n# Vumpuses are earthy\nsolver.add(Implies(vumpus, earthy))\n# Every vumpus is a zumpus\nsolver.add(Implies(vumpus, zumpus))\n# Zumpuses are small\nsolver.add(Implies(zumpus, small))\n# Zumpuses are rompuses\nsolver.add(Implies(zumpus, rompus))\n# Max is a yumpus\nsolver.add(Implies(max, yumpus))\n\n# Create facts in the problem\nsolver.add(max)\n\n# Create statements to be checked\nsolver.add(max, sour)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_2",
    "context": "Every tumpus is not angry. Tumpuses are rompuses. Every numpus is not bright. Rompuses are not luminous. Rompuses are yumpuses. Yumpuses are transparent. Yumpuses are zumpuses. Each zumpus is not bitter. Zumpuses are impuses. Impuses are red. Each impus is a dumpus. Every dumpus is happy. Each dumpus is a vumpus. Vumpuses are bright. Every vumpus is a jompus. Jompuses are large. Each jompus is a wumpus. Stella is a yumpus.",
    "question": "Is the following statement true or false? Stella is bright.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every tumpus is not angry\ntumpus = Bool(\"tumpus\")\nangry = Bool(\"angry\")\n# Tumpuses are rompuses\nrompus = Bool(\"rompus\")\n# Every numpus is not bright\nnumpus = Bool(\"numpus\")\nbright = Bool(\"bright\")\n# Rompuses are not luminous\nluminous = Bool(\"luminous\")\n# Rompuses are yumpuses\nyumpus = Bool(\"yumpus\")\n# Yumpuses are transparent\ntransparent = Bool(\"transparent\")\n# Yumpuses are zumpuses\nzumpus = Bool(\"zumpus\")\n# Each zumpus is not bitter\nbitter = Bool(\"bitter\")\n# Zumpuses are impuses\nimpus = Bool(\"impus\")\n# Impuses are red\nred = Bool(\"red\")\n# Each impus is a dumpus\ndumpus = Bool(\"dumpus\")\n# Every dumpus is happy\nhappy = Bool(\"happy\")\n# Each dumpus is a vumpus\nvumpus = Bool(\"vumpus\")\n# Vumpuses are bright\nbright_vumpus = Bool(\"bright_vumpus\")\n# Every vumpus is a jompus\njompus = Bool(\"jompus\")\n# Jompuses are large\nlarge = Bool(\"large\")\n# Each jompus is a wumpus\nwumpus = Bool(\"wumpus\")\n# Stella is a yumpus\nstella = Bool(\"stella\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every tumpus is not angry\nsolver.add(Implies(tumpus, Not(angry)))\n# Tumpuses are rompuses\nsolver.add(Implies(tumpus, rompus))\n# Every numpus is not bright\nsolver.add(Implies(numpus, Not(bright)))\n# Rompuses are not luminous\nsolver.add(Implies(rompus, Not(luminous)))\n# Rompuses are yumpuses\nsolver.add(Implies(rompus, yumpus))\n# Yumpuses are transparent\nsolver.add(Implies(yumpus, transparent))\n# Yumpuses are zumpuses\nsolver.add(Implies(yumpus, zumpus))\n# Each zumpus is not bitter\nsolver.add(Implies(zumpus, Not(bitter)))\n# Zumpuses are impuses\nsolver.add(Implies(zumpus, impus))\n# Impuses are red\nsolver.add(Implies(impus, red))\n# Each impus is a dumpus\nsolver.add(Implies(impus, dumpus))\n# Every dumpus is happy\nsolver.add(Implies(dumpus, happy))\n# Each dumpus is a vumpus\nsolver.add(Implies(dumpus, vumpus))\n# Vumpuses are bright\nsolver.add(Implies(vumpus, bright_vumpus))\n# Every vumpus is a jompus\nsolver.add(Implies(vumpus, jompus))\n# Jompuses are large\nsolver.add(Implies(jompus, large))\n# Each jompus is a wumpus\nsolver.add(Implies(jompus, wumpus))\n# Stella is a yumpus\nsolver.add(Implies(stella, yumpus))\n\n# Create facts in the problem\nsolver.add(stella)\n\n# Create statements to be checked\nsolver.add(stella, bright)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_3",
    "context": "Vumpuses are floral. Vumpuses are tumpuses. Tumpuses are brown. Each tumpus is a wumpus. Wumpuses are small. Each wumpus is a rompus. Each zumpus is metallic. Every rompus is happy. Rompuses are impuses. Each impus is amenable. Each impus is a dumpus. Every dumpus is not metallic. Dumpuses are numpuses. Each numpus is bitter. Each numpus is a jompus. Every jompus is cold. Each jompus is a yumpus. Wren is a tumpus.",
    "question": "Is the following statement true or false? Wren is not metallic.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Vumpuses are floral\nvumpus = Bool(\"vumpus\")\n# Vumpuses are tumpuses\ntumpus = Bool(\"tumpus\")\n# Tumpuses are brown\nbrown = Bool(\"brown\")\n# Each tumpus is a wumpus\nwumpus = Bool(\"wumpus\")\n# Wumpuses are small\nsmall = Bool(\"small\")\n# Each wumpus is a rompus\nrompus = Bool(\"rompus\")\n# Each zumpus is metallic\nzumpus = Bool(\"zumpus\")\n# Every rompus is happy\nhappy = Bool(\"happy\")\n# Rompuses are impuses\nimpus = Bool(\"impus\")\n# Each impus is amenable\namenable = Bool(\"amenable\")\n# Each impus is a dumpus\ndumpus = Bool(\"dumpus\")\n# Every dumpus is not metallic\nmetallic = Bool(\"metallic\")\n# Dumpuses are numpuses\nnumpus = Bool(\"numpus\")\n# Each numpus is bitter\nbitter = Bool(\"bitter\")\n# Each numpus is a jompus\njompus = Bool(\"jompus\")\n# Every jompus is cold\ncold = Bool(\"cold\")\n# Each jompus is a yumpus\nyumpus = Bool(\"yumpus\")\n# Wren is a tumpus\nwren = Bool(\"wren\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Vumpuses are floral\nsolver.add(Implies(vumpus, floral))\n# Vumpuses are tumpuses\nsolver.add(Implies(vumpus, tumpus))\n# Tumpuses are brown\nsolver.add(Implies(tumpus, brown))\n# Each tumpus is a wumpus\nsolver.add(Implies(tumpus, wumpus))\n# Wumpuses are small\nsolver.add(Implies(wumpus, small))\n# Each wumpus is a rompus\nsolver.add(Implies(wumpus, rompus))\n# Each zumpus is metallic\nsolver.add(Implies(zumpus, metallic))\n# Every rompus is happy\nsolver.add(Implies(rompus, happy))\n# Rompuses are impuses\nsolver.add(Implies(rompus, impus))\n# Each impus is amenable\nsolver.add(Implies(impus, amenable))\n# Each impus is a dumpus\nsolver.add(Implies(impus, dumpus))\n# Every dumpus is not metallic\nsolver.add(Implies(dumpus, Not(metallic)))\n# Dumpuses are numpuses\nsolver.add(Implies(dumpus, numpus))\n# Each numpus is bitter\nsolver.add(Implies(numpus, bitter))\n# Each numpus is a jompus\nsolver.add(Implies(numpus, jompus))\n# Every jompus is cold\nsolver.add(Implies(jompus, cold))\n# Each jompus is a yumpus\nsolver.add(Implies(jompus, yumpus))\n# Wren is a tumpus\nsolver.add(Implies(wren, tumpus))\n\n# Create facts in the problem\nsolver.add(wren)\n\n# Create statements to be checked\nsolver.add(wren, Not(metallic))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_3",
    "context": "Vumpuses are floral. Vumpuses are tumpuses. Tumpuses are brown. Each tumpus is a wumpus. Wumpuses are small. Each wumpus is a rompus. Each zumpus is metallic. Every rompus is happy. Rompuses are impuses. Each impus is amenable. Each impus is a dumpus. Every dumpus is not metallic. Dumpuses are numpuses. Each numpus is bitter. Each numpus is a jompus. Every jompus is cold. Each jompus is a yumpus. Wren is a tumpus.",
    "question": "Is the following statement true or false? Wren is not metallic.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Vumpuses are floral\nvumpus = Bool(\"vumpus\")\n# Vumpuses are tumpuses\ntumpus = Bool(\"tumpus\")\n# Tumpuses are brown\nbrown = Bool(\"brown\")\n# Each tumpus is a wumpus\nwumpus = Bool(\"wumpus\")\n# Wumpuses are small\nsmall = Bool(\"small\")\n# Each wumpus is a rompus\nrompus = Bool(\"rompus\")\n# Each zumpus is metallic\nzumpus = Bool(\"zumpus\")\n# Every rompus is happy\nhappy = Bool(\"happy\")\n# Rompuses are impuses\nimpus = Bool(\"impus\")\n# Each impus is amenable\namenable = Bool(\"amenable\")\n# Each impus is a dumpus\ndumpus = Bool(\"dumpus\")\n# Every dumpus is not metallic\nmetallic = Bool(\"metallic\")\n# Dumpuses are numpuses\nnumpus = Bool(\"numpus\")\n# Each numpus is bitter\nbitter = Bool(\"bitter\")\n# Each numpus is a jompus\njompus = Bool(\"jompus\")\n# Every jompus is cold\ncold = Bool(\"cold\")\n# Each jompus is a yumpus\nyumpus = Bool(\"yumpus\")\n# Wren is a tumpus\nwren = Bool(\"wren\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Vumpuses are floral\nsolver.add(Implies(vumpus, floral))\n# Vumpuses are tumpuses\nsolver.add(Implies(vumpus, tumpus))\n# Tumpuses are brown\nsolver.add(Implies(tumpus, brown))\n# Each tumpus is a wumpus\nsolver.add(Implies(tumpus, wumpus))\n# Wumpuses are small\nsolver.add(Implies(wumpus, small))\n# Each wumpus is a rompus\nsolver.add(Implies(wumpus, rompus))\n# Each zumpus is metallic\nsolver.add(Implies(zumpus, metallic))\n# Every rompus is happy\nsolver.add(Implies(rompus, happy))\n# Rompuses are impuses\nsolver.add(Implies(rompus, impus))\n# Each impus is amenable\nsolver.add(Implies(impus, amenable))\n# Each impus is a dumpus\nsolver.add(Implies(impus, dumpus))\n# Every dumpus is not metallic\nsolver.add(Implies(dumpus, Not(metallic)))\n# Dumpuses are numpuses\nsolver.add(Implies(dumpus, numpus))\n# Each numpus is bitter\nsolver.add(Implies(numpus, bitter))\n# Each numpus is a jompus\nsolver.add(Implies(numpus, jompus))\n# Every jompus is cold\nsolver.add(Implies(jompus, cold))\n# Each jompus is a yumpus\nsolver.add(Implies(jompus, yumpus))\n# Wren is a tumpus\nsolver.add(Implies(wren, tumpus))\n\n# Create facts in the problem\nsolver.add(wren)\n\n# Create statements to be checked\nsolver.add(wren, Not(metallic))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_3",
    "context": "Vumpuses are floral. Vumpuses are tumpuses. Tumpuses are brown. Each tumpus is a wumpus. Wumpuses are small. Each wumpus is a rompus. Each zumpus is metallic. Every rompus is happy. Rompuses are impuses. Each impus is amenable. Each impus is a dumpus. Every dumpus is not metallic. Dumpuses are numpuses. Each numpus is bitter. Each numpus is a jompus. Every jompus is cold. Each jompus is a yumpus. Wren is a tumpus.",
    "question": "Is the following statement true or false? Wren is not metallic.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Vumpuses are floral\nvumpus = Bool(\"vumpus\")\n# Vumpuses are tumpuses\ntumpus = Bool(\"tumpus\")\n# Tumpuses are brown\nbrown = Bool(\"brown\")\n# Each tumpus is a wumpus\nwumpus = Bool(\"wumpus\")\n# Wumpuses are small\nsmall = Bool(\"small\")\n# Each wumpus is a rompus\nrompus = Bool(\"rompus\")\n# Each zumpus is metallic\nzumpus = Bool(\"zumpus\")\n# Every rompus is happy\nhappy = Bool(\"happy\")\n# Rompuses are impuses\nimpus = Bool(\"impus\")\n# Each impus is amenable\namenable = Bool(\"amenable\")\n# Each impus is a dumpus\ndumpus = Bool(\"dumpus\")\n# Every dumpus is not metallic\nmetallic = Bool(\"metallic\")\n# Dumpuses are numpuses\nnumpus = Bool(\"numpus\")\n# Each numpus is bitter\nbitter = Bool(\"bitter\")\n# Each numpus is a jompus\njompus = Bool(\"jompus\")\n# Every jompus is cold\ncold = Bool(\"cold\")\n# Each jompus is a yumpus\nyumpus = Bool(\"yumpus\")\n# Wren is a tumpus\nwren = Bool(\"wren\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Vumpuses are floral\nsolver.add(Implies(vumpus, floral))  # Sentence 1\n# Vumpuses are tumpuses\nsolver.add(Implies(vumpus, tumpus))  # Sentence 2\n# Tumpuses are brown\nsolver.add(Implies(tumpus, brown))",
    "answer": "A"
  },
  {
    "id": "ProntoQA_4",
    "context": "Rompuses are spicy. Every rompus is an impus. Yumpuses are not small. Impuses are orange. Impuses are zumpuses. Zumpuses are not hot. Zumpuses are numpuses. Numpuses are metallic. Numpuses are wumpuses. Every wumpus is not kind. Each wumpus is a dumpus. Each dumpus is not bright. Every dumpus is a jompus. Jompuses are small. Jompuses are vumpuses. Each vumpus is not shy. Every vumpus is a tumpus. Alex is a zumpus.",
    "question": "Is the following statement true or false? Alex is not small.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Rompuses are spicy\nrompus = Bool(\"rompus\")\n# Every rompus is an impus\nimpus = Bool(\"impus\")\n# Yumpuses are not small\nyumpus = Bool(\"yumpus\")\n# Impuses are orange\norange = Bool(\"orange\")\n# Impuses are zumpuses\nzumpus = Bool(\"zumpus\")\n# Zumpuses are not hot\nhot = Bool(\"hot\")\n# Zumpuses are numpuses\nnumpus = Bool(\"numpus\")\n# Numpuses are metallic\nmetallic = Bool(\"metallic\")\n# Numpuses are wumpuses\nwumpus = Bool(\"wumpus\")\n# Every wumpus is not kind\nkind = Bool(\"kind\")\n# Each wumpus is a dumpus\ndumpus = Bool(\"dumpus\")\n# Each dumpus is not bright\nbright = Bool(\"bright\")\n# Every dumpus is a jompus\njompus = Bool(\"jompus\")\n# Jompuses are small\nsmall = Bool(\"small\")\n# Jompuses are vumpuses\nvumpus = Bool(\"vumpus\")\n# Each vumpus is not shy\nshy = Bool(\"shy\")\n# Every vumpus is a tumpus\ntumpus = Bool(\"tumpus\")\n# Alex is a zumpus\nalex = Bool(\"alex\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Rompuses are spicy\nsolver.add(Implies(rompus, spicy))\n# Every rompus is an impus\nsolver.add(Implies(rompus, impus))\n# Yumpuses are not small\nsolver.add(Implies(yumpus, Not(small)))\n# Impuses are orange\nsolver.add(Implies(impus, orange))\n# Impuses are zumpuses\nsolver.add(Implies(impus, zumpus))\n# Zumpuses are not hot\nsolver.add(Implies(zumpus, Not(hot)))\n# Zumpuses are numpuses\nsolver.add(Implies(zumpus, numpus))\n# Numpuses are metallic\nsolver.add(Implies(numpus, metallic))\n# Numpuses are wumpuses\nsolver.add(Implies(numpus, wumpus))\n# Every wumpus is not kind\nsolver.add(Implies(wumpus, Not(kind)))\n# Each wumpus is a dumpus\nsolver.add(Implies(wumpus, dumpus))\n# Each dumpus is not bright\nsolver.add(Implies(dumpus, Not(bright)))\n# Every dumpus is a jompus\nsolver.add(Implies(dumpus, jompus))\n# Jompuses are small\nsolver.add(Implies(jompus, small))\n# Jompuses are vumpuses\nsolver.add(Implies(jompus, vumpus))\n# Each vumpus is not shy\nsolver.add(Implies(vumpus, Not(shy)))\n# Every vumpus is a tumpus\nsolver.add(Implies(vumpus, tumpus))\n# Alex is a zumpus\nsolver.add(Implies(alex, zumpus))\n\n# Create facts in the problem\nsolver.add(alex)\n\n# Create statements to be checked\nsolver.add(alex, Not(small))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_4",
    "context": "Rompuses are spicy. Every rompus is an impus. Yumpuses are not small. Impuses are orange. Impuses are zumpuses. Zumpuses are not hot. Zumpuses are numpuses. Numpuses are metallic. Numpuses are wumpuses. Every wumpus is not kind. Each wumpus is a dumpus. Each dumpus is not bright. Every dumpus is a jompus. Jompuses are small. Jompuses are vumpuses. Each vumpus is not shy. Every vumpus is a tumpus. Alex is a zumpus.",
    "question": "Is the following statement true or false? Alex is not small.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Rompuses are spicy\nrompus = Bool(\"rompus\")\n# Every rompus is an impus\nimpus = Bool(\"impus\")\n# Yumpuses are not small\nyumpus = Bool(\"yumpus\")\n# Impuses are orange\norange = Bool(\"orange\")\n# Impuses are zumpuses\nzumpus = Bool(\"zumpus\")\n# Zumpuses are not hot\nhot = Bool(\"hot\")\n# Zumpuses are numpuses\nnumpus = Bool(\"numpus\")\n# Numpuses are metallic\nmetallic = Bool(\"metallic\")\n# Numpuses are wumpuses\nwumpus = Bool(\"wumpus\")\n# Every wumpus is not kind\nkind = Bool(\"kind\")\n# Each wumpus is a dumpus\ndumpus = Bool(\"dumpus\")\n# Each dumpus is not bright\nbright = Bool(\"bright\")\n# Every dumpus is a jompus\njompus = Bool(\"jompus\")\n# Jompuses are small\nsmall = Bool(\"small\")\n# Jompuses are vumpuses\nvumpus = Bool(\"vumpus\")\n# Each vumpus is not shy\nshy = Bool(\"shy\")\n# Every vumpus is a tumpus\ntumpus = Bool(\"tumpus\")\n# Alex is a zumpus\nalex = Bool(\"alex\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Rompuses are spicy\nsolver.add(Implies(rompus, spicy))\n# Every rompus is an impus\nsolver.add(Implies(rompus, impus))\n# Yumpuses are not small\nsolver.add(Implies(yumpus, Not(small)))\n# Impuses are orange\nsolver.add(Implies(impus, orange))\n# Impuses are zumpuses\nsolver.add(Implies(impus, zumpus))\n# Zumpuses are not hot\nsolver.add(Implies(zumpus, Not(hot)))\n# Zumpuses are numpuses\nsolver.add(Implies(zumpus, numpus))\n# Numpuses are metallic\nsolver.add(Implies(numpus, metallic))\n# Numpuses are wumpuses\nsolver.add(Implies(numpus, wumpus))\n# Every wumpus is not kind\nsolver.add(Implies(wumpus, Not(kind)))\n# Each wumpus is a dumpus\nsolver.add(Implies(wumpus, dumpus))\n# Each dumpus is not bright\nsolver.add(Implies(dumpus, Not(bright)))\n# Every dumpus is a jompus\nsolver.add(Implies(dumpus, jompus))\n# Jompuses are small\nsolver.add(Implies(jompus, small))\n# Jompuses are vumpuses\nsolver.add(Implies(jompus, vumpus))\n# Each vumpus is not shy\nsolver.add(Implies(vumpus, Not(shy)))\n# Every vumpus is a tumpus\nsolver.add(Implies(vumpus, tumpus))\n# Alex is a zumpus\nsolver.add(Implies(alex, zumpus))\n\n# Create facts in the problem\nsolver.add(alex)\n\n# Create statements to be checked\nsolver.add(alex, Not(small))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_4",
    "context": "Rompuses are spicy. Every rompus is an impus. Yumpuses are not small. Impuses are orange. Impuses are zumpuses. Zumpuses are not hot. Zumpuses are numpuses. Numpuses are metallic. Numpuses are wumpuses. Every wumpus is not kind. Each wumpus is a dumpus. Each dumpus is not bright. Every dumpus is a jompus. Jompuses are small. Jompuses are vumpuses. Each vumpus is not shy. Every vumpus is a tumpus. Alex is a zumpus.",
    "question": "Is the following statement true or false? Alex is not small.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Rompuses are spicy\nrompus = Bool(\"rompus\")  # Sentence: Rompuses are spicy\n# Every rompus is an impus\nimpus = Bool(\"impus\")  # Sentence: Every rompus is an impus\n# Yumpuses are not small\nyumpus = Bool(\"yumpus\")  # Sentence: Yumpuses are not small\n# Impuses are orange\norange = Bool(\"orange\")  # Sentence: Impuses are orange\n# Impuses are zumpuses\nzumpus = Bool(\"zumpus\")  # Sentence: Impuses are zumpuses\n# Zumpuses are not hot\nhot = Bool(\"hot\")  # Sentence: Zumpuses are not hot\n# Zumpuses are numpuses\nnumpus = Bool(\"numpus\")  # Sentence: Zumpuses are numpuses\n# Numpuses are metallic\nmetallic = Bool(\"metallic\")  # Sentence: Numpuses are metallic\n# Numpuses are wumpuses\nwumpus = Bool(\"wumpus\")  # Sentence: Numpuses are wumpuses\n# Every wumpus is not kind\nkind = Bool(\"kind\")  # Sentence: Every wumpus is not kind\n# Each wumpus is a dumpus\ndumpus = Bool(\"dumpus\")  # Sentence: Each wumpus is a dumpus\n# Each dumpus is not bright\nbright = Bool(\"bright\")  # Sentence: Each dumpus is not bright\n# Every dumpus is a jompus\njompus = Bool(\"jompus\")  # Sentence: Every dumpus is a jompus\n# Jompuses are small\nsmall = Bool(\"small\")  # Sentence: Jompuses are small\n# Jompuses are vumpuses\nvumpus = Bool(\"vumpus\")  # Sentence",
    "answer": "B"
  },
  {
    "id": "ProntoQA_5",
    "context": "Rompuses are mean. Rompuses are zumpuses. Each zumpus is not happy. Each zumpus is a numpus. Each numpus is not temperate. Each numpus is a tumpus. Tumpuses are not large. Tumpuses are yumpuses. Every yumpus is earthy. Each yumpus is a jompus. Jompuses are blue. Every jompus is a wumpus. Wumpuses are not dull. Wumpuses are impuses. Each vumpus is dull. Impuses are sour. Impuses are dumpuses. Alex is a numpus.",
    "question": "Is the following statement true or false? Alex is not dull.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Rompuses are mean\nrompus = Bool(\"rompus\")\n# Rompuses are zumpuses\nzumpus = Bool(\"zumpus\")\n# Each zumpus is not happy\nzumpus_happy = Bool(\"zumpus_happy\")\n# Each zumpus is a numpus\nzumpus_numpus = Bool(\"zumpus_numpus\")\n# Each numpus is not temperate\nnumpus_temperate = Bool(\"numpus_temperate\")\n# Each numpus is a tumpus\nnumpus_tumpus = Bool(\"numpus_tumpus\")\n# Tumpuses are not large\ntumpus_large = Bool(\"tumpus_large\")\n# Tumpuses are yumpuses\ntumpus_yumpus = Bool(\"tumpus_yumpus\")\n# Every yumpus is earthy\nyumpus_earthy = Bool(\"yumpus_earthy\")\n# Each yumpus is a jompus\nyumpus_jompus = Bool(\"yumpus_jompus\")\n# Jompuses are blue\njompus_blue = Bool(\"jompus_blue\")\n# Every jompus is a wumpus\njompus_wumpus = Bool(\"jompus_wumpus\")\n# Wumpuses are not dull\nwumpus_dull = Bool(\"wumpus_dull\")\n# Wumpuses are impuses\nwumpus_impus = Bool(\"wumpus_impus\")\n# Each vumpus is dull\nvumpus_dull = Bool(\"vumpus_dull\")\n# Impuses are sour\nimpus_sour = Bool(\"impus_sour\")\n# Impuses are dumpuses\nimpus_dumpus = Bool(\"impus_dumpus\")\n# Alex is a numpus\nalex_numpus = Bool(\"alex_numpus\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Rompuses are mean\nsolver.add(Implies(rompus, mean))\n# Rompuses are zumpuses\nsolver.add(Implies(rompus, zumpus))\n# Each zumpus is not happy\nsolver.add(Implies(zumpus, Not(happy)))\n# Each zumpus is a numpus\nsolver.add(Implies(zumpus, numpus))\n# Each numpus is not temperate\nsolver.add(Implies(numpus, Not(temperate)))\n# Each numpus is a tumpus\nsolver.add(Implies(numpus, tumpus))\n# Tumpuses are not large\nsolver.add(Implies(tumpus, Not(large)))\n# Tumpuses are yumpuses\nsolver.add(Implies(tumpus, yumpus))\n# Every yumpus is earthy\nsolver.add(Implies(yumpus, earthy))\n# Each yumpus is a jompus\nsolver.add(Implies(yumpus, jompus))\n# Jompuses are blue\nsolver.add(Implies(jompus, blue))\n# Every jompus is a wumpus\nsolver.add(Implies(jompus, wumpus))\n# Wumpuses are not dull\nsolver.add(Implies(wumpus, Not(dull)))\n# Wumpuses are impuses\nsolver.add(Implies(wumpus, impus))\n# Each vumpus is dull\nsolver.add(Implies(vumpus, dull))\n# Impuses are sour\nsolver.add(Implies(impus, sour))\n# Impuses are dumpuses\nsolver.add(Implies(impus, dumpus))\n# Alex is a numpus\nsolver.add(Implies(alex, numpus))\n\n# Create facts in the problem\nsolver.add(alex_numpus)\n\n# Create statements to be checked\nsolver.add(alex_numpus, Not(dull))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_5",
    "context": "Rompuses are mean. Rompuses are zumpuses. Each zumpus is not happy. Each zumpus is a numpus. Each numpus is not temperate. Each numpus is a tumpus. Tumpuses are not large. Tumpuses are yumpuses. Every yumpus is earthy. Each yumpus is a jompus. Jompuses are blue. Every jompus is a wumpus. Wumpuses are not dull. Wumpuses are impuses. Each vumpus is dull. Impuses are sour. Impuses are dumpuses. Alex is a numpus.",
    "question": "Is the following statement true or false? Alex is not dull.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Rompuses are mean\nrompus = Bool(\"rompus\")\n# Rompuses are zumpuses\nzumpus = Bool(\"zumpus\")\n# Each zumpus is not happy\nzumpus_happy = Bool(\"zumpus_happy\")\n# Each zumpus is a numpus\nzumpus_numpus = Bool(\"zumpus_numpus\")\n# Each numpus is not temperate\nnumpus_temperate = Bool(\"numpus_temperate\")\n# Each numpus is a tumpus\nnumpus_tumpus = Bool(\"numpus_tumpus\")\n# Tumpuses are not large\ntumpus_large = Bool(\"tumpus_large\")\n# Tumpuses are yumpuses\ntumpus_yumpus = Bool(\"tumpus_yumpus\")\n# Every yumpus is earthy\nyumpus_earthy = Bool(\"yumpus_earthy\")\n# Each yumpus is a jompus\nyumpus_jompus = Bool(\"yumpus_jompus\")\n# Jompuses are blue\njompus_blue = Bool(\"jompus_blue\")\n# Every jompus is a wumpus\njompus_wumpus = Bool(\"jompus_wumpus\")\n# Wumpuses are not dull\nwumpus_dull = Bool(\"wumpus_dull\")\n# Wumpuses are impuses\nwumpus_impus = Bool(\"wumpus_impus\")\n# Each vumpus is dull\nvumpus_dull = Bool(\"vumpus_dull\")\n# Impuses are sour\nimpus_sour = Bool(\"impus_sour\")\n# Impuses are dumpuses\nimpus_dumpus = Bool(\"impus_dumpus\")\n# Alex is a numpus\nalex_numpus = Bool(\"alex_numpus\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Rompuses are mean\nsolver.add(Implies(rompus, mean))\n# Rompuses are zumpuses\nsolver.add(Implies(rompus, zumpus))\n# Each zumpus is not happy\nsolver.add(Implies(zumpus, Not(happy)))\n# Each zumpus is a numpus\nsolver.add(Implies(zumpus, numpus))\n# Each numpus is not temperate\nsolver.add(Implies(numpus, Not(temperate)))\n# Each numpus is a tumpus\nsolver.add(Implies(numpus, tumpus))\n# Tumpuses are not large\nsolver.add(Implies(tumpus, Not(large)))\n# Tumpuses are yumpuses\nsolver.add(Implies(tumpus, yumpus))\n# Every yumpus is earthy\nsolver.add(Implies(yumpus, earthy))\n# Each yumpus is a jompus\nsolver.add(Implies(yumpus, jompus))\n# Jompuses are blue\nsolver.add(Implies(jompus, blue))\n# Every jompus is a wumpus\nsolver.add(Implies(jompus, wumpus))\n# Wumpuses are not dull\nsolver.add(Implies(wumpus, Not(dull)))\n# Wumpuses are impuses\nsolver.add(Implies(wumpus, impus))\n# Each vumpus is dull\nsolver.add(Implies(vumpus, dull))\n# Impuses are sour\nsolver.add(Implies(impus, sour))\n# Impuses are dumpuses\nsolver.add(Implies(impus, dumpus))\n# Alex is a numpus\nsolver.add(Implies(alex, numpus))\n\n# Create facts in the problem\nsolver.add(alex_numpus)\n\n# Create statements to be checked\nsolver.add(alex_numpus, Not(dull))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_5",
    "context": "Rompuses are mean. Rompuses are zumpuses. Each zumpus is not happy. Each zumpus is a numpus. Each numpus is not temperate. Each numpus is a tumpus. Tumpuses are not large. Tumpuses are yumpuses. Every yumpus is earthy. Each yumpus is a jompus. Jompuses are blue. Every jompus is a wumpus. Wumpuses are not dull. Wumpuses are impuses. Each vumpus is dull. Impuses are sour. Impuses are dumpuses. Alex is a numpus.",
    "question": "Is the following statement true or false? Alex is not dull.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Rompuses are mean\nrompus = Bool(\"rompus\")\n# Zumpuses are mean\nzumpus = Bool(\"zumpus\")\n# Each zumpus is not happy\nzumpus_happy = Bool(\"zumpus_happy\")\n# Each zumpus is a numpus\nzumpus_numpus = Bool(\"zumpus_numpus\")\n# Each numpus is not temperate\nnumpus_temperate = Bool(\"numpus_temperate\")\n# Each numpus is a tumpus\nnumpus_tumpus = Bool(\"numpus_tumpus\")\n# Tumpuses are not large\ntumpus_large = Bool(\"tumpus_large\")\n# Tumpuses are yumpuses\nt",
    "answer": "A"
  },
  {
    "id": "ProntoQA_6",
    "context": "Every tumpus is large. Tumpuses are wumpuses. Each wumpus is not opaque. Every dumpus is not dull. Every wumpus is a rompus. Every rompus is brown. Each rompus is a vumpus. Each vumpus is temperate. Vumpuses are jompuses. Jompuses are dull. Jompuses are numpuses. Every numpus is liquid. Each numpus is an impus. Impuses are spicy. Every impus is a yumpus. Every yumpus is not nervous. Every yumpus is a zumpus. Wren is a tumpus.",
    "question": "Is the following statement true or false? Wren is dull.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every tumpus is large\ntumpus = Bool(\"tumpus\")\n# Tumpuses are wumpuses\nwumpus = Bool(\"wumpus\")\n# Each wumpus is not opaque\nwumpus_opaque = Bool(\"wumpus_opaque\")\n# Every dumpus is not dull\ndumpus = Bool(\"dumpus\")\n# Every wumpus is a rompus\nwumpus_rompus = Bool(\"wumpus_rompus\")\n# Every rompus is brown\nrompus = Bool(\"rompus\")\n# Each rompus is a vumpus\nrompus_vumpus = Bool(\"rompus_vumpus\")\n# Each vumpus is temperate\nvumpus = Bool(\"vumpus\")\n# Vumpuses are jompuses\njompus = Bool(\"jompus\")\n# Jompuses are dull\njompus_dull = Bool(\"jompus_dull\")\n# Jompuses are numpuses\njompus_numpus = Bool(\"jompus_numpus\")\n# Every numpus is liquid\nnumpus = Bool(\"numpus\")\n# Each numpus is an impus\nnumpus_impus = Bool(\"numpus_impus\")\n# Impuses are spicy\nimpus = Bool(\"impus\")\n# Every impus is a yumpus\nimpus_yumpus = Bool(\"impus_yumpus\")\n# Every yumpus is not nervous\nyumpus_nervous = Bool(\"yumpus_nervous\")\n# Every yumpus is a zumpus\nyumpus_zumpus = Bool(\"yumpus_zumpus\")\n# Wren is a tumpus\nwren = Bool(\"wren\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every tumpus is large\nsolver.add(Implies(tumpus, large))\n# Tumpuses are wumpuses\nsolver.add(Implies(tumpus, wumpus))\n# Each wumpus is not opaque\nsolver.add(Implies(wumpus, Not(opaque)))\n# Every dumpus is not dull\nsolver.add(Implies(dumpus, Not(dull)))\n# Every wumpus is a rompus\nsolver.add(Implies(wumpus, rompus))\n# Every rompus is brown\nsolver.add(Implies(rompus, brown))\n# Each rompus is a vumpus\nsolver.add(Implies(rompus, vumpus))\n# Each vumpus is temperate\nsolver.add(Implies(vumpus, temperate))\n# Vumpuses are jompuses\nsolver.add(Implies(vumpus, jompus))\n# Jompuses are dull\nsolver.add(Implies(jompus, dull))\n# Jompuses are numpuses\nsolver.add(Implies(jompus, numpus))\n# Every numpus is liquid\nsolver.add(Implies(numpus, liquid))\n# Each numpus is an impus\nsolver.add(Implies(numpus, impus))\n# Impuses are spicy\nsolver.add(Implies(impus, spicy))\n# Every impus is a yumpus\nsolver.add(Implies(impus, yumpus))\n# Every yumpus is not nervous\nsolver.add(Implies(yumpus, Not(nervous)))\n# Every yumpus is a zumpus\nsolver.add(Implies(yumpus, zumpus))\n# Wren is a tumpus\nsolver.add(Implies(wren, tumpus))\n\n# Create facts in the problem\n\n# Create statements to be checked\nsolver.add(wren, dull)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_6",
    "context": "Every tumpus is large. Tumpuses are wumpuses. Each wumpus is not opaque. Every dumpus is not dull. Every wumpus is a rompus. Every rompus is brown. Each rompus is a vumpus. Each vumpus is temperate. Vumpuses are jompuses. Jompuses are dull. Jompuses are numpuses. Every numpus is liquid. Each numpus is an impus. Impuses are spicy. Every impus is a yumpus. Every yumpus is not nervous. Every yumpus is a zumpus. Wren is a tumpus.",
    "question": "Is the following statement true or false? Wren is dull.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every tumpus is large\ntumpus = Bool(\"tumpus\")\n# Tumpuses are wumpuses\nwumpus = Bool(\"wumpus\")\n# Each wumpus is not opaque\nwumpus_opaque = Bool(\"wumpus_opaque\")\n# Every dumpus is not dull\ndumpus = Bool(\"dumpus\")\n# Every wumpus is a rompus\nwumpus_rompus = Bool(\"wumpus_rompus\")\n# Every rompus is brown\nrompus = Bool(\"rompus\")\n# Each rompus is a vumpus\nrompus_vumpus = Bool(\"rompus_vumpus\")\n# Each vumpus is temperate\nvumpus = Bool(\"vumpus\")\n# Vumpuses are jompuses\njompus = Bool(\"jompus\")\n# Jompuses are dull\njompus_dull = Bool(\"jompus_dull\")\n# Jompuses are numpuses\njompus_numpus = Bool(\"jompus_numpus\")\n# Every numpus is liquid\nnumpus = Bool(\"numpus\")\n# Each numpus is an impus\nnumpus_impus = Bool(\"numpus_impus\")\n# Impuses are spicy\nimpus = Bool(\"impus\")\n# Every impus is a yumpus\nimpus_yumpus = Bool(\"impus_yumpus\")\n# Every yumpus is not nervous\nyumpus_nervous = Bool(\"yumpus_nervous\")\n# Every yumpus is a zumpus\nyumpus_zumpus = Bool(\"yumpus_zumpus\")\n# Wren is a tumpus\nwren = Bool(\"wren\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every tumpus is large\nsolver.add(Implies(tumpus, large))\n# Tumpuses are wumpuses\nsolver.add(Implies(tumpus, wumpus))\n# Each wumpus is not opaque\nsolver.add(Implies(wumpus, Not(opaque)))\n# Every dumpus is not dull\nsolver.add(Implies(dumpus, Not(dull)))\n# Every wumpus is a rompus\nsolver.add(Implies(wumpus, rompus))\n# Every rompus is brown\nsolver.add(Implies(rompus, brown))\n# Each rompus is a vumpus\nsolver.add(Implies(rompus, vumpus))\n# Each vumpus is temperate\nsolver.add(Implies(vumpus, temperate))\n# Vumpuses are jompuses\nsolver.add(Implies(vumpus, jompus))\n# Jompuses are dull\nsolver.add(Implies(jompus, dull))\n# Jompuses are numpuses\nsolver.add(Implies(jompus, numpus))\n# Every numpus is liquid\nsolver.add(Implies(numpus, liquid))\n# Each numpus is an impus\nsolver.add(Implies(numpus, impus))\n# Impuses are spicy\nsolver.add(Implies(impus, spicy))\n# Every impus is a yumpus\nsolver.add(Implies(impus, yumpus))\n# Every yumpus is not nervous\nsolver.add(Implies(yumpus, Not(nervous)))\n# Every yumpus is a zumpus\nsolver.add(Implies(yumpus, zumpus))\n# Wren is a tumpus\nsolver.add(Implies(wren, tumpus))\n\n# Create statements to be checked\nsolver.add(wren, dull)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_6",
    "context": "Every tumpus is large. Tumpuses are wumpuses. Each wumpus is not opaque. Every dumpus is not dull. Every wumpus is a rompus. Every rompus is brown. Each rompus is a vumpus. Each vumpus is temperate. Vumpuses are jompuses. Jompuses are dull. Jompuses are numpuses. Every numpus is liquid. Each numpus is an impus. Impuses are spicy. Every impus is a yumpus. Every yumpus is not nervous. Every yumpus is a zumpus. Wren is a tumpus.",
    "question": "Is the following statement true or false? Wren is dull.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every tumpus is large\ntumpus = Bool(\"tumpus\")  # Sentence: Every tumpus is large\n# Tumpuses are wumpuses\nwumpus = Bool(\"wumpus\")  # Sentence: Tumpuses are wumpuses\n# Each wumpus is not opaque\nwumpus_opaque = Bool(\"wumpus_opaque\")  # Sentence: Each wumpus is not opaque\n# Every dumpus is not dull\ndumpus = Bool(\"dumpus\")  # Sentence: Every dumpus is not dull\n# Every wumpus is a rompus\nwumpus_rompus = Bool(\"wumpus_rompus\")  # Sentence: Every wumpus is a rompus\n# Every rompus is brown\nrompus = Bool(\"rompus\")  # Sentence: Every rompus is brown\n# Each rompus is a vumpus\nrompus_vumpus = Bool(\"rompus_vumpus\")  # Sentence: Each rompus is a vumpus\n# Each vumpus is temperate\nvumpus = Bool(\"vumpus\")  # Sentence: Each vumpus is temperate\n#",
    "answer": "A"
  },
  {
    "id": "ProntoQA_7",
    "context": "Every rompus is orange. Every rompus is an impus. Vumpuses are happy. Every impus is spicy. Every impus is a wumpus. Wumpuses are transparent. Wumpuses are numpuses. Every numpus is not kind. Numpuses are tumpuses. Each tumpus is not bright. Tumpuses are yumpuses. Every yumpus is not liquid. Yumpuses are dumpuses. Each dumpus is not happy. Dumpuses are zumpuses. Every zumpus is earthy. Each zumpus is a jompus. Stella is a wumpus.",
    "question": "Is the following statement true or false? Stella is happy.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every rompus is orange\nrompus = Bool(\"rompus\")\n# Every rompus is an impus\nimpus = Bool(\"impus\")\n# Vumpuses are happy\nvumpus = Bool(\"vumpus\")\n# Every impus is spicy\nspicy = Bool(\"spicy\")\n# Every impus is a wumpus\nwumpus = Bool(\"wumpus\")\n# Wumpuses are transparent\ntransparent = Bool(\"transparent\")\n# Wumpuses are numpuses\nnumpus = Bool(\"numpus\")\n# Every numpus is not kind\nkind = Bool(\"kind\")\n# Numpuses are tumpuses\ntumpus = Bool(\"tumpus\")\n# Each tumpus is not bright\nbright = Bool(\"bright\")\n# Tumpuses are yumpuses\nyumpus = Bool(\"yumpus\")\n# Every yumpus is not liquid\nliquid = Bool(\"liquid\")\n# Yumpuses are dumpuses\ndumpus = Bool(\"dumpus\")\n# Each dumpus is not happy\nhappy = Bool(\"happy\")\n# Dumpuses are zumpuses\nzumpus = Bool(\"zumpus\")\n# Every zumpus is earthy\nearthy = Bool(\"earthy\")\n# Each zumpus is a jompus\njompus = Bool(\"jompus\")\n# Stella is a wumpus\nstella = Bool(\"stella\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every rompus is orange\nsolver.add(Implies(rompus, orange))\n# Every rompus is an impus\nsolver.add(Implies(rompus, impus))\n# Vumpuses are happy\nsolver.add(Implies(vumpus, happy))\n# Every impus is spicy\nsolver.add(Implies(impus, spicy))\n# Every impus is a wumpus\nsolver.add(Implies(impus, wumpus))\n# Wumpuses are transparent\nsolver.add(Implies(wumpus, transparent))\n# Wumpuses are numpuses\nsolver.add(Implies(wumpus, numpus))\n# Every numpus is not kind\nsolver.add(Implies(numpus, Not(kind)))\n# Numpuses are tumpuses\nsolver.add(Implies(numpus, tumpus))\n# Each tumpus is not bright\nsolver.add(Implies(tumpus, Not(bright)))\n# Tumpuses are yumpuses\nsolver.add(Implies(tumpus, yumpus))\n# Every yumpus is not liquid\nsolver.add(Implies(yumpus, Not(liquid)))\n# Yumpuses are dumpuses\nsolver.add(Implies(yumpus, dumpus))\n# Each dumpus is not happy\nsolver.add(Implies(dumpus, Not(happy)))\n# Dumpuses are zumpuses\nsolver.add(Implies(dumpus, zumpus))\n# Every zumpus is earthy\nsolver.add(Implies(zumpus, earthy))\n# Each zumpus is a jompus\nsolver.add(Implies(zumpus, jompus))\n# Stella is a wumpus\nsolver.add(Implies(stella, wumpus))\n\n# Create facts in the problem\nsolver.add(stella)\n\n# Create statements to be checked\nsolver.add(stella, happy)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_7",
    "context": "Every rompus is orange. Every rompus is an impus. Vumpuses are happy. Every impus is spicy. Every impus is a wumpus. Wumpuses are transparent. Wumpuses are numpuses. Every numpus is not kind. Numpuses are tumpuses. Each tumpus is not bright. Tumpuses are yumpuses. Every yumpus is not liquid. Yumpuses are dumpuses. Each dumpus is not happy. Dumpuses are zumpuses. Every zumpus is earthy. Each zumpus is a jompus. Stella is a wumpus.",
    "question": "Is the following statement true or false? Stella is happy.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every rompus is orange\nrompus = Bool(\"rompus\")\n# Every rompus is an impus\nimpus = Bool(\"impus\")\n# Vumpuses are happy\nvumpus = Bool(\"vumpus\")\n# Every impus is spicy\nspicy = Bool(\"spicy\")\n# Every impus is a wumpus\nwumpus = Bool(\"wumpus\")\n# Wumpuses are transparent\ntransparent = Bool(\"transparent\")\n# Wumpuses are numpuses\nnumpus = Bool(\"numpus\")\n# Every numpus is not kind\nkind = Bool(\"kind\")\n# Numpuses are tumpuses\ntumpus = Bool(\"tumpus\")\n# Each tumpus is not bright\nbright = Bool(\"bright\")\n# Tumpuses are yumpuses\nyumpus = Bool(\"yumpus\")\n# Every yumpus is not liquid\nliquid = Bool(\"liquid\")\n# Yumpuses are dumpuses\ndumpus = Bool(\"dumpus\")\n# Each dumpus is not happy\nhappy = Bool(\"happy\")\n# Dumpuses are zumpuses\nzumpus = Bool(\"zumpus\")\n# Every zumpus is earthy\nearthy = Bool(\"earthy\")\n# Each zumpus is a jompus\njompus = Bool(\"jompus\")\n# Stella is a wumpus\nstella = Bool(\"stella\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every rompus is orange\nsolver.add(Implies(rompus, orange))\n# Every rompus is an impus\nsolver.add(Implies(rompus, impus))\n# Vumpuses are happy\nsolver.add(Implies(vumpus, happy))\n# Every impus is spicy\nsolver.add(Implies(impus, spicy))\n# Every impus is a wumpus\nsolver.add(Implies(impus, wumpus))\n# Wumpuses are transparent\nsolver.add(Implies(wumpus, transparent))\n# Wumpuses are numpuses\nsolver.add(Implies(wumpus, numpus))\n# Every numpus is not kind\nsolver.add(Implies(numpus, Not(kind)))\n# Numpuses are tumpuses\nsolver.add(Implies(numpus, tumpus))\n# Each tumpus is not bright\nsolver.add(Implies(tumpus, Not(bright)))\n# Tumpuses are yumpuses\nsolver.add(Implies(tumpus, yumpus))\n# Every yumpus is not liquid\nsolver.add(Implies(yumpus, Not(liquid)))\n# Yumpuses are dumpuses\nsolver.add(Implies(yumpus, dumpus))\n# Each dumpus is not happy\nsolver.add(Implies(dumpus, Not(happy)))\n# Dumpuses are zumpuses\nsolver.add(Implies(dumpus, zumpus))\n# Every zumpus is earthy\nsolver.add(Implies(zumpus, earthy))\n# Each zumpus is a jompus\nsolver.add(Implies(zumpus, jompus))\n# Stella is a wumpus\nsolver.add(Implies(stella, wumpus))\n\n# Create facts in the problem\nsolver.add(stella)\n\n# Create statements to be checked\nsolver.add(stella, happy)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_7",
    "context": "Every rompus is orange. Every rompus is an impus. Vumpuses are happy. Every impus is spicy. Every impus is a wumpus. Wumpuses are transparent. Wumpuses are numpuses. Every numpus is not kind. Numpuses are tumpuses. Each tumpus is not bright. Tumpuses are yumpuses. Every yumpus is not liquid. Yumpuses are dumpuses. Each dumpus is not happy. Dumpuses are zumpuses. Every zumpus is earthy. Each zumpus is a jompus. Stella is a wumpus.",
    "question": "Is the following statement true or false? Stella is happy.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every rompus is orange\nrompus = Bool(\"rompus\")\n# Every rompus is an impus\nimpus = Bool(\"impus\")\n# Vumpuses are happy\nvumpus = Bool(\"vumpus\")\n# Every impus is spicy\nspicy = Bool(\"spicy\")\n# Every impus is a wumpus\nwumpus = Bool(\"wumpus\")\n# Wumpuses are transparent\ntransparent = Bool(\"transparent\")\n# Wumpuses are numpuses\nnumpus = Bool(\"numpus\")\n# Every numpus is not kind\nkind = Bool(\"kind\")\n# Numpuses are tumpuses\ntumpus = Bool(\"tumpus\")\n# Each tumpus is not bright\nbright = Bool(\"bright\")\n# Tumpuses are yumpuses\nyumpus = Bool(\"yumpus\")\n# Every yumpus is not liquid\nliquid = Bool(\"liquid\")\n# Yumpuses are dumpuses\ndumpus = Bool(\"dumpus\")\n# Each dumpus is not happy\nhappy = Bool(\"happy\")\n# Dumpuses are zumpuses\nzumpus = Bool(\"zumpus\")\n# Every zumpus is earthy\nearthy = Bool(\"earthy\")\n# Each zumpus is a jompus\njompus = Bool(\"jompus\")\n# Stella is a wumpus\nstella = Bool(\"stella\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every rompus is orange\nsolver.add(Implies(rompus, orange))\n# Every rompus is an impus\nsolver.add(Implies(rompus, impus))\n# Vumpuses are happy\nsolver.add(Implies(vumpus, happy))\n# Every impus is spicy\nsolver.add(Implies(impus, spicy))\n# Every impus is a wumpus\nsolver.add(",
    "answer": "B"
  },
  {
    "id": "ProntoQA_8",
    "context": "Every jompus is sour. Each jompus is a rompus. Rompuses are not kind. Every rompus is a zumpus. Every zumpus is feisty. Zumpuses are tumpuses. Tumpuses are small. Tumpuses are wumpuses. Wumpuses are opaque. Wumpuses are impuses. Every yumpus is hot. Impuses are brown. Impuses are dumpuses. Dumpuses are not hot. Every dumpus is a vumpus. Each vumpus is dull. Vumpuses are numpuses. Alex is a zumpus.",
    "question": "Is the following statement true or false? Alex is hot.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every jompus is sour\njompus = Bool(\"jompus\")\n# Each jompus is a rompus\nrompus = Bool(\"rompus\")\n# Rompuses are not kind\nkind = Bool(\"kind\")\n# Every rompus is a zumpus\nzumpus = Bool(\"zumpus\")\n# Every zumpus is feisty\nfeisty = Bool(\"feisty\")\n# Zumpuses are tumpuses\ntumpus = Bool(\"tumpus\")\n# Tumpuses are small\nsmall = Bool(\"small\")\n# Tumpuses are wumpuses\nwumpus = Bool(\"wumpus\")\n# Wumpuses are opaque\nopaque = Bool(\"opaque\")\n# Wumpuses are impuses\nimpus = Bool(\"impus\")\n# Every yumpus is hot\nyumpus = Bool(\"yumpus\")\n# Impuses are brown\nbrown = Bool(\"brown\")\n# Impuses are dumpuses\ndumpus = Bool(\"dumpus\")\n# Dumpuses are not hot\nhot = Bool(\"hot\")\n# Every dumpus is a vumpus\ndumpus = Bool(\"dumpus\")\n# Each vumpus is dull\nvumpus = Bool(\"vumpus\")\n# Vumpuses are numpuses\nnumpus = Bool(\"numpus\")\n# Alex is a zumpus\nalex = Bool(\"alex\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every jompus is sour\nsolver.add(Implies(jompus, sour))\n# Each jompus is a rompus\nsolver.add(Implies(jompus, rompus))\n# Rompuses are not kind\nsolver.add(Implies(rompus, Not(kind)))\n# Every rompus is a zumpus\nsolver.add(Implies(rompus, zumpus))\n# Every zumpus is feisty\nsolver.add(Implies(zumpus, feisty))\n# Zumpuses are tumpuses\nsolver.add(Implies(zumpus, tumpus))\n# Tumpuses are small\nsolver.add(Implies(tumpus, small))\n# Tumpuses are wumpuses\nsolver.add(Implies(tumpus, wumpus))\n# Wumpuses are opaque\nsolver.add(Implies(wumpus, opaque))\n# Wumpuses are impuses\nsolver.add(Implies(wumpus, impus))\n# Every yumpus is hot\nsolver.add(Implies(yumpus, hot))\n# Impuses are brown\nsolver.add(Implies(impus, brown))\n# Impuses are dumpuses\nsolver.add(Implies(impus, dumpus))\n# Dumpuses are not hot\nsolver.add(Implies(dumpus, Not(hot)))\n# Every dumpus is a vumpus\nsolver.add(Implies(dumpus, vumpus))\n# Each vumpus is dull\nsolver.add(Implies(vumpus, dull))\n# Vumpuses are numpuses\nsolver.add(Implies(vumpus, numpus))\n# Alex is a zumpus\nsolver.add(Implies(alex, zumpus))\n\n# Create facts in the problem\nsolver.add(alex)\n\n# Create statements to be checked\nsolver.add(alex, hot)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_8",
    "context": "Every jompus is sour. Each jompus is a rompus. Rompuses are not kind. Every rompus is a zumpus. Every zumpus is feisty. Zumpuses are tumpuses. Tumpuses are small. Tumpuses are wumpuses. Wumpuses are opaque. Wumpuses are impuses. Every yumpus is hot. Impuses are brown. Impuses are dumpuses. Dumpuses are not hot. Every dumpus is a vumpus. Each vumpus is dull. Vumpuses are numpuses. Alex is a zumpus.",
    "question": "Is the following statement true or false? Alex is hot.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every jompus is sour\njompus = Bool(\"jompus\")\n# Each jompus is a rompus\nrompus = Bool(\"rompus\")\n# Rompuses are not kind\nkind = Bool(\"kind\")\n# Every rompus is a zumpus\nzumpus = Bool(\"zumpus\")\n# Every zumpus is feisty\nfeisty = Bool(\"feisty\")\n# Zumpuses are tumpuses\ntumpus = Bool(\"tumpus\")\n# Tumpuses are small\nsmall = Bool(\"small\")\n# Tumpuses are wumpuses\nwumpus = Bool(\"wumpus\")\n# Wumpuses are opaque\nopaque = Bool(\"opaque\")\n# Wumpuses are impuses\nimpus = Bool(\"impus\")\n# Every yumpus is hot\nyumpus = Bool(\"yumpus\")\n# Impuses are brown\nbrown = Bool(\"brown\")\n# Impuses are dumpuses\ndumpus = Bool(\"dumpus\")\n# Dumpuses are not hot\nhot = Bool(\"hot\")\n# Every dumpus is a vumpus\ndumpus = Bool(\"dumpus\")\n# Each vumpus is dull\nvumpus = Bool(\"vumpus\")\n# Vumpuses are numpuses\nnumpus = Bool(\"numpus\")\n# Alex is a zumpus\nalex = Bool(\"alex\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every jompus is sour\nsolver.add(Implies(jompus, sour))\n# Each jompus is a rompus\nsolver.add(Implies(jompus, rompus))\n# Rompuses are not kind\nsolver.add(Implies(rompus, Not(kind)))\n# Every rompus is a zumpus\nsolver.add(Implies(rompus, zumpus))\n# Every zumpus is feisty\nsolver.add(Implies(zumpus, feisty))\n# Zumpuses are tumpuses\nsolver.add(Implies(zumpus, tumpus))\n# Tumpuses are small\nsolver.add(Implies(tumpus, small))\n# Tumpuses are wumpuses\nsolver.add(Implies(tumpus, wumpus))\n# Wumpuses are opaque\nsolver.add(Implies(wumpus, opaque))\n# Wumpuses are impuses\nsolver.add(Implies(wumpus, impus))\n# Every yumpus is hot\nsolver.add(Implies(yumpus, hot))\n# Impuses are brown\nsolver.add(Implies(impus, brown))\n# Impuses are dumpuses\nsolver.add(Implies(impus, dumpus))\n# Dumpuses are not hot\nsolver.add(Implies(dumpus, Not(hot)))\n# Every dumpus is a vumpus\nsolver.add(Implies(dumpus, vumpus))\n# Each vumpus is dull\nsolver.add(Implies(vumpus, dull))\n# Vumpuses are numpuses\nsolver.add(Implies(vumpus, numpus))\n# Alex is a zumpus\nsolver.add(Implies(alex, zumpus))\n\n# Create facts in the problem\nsolver.add(alex)\n\n# Create statements to be checked\nsolver.add(alex, hot)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_8",
    "context": "Every jompus is sour. Each jompus is a rompus. Rompuses are not kind. Every rompus is a zumpus. Every zumpus is feisty. Zumpuses are tumpuses. Tumpuses are small. Tumpuses are wumpuses. Wumpuses are opaque. Wumpuses are impuses. Every yumpus is hot. Impuses are brown. Impuses are dumpuses. Dumpuses are not hot. Every dumpus is a vumpus. Each vumpus is dull. Vumpuses are numpuses. Alex is a zumpus.",
    "question": "Is the following statement true or false? Alex is hot.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every jompus is sour\njompus = Bool(\"jompus\")\n# Each jompus is a rompus\nrompus = Bool(\"rompus\")\n# Rompuses are not kind\nrompus_kind = Bool(\"rompus_kind\")\n# Every rompus is a zumpus\nrompus_zumpus = Bool(\"rompus_zumpus\")\n# Every zumpus is feisty\nzumpus_feisty = Bool(\"zumpus_feisty\")\n# Zumpuses are tumpuses\nzumpus_tumpus = Bool(\"zumpus_tumpus\")\n# Tumpuses are small\ntumpus_small = Bool(\"tumpus_small\")\n# Tumpuses are wumpuses\ntumpus_wumpus = Bool(\"tumpus_wumpus\")\n# Wumpuses are opaque\nwumpus_opaque = Bool(\"wumpus_opaque\")\n# Wumpuses are impuses\nwumpus_impus = Bool(\"wumpus_impus\")\n# Every yumpus is hot\nyumpus_hot = Bool(\"yumpus_hot\")\n# Impuses are brown\nimpus_brown = Bool(\"impus_brown\")\n# Impuses are dumpuses\nimpus_dumpus = Bool(\"impus_dumpus\")\n# Dumpuses are not hot\ndumpus_hot = Bool(\"dumpus_hot\")\n# Every dumpus is a vumpus\ndumpus_vumpus = Bool(\"dumpus_vumpus\")\n# Each vumpus is dull\nvumpus_dull = Bool(\"vumpus_dull\")\n# Vumpuses are numpuses\nvumpus_numpus = Bool(\"vumpus_numpus\")\n# Alex is a zumpus\nalex_zumpus = Bool(\"alex_zumpus\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every jompus is sour\nsolver.add(Implies(jompus, sour))\n# Each jompus is a rompus\nsolver.add(Implies(jompus, rompus))\n# Rompuses are not kind\nsolver.add(Implies(rompus,",
    "answer": "B"
  },
  {
    "id": "ProntoQA_9",
    "context": "Every dumpus is not shy. Each dumpus is a tumpus. Rompuses are not wooden. Tumpuses are opaque. Every tumpus is a wumpus. Wumpuses are not floral. Each wumpus is an impus. Impuses are bitter. Every impus is a vumpus. Vumpuses are small. Each vumpus is a numpus. Every numpus is wooden. Each numpus is a yumpus. Each yumpus is orange. Each yumpus is a jompus. Each jompus is amenable. Every jompus is a zumpus. Wren is a tumpus.",
    "question": "Is the following statement true or false? Wren is wooden.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every dumpus is not shy\ndumpus = Bool(\"dumpus\")\nshy = Bool(\"shy\")\n# Each dumpus is a tumpus\ntumpus = Bool(\"tumpus\")\n# Rompuses are not wooden\nrompus = Bool(\"rompus\")\nwooden = Bool(\"wooden\")\n# Tumpuses are opaque\nopaque = Bool(\"opaque\")\n# Every tumpus is a wumpus\nwumpus = Bool(\"wumpus\")\n# Wumpuses are not floral\nfloral = Bool(\"floral\")\n# Each wumpus is an impus\nimpus = Bool(\"impus\")\n# Impuses are bitter\nbitter = Bool(\"bitter\")\n# Every impus is a vumpus\nvumpus = Bool(\"vumpus\")\n# Vumpuses are small\nsmall = Bool(\"small\")\n# Each vumpus is a numpus\nnumpus = Bool(\"numpus\")\n# Every numpus is wooden\nyumpus = Bool(\"yumpus\")\n# Each yumpus is orange\norange = Bool(\"orange\")\n# Each yumpus is a jompus\njompus = Bool(\"jompus\")\n# Each jompus is amenable\namenable = Bool(\"amenable\")\n# Every jompus is a zumpus\nzumpus = Bool(\"zumpus\")\n# Wren is a tumpus\nwren = Bool(\"wren\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every dumpus is not shy\nsolver.add(Implies(dumpus, Not(shy)))\n# Each dumpus is a tumpus\nsolver.add(Implies(dumpus, tumpus))\n# Rompuses are not wooden\nsolver.add(Implies(rompus, Not(wooden)))\n# Tumpuses are opaque\nsolver.add(Implies(tumpus, opaque))\n# Every tumpus is a wumpus\nsolver.add(Implies(tumpus, wumpus))\n# Wumpuses are not floral\nsolver.add(Implies(wumpus, Not(floral)))\n# Each wumpus is an impus\nsolver.add(Implies(wumpus, impus))\n# Impuses are bitter\nsolver.add(Implies(impus, bitter))\n# Every impus is a vumpus\nsolver.add(Implies(impus, vumpus))\n# Vumpuses are small\nsolver.add(Implies(vumpus, small))\n# Each vumpus is a numpus\nsolver.add(Implies(vumpus, numpus))\n# Every numpus is wooden\nsolver.add(Implies(numpus, wooden))\n# Each numpus is a yumpus\nsolver.add(Implies(numpus, yumpus))\n# Each yumpus is orange\nsolver.add(Implies(yumpus, orange))\n# Each yumpus is a jompus\nsolver.add(Implies(yumpus, jompus))\n# Each jompus is amenable\nsolver.add(Implies(jompus, amenable))\n# Every jompus is a zumpus\nsolver.add(Implies(jompus, zumpus))\n# Wren is a tumpus\nsolver.add(Implies(wren, tumpus))\n\n# Create facts in the problem\nsolver.add(wren)\n\n# Create statements to be checked\nsolver.add(wren, wooden)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_10",
    "context": "Every impus is earthy. Each impus is a jompus. Jompuses are small. Jompuses are rompuses. Rompuses are not amenable. Rompuses are wumpuses. Wumpuses are wooden. Wumpuses are zumpuses. Every zumpus is temperate. Every zumpus is a dumpus. Dumpuses are dull. Dumpuses are vumpuses. Every vumpus is not shy. Every yumpus is sweet. Vumpuses are numpuses. Numpuses are not sweet. Numpuses are tumpuses. Fae is a wumpus.",
    "question": "Is the following statement true or false? Fae is sweet.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every impus is earthy\nimpus = Bool(\"impus\")\n# Each impus is a jompus\njompus = Bool(\"jompus\")\n# Jompuses are small\nsmall = Bool(\"small\")\n# Jompuses are rompuses\nrompus = Bool(\"rompus\")\n# Rompuses are not amenable\namenable = Bool(\"amenable\")\n# Rompuses are wumpuses\nwumpus = Bool(\"wumpus\")\n# Wumpuses are wooden\nwooden = Bool(\"wooden\")\n# Wumpuses are zumpuses\nzumpus = Bool(\"zumpus\")\n# Every zumpus is temperate\ntemperate = Bool(\"temperate\")\n# Every zumpus is a dumpus\ndumpus = Bool(\"dumpus\")\n# Dumpuses are dull\ndull = Bool(\"dull\")\n# Dumpuses are vumpuses\nvumpus = Bool(\"vumpus\")\n# Every vumpus is not shy\nshy = Bool(\"shy\")\n# Every yumpus is sweet\nyumpus = Bool(\"yumpus\")\n# Vumpuses are numpuses\nnumpus = Bool(\"numpus\")\n# Numpuses are not sweet\nsweet = Bool(\"sweet\")\n# Numpuses are tumpuses\ntumpus = Bool(\"tumpus\")\n# Fae is a wumpus\nfae = Bool(\"fae\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every impus is earthy\nsolver.add(Implies(impus, earthy))\n# Each impus is a jompus\nsolver.add(Implies(impus, jompus))\n# Jompuses are small\nsolver.add(Implies(jompus, small))\n# Jompuses are rompuses\nsolver.add(Implies(jompus, rompus))\n# Rompuses are not amenable\nsolver.add(Implies(rompus, Not(amenable)))\n# Rompuses are wumpuses\nsolver.add(Implies(rompus, wumpus))\n# Wumpuses are wooden\nsolver.add(Implies(wumpus, wooden))\n# Wumpuses are zumpuses\nsolver.add(Implies(wumpus, zumpus))\n# Every zumpus is temperate\nsolver.add(Implies(zumpus, temperate))\n# Every zumpus is a dumpus\nsolver.add(Implies(zumpus, dumpus))\n# Dumpuses are dull\nsolver.add(Implies(dumpus, dull))\n# Dumpuses are vumpuses\nsolver.add(Implies(dumpus, vumpus))\n# Every vumpus is not shy\nsolver.add(Implies(vumpus, Not(shy)))\n# Every yumpus is sweet\nsolver.add(Implies(yumpus, sweet))\n# Vumpuses are numpuses\nsolver.add(Implies(vumpus, numpus))\n# Numpuses are not sweet\nsolver.add(Implies(numpus, Not(sweet)))\n# Numpuses are tumpuses\nsolver.add(Implies(numpus, tumpus))\n# Fae is a wumpus\nsolver.add(Implies(fae, wumpus))\n\n# Create facts in the problem\nsolver.add(fae)\n\n# Create statements to be checked\nsolver.add(fae, sweet)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_10",
    "context": "Every impus is earthy. Each impus is a jompus. Jompuses are small. Jompuses are rompuses. Rompuses are not amenable. Rompuses are wumpuses. Wumpuses are wooden. Wumpuses are zumpuses. Every zumpus is temperate. Every zumpus is a dumpus. Dumpuses are dull. Dumpuses are vumpuses. Every vumpus is not shy. Every yumpus is sweet. Vumpuses are numpuses. Numpuses are not sweet. Numpuses are tumpuses. Fae is a wumpus.",
    "question": "Is the following statement true or false? Fae is sweet.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every impus is earthy\nimpus = Bool(\"impus\")\n# Each impus is a jompus\njompus = Bool(\"jompus\")\n# Jompuses are small\nsmall = Bool(\"small\")\n# Jompuses are rompuses\nrompus = Bool(\"rompus\")\n# Rompuses are not amenable\namenable = Bool(\"amenable\")\n# Rompuses are wumpuses\nwumpus = Bool(\"wumpus\")\n# Wumpuses are wooden\nwooden = Bool(\"wooden\")\n# Wumpuses are zumpuses\nzumpus = Bool(\"zumpus\")\n# Every zumpus is temperate\ntemperate = Bool(\"temperate\")\n# Every zumpus is a dumpus\ndumpus = Bool(\"dumpus\")\n# Dumpuses are dull\ndull = Bool(\"dull\")\n# Dumpuses are vumpuses\nvumpus = Bool(\"vumpus\")\n# Every vumpus is not shy\nshy = Bool(\"shy\")\n# Every yumpus is sweet\nyumpus = Bool(\"yumpus\")\n# Vumpuses are numpuses\nnumpus = Bool(\"numpus\")\n# Numpuses are not sweet\nsweet = Bool(\"sweet\")\n# Numpuses are tumpuses\ntumpus = Bool(\"tumpus\")\n# Fae is a wumpus\nfae = Bool(\"fae\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every impus is earthy\nsolver.add(Implies(impus, earthy))\n# Each impus is a jompus\nsolver.add(Implies(impus, jompus))\n# Jompuses are small\nsolver.add(Implies(jompus, small))\n# Jompuses are rompuses\nsolver.add(Implies(jompus, rompus))\n# Rompuses are not amenable\nsolver.add(Implies(rompus, Not(amenable)))\n# Rompuses are wumpuses\nsolver.add(Implies(rompus, wumpus))\n# Wumpuses are wooden\nsolver.add(Implies(wumpus, wooden))\n# Wumpuses are zumpuses\nsolver.add(Implies(wumpus, zumpus))\n# Every zumpus is temperate\nsolver.add(Implies(zumpus, temperate))\n# Every zumpus is a dumpus\nsolver.add(Implies(zumpus, dumpus))\n# Dumpuses are dull\nsolver.add(Implies(dumpus, dull))\n# Dumpuses are vumpuses\nsolver.add(Implies(dumpus, vumpus))\n# Every vumpus is not shy\nsolver.add(Implies(vumpus, Not(shy)))\n# Every yumpus is sweet\nsolver.add(Implies(yumpus, sweet))\n# Vumpuses are numpuses\nsolver.add(Implies(vumpus, numpus))\n# Numpuses are not sweet\nsolver.add(Implies(numpus, Not(sweet)))\n# Numpuses are tumpuses\nsolver.add(Implies(numpus, tumpus))\n# Fae is a wumpus\nsolver.add(Implies(fae, wumpus))\n\n# Create facts in the problem\nsolver.add(fae)\n\n# Create statements to be checked\nsolver.add(fae, sweet)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_10",
    "context": "Every impus is earthy. Each impus is a jompus. Jompuses are small. Jompuses are rompuses. Rompuses are not amenable. Rompuses are wumpuses. Wumpuses are wooden. Wumpuses are zumpuses. Every zumpus is temperate. Every zumpus is a dumpus. Dumpuses are dull. Dumpuses are vumpuses. Every vumpus is not shy. Every yumpus is sweet. Vumpuses are numpuses. Numpuses are not sweet. Numpuses are tumpuses. Fae is a wumpus.",
    "question": "Is the following statement true or false? Fae is sweet.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every impus is earthy\nimpus = Bool(\"impus\")  # Sentence: Every impus is earthy\n# Each impus is a jompus\njompus = Bool(\"jompus\")  # Sentence: Each impus is a jompus\n# Jompuses are small\nsmall = Bool(\"small\")  # Sentence: Jompuses are small\n# Jompuses are rompuses\nrompus = Bool(\"rompus\")  # Sentence: Jompuses are rompuses\n# Rompuses are not amenable\namenable = Bool(\"amenable\")  # Sentence: Rompuses are not amenable\n# Rompuses are wumpuses\nwumpus = Bool(\"wumpus\")  # Sentence: Rompuses are wumpuses\n# Wumpuses are wooden\nwooden = Bool(\"wooden\")  # Sentence: Wumpuses are wooden\n# Wumpuses are zumpuses\nzumpus = Bool(\"zumpus\")  # Sentence: Wumpuses are zumpuses\n# Every zumpus is temperate\ntemperate = Bool(\"temperate\")  # Sentence: Every zumpus is temperate\n# Every zumpus is a dumpus\ndumpus = Bool(\"dumpus\")  # Sentence: Every zumpus is a dumpus\n# Dumpuses are dull\ndull = Bool(\"dull\")  # Sentence: Dumpuses are dull\n# Dumpuses are vumpuses\nvumpus = Bool(\"vumpus\")  # Sentence: Dumpuses are vumpuses\n# Every vumpus is not shy\nshy = Bool(\"shy\")  # Sentence: Every vumpus is not shy\n# Every yumpus is sweet\nyumpus = Bool(\"yumpus\")  #",
    "answer": "B"
  },
  {
    "id": "ProntoQA_1",
    "context": "Jompuses are not shy. Jompuses are yumpuses. Each yumpus is aggressive. Each yumpus is a dumpus. Dumpuses are not wooden. Dumpuses are wumpuses. Wumpuses are red. Every wumpus is an impus. Each impus is opaque. Impuses are tumpuses. Numpuses are sour. Tumpuses are not sour. Tumpuses are vumpuses. Vumpuses are earthy. Every vumpus is a zumpus. Zumpuses are small. Zumpuses are rompuses. Max is a yumpus.",
    "question": "Is the following statement true or false? Max is sour.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Jompuses are not shy\njompus = Bool(\"jompus\")\nshy = Bool(\"shy\")\n\n# Jompuses are yumpuses\n# Jompuses has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Each yumpus is aggressive\naggressive = Bool(\"aggressive\")\n# Each yumpus is a dumpus\ndumpus = Bool(\"dumpus\")\n\n# Dumpuses are not wooden\n# Dumpuses has been defined before\nwooden = Bool(\"wooden\")\n\n# Dumpuses are wumpuses\n# Dumpuses has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Wumpuses are red\n# Wumpuses has been defined before\nred = Bool(\"red\")\n\n# Every wumpus is an impus\n# Wumpuses has been defined before\nimpus = Bool(\"impus\")\n\n# Each impus is opaque\nopaque = Bool(\"opaque\")\n\n# Impuses are tumpuses\n# Impuses has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Numpuses are sour\nnumpus = Bool(\"numpus\")\nsour = Bool(\"sour\")\n\n# Tumpuses are not sour\n# Tumpuses has been defined before\nvumpus = Bool(\"vumpus\")\n\n# Tumpuses are vumpuses\n# Tumpuses has been defined before\nearthy = Bool(\"earthy\")\n\n# Every vumpus is a zumpus\n# Vumpuses has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Zumpuses are small\n# Zumpuses has been defined before\nsmall = Bool(\"small\")\n\n# Zumpuses are rompuses\n# Zumpuses has been defined before\nrompus = Bool(\"rompus\")\n\n# Max is a yumpus\nmax = Bool(\"max\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Jompuses are not shy\nsolver.add(Implies(jompus, Not(shy)))\n\n# Jompuses are yumpuses\nsolver.add(Implies(jompus, yumpus))\n\n# Each yumpus is aggressive\nsolver.add(Implies(yumpus, aggressive))\n\n# Each yumpus is a dumpus\nsolver.add(Implies(yumpus, dumpus))\n\n# Dumpuses are not wooden\nsolver.add(Implies(dumpus, Not(wooden)))\n\n# Dumpuses are wumpuses\nsolver.add(Implies(dumpus, wumpus))\n\n# Wumpuses are red\nsolver.add(Implies(wumpus, red))\n\n# Every wumpus is an impus\nsolver.add(Implies(wumpus, impus))\n\n# Each impus is opaque\nsolver.add(Implies(impus, opaque))\n\n# Impuses are tumpuses\nsolver.add(Implies(impus, tumpus))\n\n# Numpuses are sour\nsolver.add(Implies(numpus, sour))\n\n# Tumpuses are not sour\nsolver.add(Implies(tumpus, Not(sour)))\n\n# Tumpuses are vumpuses\nsolver.add(Implies(tumpus, vumpus))\n\n# Vumpuses are earthy\nsolver.add(Implies(vumpus, earthy))\n\n# Every vumpus is a zumpus\nsolver.add(Implies(vumpus, zumpus))\n\n# Zumpuses are small\nsolver.add(Implies(zumpus, small))\n\n# Zumpuses are rompuses\nsolver.add(Implies(zumpus, rompus))\n\n# Max is a yumpus\nsolver.add(Implies(max, yumpus))\n\n# Create facts in the problem\nsolver.add(max)\n\n# Create statements to be checked\nsolver.add(max, sour)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_2",
    "context": "Every tumpus is not angry. Tumpuses are rompuses. Every numpus is not bright. Rompuses are not luminous. Rompuses are yumpuses. Yumpuses are transparent. Yumpuses are zumpuses. Each zumpus is not bitter. Zumpuses are impuses. Impuses are red. Each impus is a dumpus. Every dumpus is happy. Each dumpus is a vumpus. Vumpuses are bright. Every vumpus is a jompus. Jompuses are large. Each jompus is a wumpus. Stella is a yumpus.",
    "question": "Is the following statement true or false? Stella is bright.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every tumpus is not angry\ntumpus = Bool(\"tumpus\")\nangry = Bool(\"angry\")\n\n# Tumpuses are rompuses\n# Tumpuses has been defined before\nrompus = Bool(\"rompus\")\n\n# Every numpus is not bright\nnumpus = Bool(\"numpus\")\nbright = Bool(\"bright\")\n\n# Rompuses are not luminous\n# Rompuses has been defined before\nluminous = Bool(\"luminous\")\n\n# Rompuses are yumpuses\n# Rompuses has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Yumpuses are transparent\n# Yumpuses has been defined before\ntransparent = Bool(\"transparent\")\n\n# Yumpuses are zumpuses\n# Yumpuses has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Each zumpus is not bitter\nbitter = Bool(\"bitter\")\n\n# Zumpuses are impuses\n# Zumpuses has been defined before\nimpus = Bool(\"impus\")\n\n# Impuses are red\n# Impuses has been defined before\nred = Bool(\"red\")\n\n# Each impus is a dumpus\ndumpus = Bool(\"dumpus\")\n\n# Every dumpus is happy\n# Dumpus has been defined before\nhappy = Bool(\"happy\")\n\n# Each dumpus is a vumpus\nvumpus = Bool(\"vumpus\")\n\n# Vumpuses are bright\n# Vumpuses has been defined before\nbright = Bool(\"bright\")\n\n# Every vumpus is a jompus\n# Vumpuses has been defined before\njompus = Bool(\"jompus\")\n\n# Each jompus is a wumpus\nwumpus = Bool(\"wumpus\")\n\n# Stella is a yumpus\nstella = Bool(\"stella\")\n# Yumpuses has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every tumpus is not angry\nsolver.add(Implies(tumpus, Not(angry)))\n\n# Tumpuses are rompuses\nsolver.add(Implies(tumpus, rompus))\n\n# Every numpus is not bright\nsolver.add(Implies(numpus, Not(bright)))\n\n# Rompuses are not luminous\nsolver.add(Implies(rompus, Not(luminous)))\n\n# Rompuses are yumpuses\nsolver.add(Implies(rompus, yumpus))\n\n# Yumpuses are transparent\nsolver.add(Implies(yumpus, transparent))\n\n# Yumpuses are zumpuses\nsolver.add(Implies(yumpus, zumpus))\n\n# Each zumpus is not bitter\nsolver.add(Implies(zumpus, Not(bitter)))\n\n# Zumpuses are impuses\nsolver.add(Implies(zumpus, impus))\n\n# Impuses are red\nsolver.add(Implies(impus, red))\n\n# Each impus is a dumpus\nsolver.add(Implies(impus, dumpus))\n\n# Every dumpus is happy\nsolver.add(Implies(dumpus, happy))\n\n# Each dumpus is a vumpus\nsolver.add(Implies(dumpus, vumpus))\n\n# Vumpuses are bright\nsolver.add(Implies(vumpus, bright))\n\n# Every vumpus is a jompus\nsolver.add(Implies(vumpus, jompus))\n\n# Each jompus is a wumpus\nsolver.add(Implies(jompus, wumpus))\n\n# Stella is a yumpus\nsolver.add(Implies(stella, yumpus))\n\n# Create facts in the problem\nsolver.add(stella)\n\n# Create statements to be checked\nsolver.add(stella, bright)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_3",
    "context": "Vumpuses are floral. Vumpuses are tumpuses. Tumpuses are brown. Each tumpus is a wumpus. Wumpuses are small. Each wumpus is a rompus. Each zumpus is metallic. Every rompus is happy. Rompuses are impuses. Each impus is amenable. Each impus is a dumpus. Every dumpus is not metallic. Dumpuses are numpuses. Each numpus is bitter. Each numpus is a jompus. Every jompus is cold. Each jompus is a yumpus. Wren is a tumpus.",
    "question": "Is the following statement true or false? Wren is not metallic.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Vumpuses are floral\nvumpus = Bool(\"vumpus\")\nfloral = Bool(\"floral\")\n\n# Vumpuses are tumpuses\n# Vumpuses has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Tumpuses are brown\n# Tumpuses has been defined before\nbrown = Bool(\"brown\")\n\n# Each tumpus is a wumpus\n# Tumpuses has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Wumpuses are small\n# Wumpuses has been defined before\nsmall = Bool(\"small\")\n\n# Each wumpus is a rompus\n# Wumpuses has been defined before\nrompus = Bool(\"rompus\")\n\n# Each zumpus is metallic\nzumpus = Bool(\"zumpus\")\nmetallic = Bool(\"metallic\")\n\n# Every rompus is happy\nrompus = Bool(\"rompus\")\nhappy = Bool(\"happy\")\n\n# Rompuses are impuses\n# Rompuses has been defined before\nimpus = Bool(\"impus\")\n\n# Each impus is amenable\n# Impus has been defined before\namenable = Bool(\"amenable\")\n\n# Each impus is a dumpus\n# Impus has been defined before\ndumpus = Bool(\"dumpus\")\n\n# Every dumpus is not metallic\n# Dumpuses has been defined before\nmetallic = Bool(\"metallic\")\n\n# Dumpuses are numpuses\n# Dumpuses has been defined before\nnumpus = Bool(\"numpus\")\n\n# Each numpus is bitter\n# Numpus has been defined before\nbitter = Bool(\"bitter\")\n\n# Each numpus is a jompus\n# Numpus has been defined before\njompus = Bool(\"jompus\")\n\n# Every jompus is cold\n# Jompus has been defined before\ncold = Bool(\"cold\")\n\n# Each jompus is a yumpus\n# Jompus has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Wren is a tumpus\nwren = Bool(\"wren\")\n# Tumpuses has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Vumpuses are floral\nsolver.add(Implies(vumpus, floral))\n# Vumpuses are tumpuses\nsolver.add(Implies(vumpus, tumpus))\n# Tumpuses are brown\nsolver.add(Implies(tumpus, brown))\n# Each tumpus is a wumpus\nsolver.add(Implies(tumpus, wumpus))\n# Wumpuses are small\nsolver.add(Implies(wumpus, small))\n# Each wumpus is a rompus\nsolver.add(Implies(wumpus, rompus))\n# Each zumpus is metallic\nsolver.add(Implies(zumpus, metallic))\n# Every rompus is happy\nsolver.add(Implies(rompus, happy))\n# Rompuses are impuses\nsolver.add(Implies(rompus, impus))\n# Each impus is amenable\nsolver.add(Implies(impus, amenable))\n# Each impus is a dumpus\nsolver.add(Implies(impus, dumpus))\n# Every dumpus is not metallic\nsolver.add(Implies(dumpus, Not(metallic)))\n# Dumpuses are numpuses\nsolver.add(Implies(dumpus, numpus))\n# Each numpus is bitter\nsolver.add(Implies(numpus, bitter))\n# Each numpus is a jompus\nsolver.add(Implies(numpus, jompus))\n# Every jompus is cold\nsolver.add(Implies(jompus, cold))\n# Each jompus is a yumpus\nsolver.add(Implies(jompus, yumpus))\n\n# Create facts in the problem\nsolver.add(wren)\n\n# Create statements to be checked\nsolver.add(wren, Not(metallic))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_4",
    "context": "Rompuses are spicy. Every rompus is an impus. Yumpuses are not small. Impuses are orange. Impuses are zumpuses. Zumpuses are not hot. Zumpuses are numpuses. Numpuses are metallic. Numpuses are wumpuses. Every wumpus is not kind. Each wumpus is a dumpus. Each dumpus is not bright. Every dumpus is a jompus. Jompuses are small. Jompuses are vumpuses. Each vumpus is not shy. Every vumpus is a tumpus. Alex is a zumpus.",
    "question": "Is the following statement true or false? Alex is not small.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Rompuses are spicy\nrompus = Bool(\"rompus\")\nspicy = Bool(\"spicy\")\n\n# Every rompus is an impus\nrompus = Bool(\"rompus\")\nimpus = Bool(\"impus\")\n\n# Yumpuses are not small\nyumpus = Bool(\"yumpus\")\nsmall = Bool(\"small\")\n\n# Impuses are orange\nimpus = Bool(\"impus\")\norange = Bool(\"orange\")\n\n# Impuses are zumpuses\nimpus = Bool(\"impus\")\nzumpus = Bool(\"zumpus\")\n\n# Zumpuses are not hot\nzumpus = Bool(\"zumpus\")\nhot = Bool(\"hot\")\n\n# Zumpuses are numpuses\nzumpus = Bool(\"zumpus\")\nnumpus = Bool(\"numpus\")\n\n# Numpuses are metallic\nnumpus = Bool(\"numpus\")\nmetallic = Bool(\"metallic\")\n\n# Numpuses are wumpuses\nnumpus = Bool(\"numpus\")\nwumpus = Bool(\"wumpus\")\n\n# Every wumpus is not kind\nwumpus = Bool(\"wumpus\")\nkind = Bool(\"kind\")\n\n# Each wumpus is a dumpus\nwumpus = Bool(\"wumpus\")\ndumpus = Bool(\"dumpus\")\n\n# Each dumpus is not bright\ndumpus = Bool(\"dumpus\")\nbright = Bool(\"bright\")\n\n# Every dumpus is a jompus\ndumpus = Bool(\"dumpus\")\njompus = Bool(\"jompus\")\n\n# Jompuses are small\njompus = Bool(\"jompus\")\nsmall = Bool(\"small\")\n\n# Jompuses are vumpuses\njompus = Bool(\"jompus\")\nvumpus = Bool(\"vumpus\")\n\n# Each vumpus is not shy\nvumpus = Bool(\"vumpus\")\nshy = Bool(\"shy\")\n\n# Every vumpus is a tumpus\nvumpus = Bool(\"vumpus\")\ntumpus = Bool(\"tumpus\")\n\n# Alex is a zumpus\nalex = Bool(\"alex\")\nzumpus = Bool(\"zumpus\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Rompuses are spicy\nsolver.add(Implies(rompus, spicy))\n\n# Every rompus is an impus\nsolver.add(Implies(rompus, impus))\n\n# Yumpuses are not small\nsolver.add(Implies(yumpus, Not(small)))\n\n# Impuses are orange\nsolver.add(Implies(impus, orange))\n\n# Impuses are zumpuses\nsolver.add(Implies(impus, zumpus))\n\n# Zumpuses are not hot\nsolver.add(Implies(zumpus, Not(hot)))\n\n# Zumpuses are numpuses\nsolver.add(Implies(zumpus, numpus))\n\n# Numpuses are metallic\nsolver.add(Implies(numpus, metallic))\n\n# Numpuses are wumpuses\nsolver.add(Implies(numpus, wumpus))\n\n# Every wumpus is not kind\nsolver.add(Implies(wumpus, Not(kind)))\n\n# Each wumpus is a dumpus\nsolver.add(Implies(wumpus, dumpus))\n\n# Each dumpus is not bright\nsolver.add(Implies(dumpus, Not(bright)))\n\n# Every dumpus is a jompus\nsolver.add(Implies(dumpus, jompus))\n\n# Jompuses are small\nsolver.add(Implies(jompus, small))\n\n# Jompuses are vumpuses\nsolver.add(Implies(jompus, vumpus))\n\n# Each vumpus is not shy\nsolver.add(Implies(vumpus, Not(shy)))\n\n# Every vumpus is a tumpus\nsolver.add(Implies(vumpus, tumpus))\n\n# Alex is a zumpus\nsolver.add(Implies(alex, zumpus))\n\n# Create facts in the problem\nsolver.add(alex)\n\n# Create statements to be checked\nsolver.add(alex, Not(small))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_5",
    "context": "Rompuses are mean. Rompuses are zumpuses. Each zumpus is not happy. Each zumpus is a numpus. Each numpus is not temperate. Each numpus is a tumpus. Tumpuses are not large. Tumpuses are yumpuses. Every yumpus is earthy. Each yumpus is a jompus. Jompuses are blue. Every jompus is a wumpus. Wumpuses are not dull. Wumpuses are impuses. Each vumpus is dull. Impuses are sour. Impuses are dumpuses. Alex is a numpus.",
    "question": "Is the following statement true or false? Alex is not dull.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Rompuses are mean\nrompus = Bool(\"rompus\")\nmean = Bool(\"mean\")\n\n# Rompuses are zumpuses\n# Rompuses has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Each zumpus is not happy\n# Each zumpus is a numpus\n# Each numpus is not temperate\n# Each numpus is a tumpus\n# Tumpuses are not large\n# Tumpuses are yumpuses\n# Every yumpus is earthy\n# Each yumpus is a jompus\n# Jompuses are blue\n# Every jompus is a wumpus\n# Wumpuses are not dull\n# Wumpuses are impuses\n# Each vumpus is dull\n# Impuses are sour\n# Impuses are dumpuses\n# Alex is a numpus\nrompus = Bool(\"rompus\")\nmean = Bool(\"mean\")\nzumpus = Bool(\"zumpus\")\nhappy = Bool(\"happy\")\nnumpus = Bool(\"numpus\")\ntemperate = Bool(\"temperate\")\ntumpus = Bool(\"tumpus\")\nlarge = Bool(\"large\")\nyumpus = Bool(\"yumpus\")\nearthy = Bool(\"earthy\")\njompus = Bool(\"jompus\")\nblue = Bool(\"blue\")\nwumpus = Bool(\"wumpus\")\ndull = Bool(\"dull\")\nimpus = Bool(\"impus\")\nvumpus = Bool(\"vumpus\")\nsour = Bool(\"sour\")\ndumpus = Bool(\"dumpus\")\nalex = Bool(\"alex\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Rompuses are mean\nsolver.add(Implies(rompus, mean))\n# Rompuses are zumpuses\nsolver.add(Implies(rompus, zumpus))\n# Each zumpus is not happy\nsolver.add(Implies(zumpus, Not(happy)))\n# Each zumpus is a numpus\nsolver.add(Implies(zumpus, numpus))\n# Each numpus is not temperate\nsolver.add(Implies(numpus, Not(temperate)))\n# Each numpus is a tumpus\nsolver.add(Implies(numpus, tumpus))\n# Tumpuses are not large\nsolver.add(Implies(tumpus, Not(large)))\n# Tumpuses are yumpuses\nsolver.add(Implies(tumpus, yumpus))\n# Every yumpus is earthy\nsolver.add(Implies(yumpus, earthy))\n# Each yumpus is a jompus\nsolver.add(Implies(yumpus, jompus))\n# Jompuses are blue\nsolver.add(Implies(jompus, blue))\n# Every jompus is a wumpus\nsolver.add(Implies(jompus, wumpus))\n# Wumpuses are not dull\nsolver.add(Implies(wumpus, Not(dull)))\n# Wumpuses are impuses\nsolver.add(Implies(wumpus, impus))\n# Each vumpus is dull\nsolver.add(Implies(vumpus, dull))\n# Impuses are sour\nsolver.add(Implies(impus, sour))\n# Impuses are dumpuses\nsolver.add(Implies(impus, dumpus))\n# Alex is a numpus\nsolver.add(Implies(alex, numpus))\n\n# Create facts in the problem\nsolver.add(alex)\n\n# Create statements to be checked\nsolver.add(alex, Not(dull))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_6",
    "context": "Every tumpus is large. Tumpuses are wumpuses. Each wumpus is not opaque. Every dumpus is not dull. Every wumpus is a rompus. Every rompus is brown. Each rompus is a vumpus. Each vumpus is temperate. Vumpuses are jompuses. Jompuses are dull. Jompuses are numpuses. Every numpus is liquid. Each numpus is an impus. Impuses are spicy. Every impus is a yumpus. Every yumpus is not nervous. Every yumpus is a zumpus. Wren is a tumpus.",
    "question": "Is the following statement true or false? Wren is dull.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every tumpus is large\ntumpus = Bool(\"tumpus\")\nlarge = Bool(\"large\")\n\n# Tumpuses are wumpuses\n# tumpus has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Each wumpus is not opaque\n# wumpus has been defined before\nopaque = Bool(\"opaque\")\n\n# Every dumpus is not dull\ndumpus = Bool(\"dumpus\")\ndull = Bool(\"dull\")\n\n# Every wumpus is a rompus\n# wumpus has been defined before\nrompus = Bool(\"rompus\")\n\n# Every rompus is brown\n# rompus has been defined before\nbrown = Bool(\"brown\")\n\n# Each rompus is a vumpus\n# rompus has been defined before\nvumpus = Bool(\"vumpus\")\n\n# Each vumpus is temperate\n# vumpus has been defined before\ntemperate = Bool(\"temperate\")\n\n# Vumpuses are jompuses\n# vumpus has been defined before\njompus = Bool(\"jompus\")\n\n# Jompuses are dull\n# jompus has been defined before\ndull2 = Bool(\"dull2\")\n\n# Jompuses are numpuses\n# jompus has been defined before\nnumpus = Bool(\"numpus\")\n\n# Every numpus is liquid\n# numpus has been defined before\nliquid = Bool(\"liquid\")\n\n# Each numpus is an impus\n# numpus has been defined before\nimpus = Bool(\"impus\")\n\n# Impuses are spicy\n# impus has been defined before\nspicy = Bool(\"spicy\")\n\n# Every impus is a yumpus\n# impus has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Every yumpus is not nervous\n# yumpus has been defined before\nnervous = Bool(\"nervous\")\n\n# Every yumpus is a zumpus\n# yumpus has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Wren is a tumpus\nwren = Bool(\"wren\")\n# Tumpus has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every tumpus is large\nsolver.add(Implies(tumpus, large))\n\n# Tumpuses are wumpuses\nsolver.add(Implies(tumpus, wumpus))\n\n# Each wumpus is not opaque\nsolver.add(Implies(wumpus, Not(opaque)))\n\n# Every dumpus is not dull\nsolver.add(Implies(dumpus, Not(dull)))\n\n# Every wumpus is a rompus\nsolver.add(Implies(wumpus, rompus))\n\n# Every rompus is brown\nsolver.add(Implies(rompus, brown))\n\n# Each rompus is a vumpus\nsolver.add(Implies(rompus, vumpus))\n\n# Each vumpus is temperate\nsolver.add(Implies(vumpus, temperate))\n\n# Vumpuses are jompuses\nsolver.add(Implies(vumpus, jompus))\n\n# Jompuses are dull\nsolver.add(Implies(jompus, dull2))\n\n# Jompuses are numpuses\nsolver.add(Implies(jompus, numpus))\n\n# Every numpus is liquid\nsolver.add(Implies(numpus, liquid))\n\n# Each numpus is an impus\nsolver.add(Implies(numpus, impus))\n\n# Impuses are spicy\nsolver.add(Implies(impus, spicy))\n\n# Every impus is a yumpus\nsolver.add(Implies(impus, yumpus))\n\n# Every yumpus is not nervous\nsolver.add(Implies(yumpus, Not(nervous)))\n\n# Every yumpus is a zumpus\nsolver.add(Implies(yumpus, zumpus))\n\n# Wren is a tumpus\nsolver.add(Implies(wren, tumpus))\n\n# Create facts in the problem\nsolver.add(wren)\n\n# Create statements to be checked\nsolver.add(wren, dull)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_7",
    "context": "Every rompus is orange. Every rompus is an impus. Vumpuses are happy. Every impus is spicy. Every impus is a wumpus. Wumpuses are transparent. Wumpuses are numpuses. Every numpus is not kind. Numpuses are tumpuses. Each tumpus is not bright. Tumpuses are yumpuses. Every yumpus is not liquid. Yumpuses are dumpuses. Each dumpus is not happy. Dumpuses are zumpuses. Every zumpus is earthy. Each zumpus is a jompus. Stella is a wumpus.",
    "question": "Is the following statement true or false? Stella is happy.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every rompus is orange\nrompus = Bool(\"rompus\")\norange = Bool(\"orange\")\n\n# Every rompus is an impus\n# rompus has been defined before\nimpus = Bool(\"impus\")\n\n# Vumpuses are happy\nvumpus = Bool(\"vumpus\")\nhappy = Bool(\"happy\")\n\n# Every impus is spicy\nimpus = Bool(\"impus\")\nspicy = Bool(\"spicy\")\n\n# Every impus is a wumpus\n# impus has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Wumpuses are transparent\nwumpus = Bool(\"wumpus\")\ntransparent = Bool(\"transparent\")\n\n# Wumpuses are numpuses\n# wumpus has been defined before\nnumpus = Bool(\"numpus\")\n\n# Every numpus is not kind\nnumpus = Bool(\"numpus\")\nkind = Bool(\"kind\")\n\n# Numpuses are tumpuses\n# numpus has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Each tumpus is not bright\ntumpus = Bool(\"tumpus\")\nbright = Bool(\"bright\")\n\n# Tumpuses are yumpuses\n# tumpus has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Every yumpus is not liquid\nyumpus = Bool(\"yumpus\")\nliquid = Bool(\"liquid\")\n\n# Yumpuses are dumpuses\n# yumpus has been defined before\ndumpus = Bool(\"dumpus\")\n\n# Each dumpus is not happy\ndumpus = Bool(\"dumpus\")\nhappy = Bool(\"happy\")\n\n# Dumpuses are zumpuses\n# dumpus has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Every zumpus is earthy\nzumpus = Bool(\"zumpus\")\nearthy = Bool(\"earthy\")\n\n# Each zumpus is a jompus\n# zumpus has been defined before\njompus = Bool(\"jompus\")\n\n# Stella is a wumpus\nstella = Bool(\"stella\")\n# Wumpuses has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every rompus is orange\nsolver.add(Implies(rompus, orange))\n\n# Every rompus is an impus\nsolver.add(Implies(rompus, impus))\n\n# Vumpuses are happy\nsolver.add(Implies(vumpus, happy))\n\n# Every impus is spicy\nsolver.add(Implies(impus, spicy))\n\n# Every impus is a wumpus\nsolver.add(Implies(impus, wumpus))\n\n# Wumpuses are transparent\nsolver.add(Implies(wumpus, transparent))\n\n# Wumpuses are numpuses\nsolver.add(Implies(wumpus, numpus))\n\n# Every numpus is not kind\nsolver.add(Implies(numpus, Not(kind)))\n\n# Numpuses are tumpuses\nsolver.add(Implies(numpus, tumpus))\n\n# Each tumpus is not bright\nsolver.add(Implies(tumpus, Not(bright)))\n\n# Tumpuses are yumpuses\nsolver.add(Implies(tumpus, yumpus))\n\n# Every yumpus is not liquid\nsolver.add(Implies(yumpus, Not(liquid)))\n\n# Yumpuses are dumpuses\nsolver.add(Implies(yumpus, dumpus))\n\n# Each dumpus is not happy\nsolver.add(Implies(dumpus, Not(happy)))\n\n# Dumpuses are zumpuses\nsolver.add(Implies(dumpus, zumpus))\n\n# Every zumpus is earthy\nsolver.add(Implies(zumpus, earthy))\n\n# Each zumpus is a jompus\nsolver.add(Implies(zumpus, jompus))\n\n# Stella is a wumpus\nsolver.add(Implies(stella, wumpus))\n\n# Create facts in the problem\nsolver.add(stella)\n\n# Create statements to be checked\nsolver.add(stella, happy)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_8",
    "context": "Every jompus is sour. Each jompus is a rompus. Rompuses are not kind. Every rompus is a zumpus. Every zumpus is feisty. Zumpuses are tumpuses. Tumpuses are small. Tumpuses are wumpuses. Wumpuses are opaque. Wumpuses are impuses. Every yumpus is hot. Impuses are brown. Impuses are dumpuses. Dumpuses are not hot. Every dumpus is a vumpus. Each vumpus is dull. Vumpuses are numpuses. Alex is a zumpus.",
    "question": "Is the following statement true or false? Alex is hot.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every jompus is sour\njompus = Bool(\"jompus\")\nsour = Bool(\"sour\")\n\n# Each jompus is a rompus\n# jompus has been defined before\nrompus = Bool(\"rompus\")\n\n# Rompuses are not kind\n# rompus has been defined before\nkind = Bool(\"kind\")\n\n# Every rompus is a zumpus\nrompus = Bool(\"rompus\")\nzumpus = Bool(\"zumpus\")\n\n# Every zumpus is feisty\nzumpus = Bool(\"zumpus\")\nfeisty = Bool(\"feisty\")\n\n# Zumpuses are tumpuses\n# zumpus has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Tumpuses are small\ntumpus = Bool(\"tumpus\")\nsmall = Bool(\"small\")\n\n# Tumpuses are wumpuses\n# tumpus has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Wumpuses are opaque\nwumpus = Bool(\"wumpus\")\nopaque = Bool(\"opaque\")\n\n# Wumpuses are impuses\n# wumpus has been defined before\nimpus = Bool(\"impus\")\n\n# Every yumpus is hot\nyumpus = Bool(\"yumpus\")\nhot = Bool(\"hot\")\n\n# Impuses are brown\nimpus = Bool(\"impus\")\nbrown = Bool(\"brown\")\n\n# Impuses are dumpuses\n# impus has been defined before\ndumpus = Bool(\"dumpus\")\n\n# Dumpuses are not hot\ndumpus = Bool(\"dumpus\")\nhot = Bool(\"hot\")\n\n# Every dumpus is a vumpus\ndumpus = Bool(\"dumpus\")\nvumpus = Bool(\"vumpus\")\n\n# Each vumpus is dull\nvumpus = Bool(\"vumpus\")\ndull = Bool(\"dull\")\n\n# Vumpuses are numpuses\nvumpus = Bool(\"vumpus\")\nnumpus = Bool(\"numpus\")\n\n# Alex is a zumpus\nalex = Bool(\"alex\")\n# Zumpuses has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every jompus is sour\nsolver.add(Implies(jompus, sour))\n\n# Each jompus is a rompus\nsolver.add(Implies(jompus, rompus))\n\n# Rompuses are not kind\nsolver.add(Implies(rompus, Not(kind)))\n\n# Every rompus is a zumpus\nsolver.add(Implies(rompus, zumpus))\n\n# Every zumpus is feisty\nsolver.add(Implies(zumpus, feisty))\n\n# Zumpuses are tumpuses\nsolver.add(Implies(zumpus, tumpus))\n\n# Tumpuses are small\nsolver.add(Implies(tumpus, small))\n\n# Tumpuses are wumpuses\nsolver.add(Implies(tumpus, wumpus))\n\n# Wumpuses are opaque\nsolver.add(Implies(wumpus, opaque))\n\n# Wumpuses are impuses\nsolver.add(Implies(wumpus, impus))\n\n# Every yumpus is hot\nsolver.add(Implies(yumpus, hot))\n\n# Impuses are brown\nsolver.add(Implies(impus, brown))\n\n# Impuses are dumpuses\nsolver.add(Implies(impus, dumpus))\n\n# Dumpuses are not hot\nsolver.add(Implies(dumpus, Not(hot)))\n\n# Every dumpus is a vumpus\nsolver.add(Implies(dumpus, vumpus))\n\n# Each vumpus is dull\nsolver.add(Implies(vumpus, dull))\n\n# Vumpuses are numpuses\nsolver.add(Implies(vumpus, numpus))\n\n# Alex is a zumpus\nsolver.add(Implies(alex, zumpus))\n\n# Create facts in the problem\nsolver.add(alex)\n\n# Create statements to be checked\nsolver.add(alex, hot)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_9",
    "context": "Every dumpus is not shy. Each dumpus is a tumpus. Rompuses are not wooden. Tumpuses are opaque. Every tumpus is a wumpus. Wumpuses are not floral. Each wumpus is an impus. Impuses are bitter. Every impus is a vumpus. Vumpuses are small. Each vumpus is a numpus. Every numpus is wooden. Each numpus is a yumpus. Each yumpus is orange. Each yumpus is a jompus. Each jompus is amenable. Every jompus is a zumpus. Wren is a tumpus.",
    "question": "Is the following statement true or false? Wren is wooden.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every dumpus is not shy\ndumpus = Bool(\"dumpus\")\nshy = Bool(\"shy\")\n\n# Each dumpus is a tumpus\n# dumpus has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Rompuses are not wooden\nrompus = Bool(\"rompus\")\nwooden = Bool(\"wooden\")\n\n# Tumpuses are opaque\n# Tumpuses has been defined before\nopaque = Bool(\"opaque\")\n\n# Every tumpus is a wumpus\ntumpus = Bool(\"tumpus\")\nwumpus = Bool(\"wumpus\")\n\n# Wumpuses are not floral\n# Wumpuses has been defined before\nfloral = Bool(\"floral\")\n\n# Each wumpus is an impus\n# wumpus has been defined before\nimpus = Bool(\"impus\")\n\n# Impuses are bitter\n# Impuses has been defined before\nbitter = Bool(\"bitter\")\n\n# Every impus is a vumpus\nimpus = Bool(\"impus\")\nvumpus = Bool(\"vumpus\")\n\n# Vumpuses are small\n# Vumpuses has been defined before\nsmall = Bool(\"small\")\n\n# Each vumpus is a numpus\n# vumpus has been defined before\nnumpus = Bool(\"numpus\")\n\n# Every numpus is wooden\n# numpus has been defined before\nwooden = Bool(\"wooden\")\n\n# Each numpus is a yumpus\n# numpus has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Each yumpus is orange\n# yumpus has been defined before\norange = Bool(\"orange\")\n\n# Each yumpus is a jompus\n# yumpus has been defined before\njompus = Bool(\"jompus\")\n\n# Each jompus is amenable\n# jompus has been defined before\namenable = Bool(\"amenable\")\n\n# Every jompus is a zumpus\n# jompus has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Wren is a tumpus\nwren = Bool(\"wren\")\n# Tumpuses has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every dumpus is not shy\nsolver.add(Implies(dumpus, Not(shy)))\n\n# Each dumpus is a tumpus\nsolver.add(Implies(dumpus, tumpus))\n\n# Rompuses are not wooden\nsolver.add(Implies(rompus, Not(wooden)))\n\n# Tumpuses are opaque\nsolver.add(Implies(tumpus, opaque))\n\n# Every tumpus is a wumpus\nsolver.add(Implies(tumpus, wumpus))\n\n# Wumpuses are not floral\nsolver.add(Implies(wumpus, Not(floral)))\n\n# Each wumpus is an impus\nsolver.add(Implies(wumpus, impus))\n\n# Impuses are bitter\nsolver.add(Implies(impus, bitter))\n\n# Every impus is a vumpus\nsolver.add(Implies(impus, vumpus))\n\n# Vumpuses are small\nsolver.add(Implies(vumpus, small))\n\n# Each vumpus is a numpus\nsolver.add(Implies(vumpus, numpus))\n\n# Every numpus is wooden\nsolver.add(Implies(numpus, wooden))\n\n# Each numpus is a yumpus\nsolver.add(Implies(numpus, yumpus))\n\n# Each yumpus is orange\nsolver.add(Implies(yumpus, orange))\n\n# Each yumpus is a jompus\nsolver.add(Implies(yumpus, jompus))\n\n# Each jompus is amenable\nsolver.add(Implies(jompus, amenable))\n\n# Every jompus is a zumpus\nsolver.add(Implies(jompus, zumpus))\n\n# Wren is a tumpus\nsolver.add(Implies(wren, tumpus))\n\n# Create facts in the problem\nsolver.add(wren)\n\n# Create statements to be checked\nsolver.add(wren, wooden)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_10",
    "context": "Every impus is earthy. Each impus is a jompus. Jompuses are small. Jompuses are rompuses. Rompuses are not amenable. Rompuses are wumpuses. Wumpuses are wooden. Wumpuses are zumpuses. Every zumpus is temperate. Every zumpus is a dumpus. Dumpuses are dull. Dumpuses are vumpuses. Every vumpus is not shy. Every yumpus is sweet. Vumpuses are numpuses. Numpuses are not sweet. Numpuses are tumpuses. Fae is a wumpus.",
    "question": "Is the following statement true or false? Fae is sweet.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every impus is earthy\nimpus = Bool(\"impus\")\nearthy = Bool(\"earthy\")\n\n# Each impus is a jompus\n# impus has been defined before\njompus = Bool(\"jompus\")\n\n# Jompuses are small\n# Jompuses has been defined before\nsmall = Bool(\"small\")\n\n# Jompuses are rompuses\n# Jompuses has been defined before\nrompus = Bool(\"rompus\")\n\n# Rompuses are not amenable\n# Rompuses has been defined before\namenable = Bool(\"amenable\")\n\n# Rompuses are wumpuses\n# Rompuses has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Wumpuses are wooden\n# Wumpuses has been defined before\nwooden = Bool(\"wooden\")\n\n# Wumpuses are zumpuses\n# Wumpuses has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Every zumpus is temperate\n# zumpus has been defined before\ntemperate = Bool(\"temperate\")\n\n# Every zumpus is a dumpus\n# zumpus has been defined before\ndumpus = Bool(\"dumpus\")\n\n# Dumpuses are dull\n# Dumpuses has been defined before\ndull = Bool(\"dull\")\n\n# Dumpuses are vumpuses\n# Dumpuses has been defined before\nvumpus = Bool(\"vumpus\")\n\n# Every vumpus is not shy\n# vumpus has been defined before\nshy = Bool(\"shy\")\n\n# Every yumpus is sweet\nyumpus = Bool(\"yumpus\")\nsweet = Bool(\"sweet\")\n\n# Vumpuses are numpuses\n# Vumpuses has been defined before\nnumpus = Bool(\"numpus\")\n\n# Numpuses are not sweet\n# Numpuses has been defined before\nsweet2 = Bool(\"sweet2\")\n\n# Numpuses are tumpuses\n# Numpuses has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Fae is a wumpus\nfae = Bool(\"fae\")\n# Wumpuses has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every impus is earthy\nsolver.add(Implies(impus, earthy))\n\n# Each impus is a jompus\nsolver.add(Implies(impus, jompus))\n\n# Jompuses are small\nsolver.add(Implies(jompus, small))\n\n# Jompuses are rompuses\nsolver.add(Implies(jompus, rompus))\n\n# Rompuses are not amenable\nsolver.add(Implies(rompus, Not(amenable)))\n\n# Rompuses are wumpuses\nsolver.add(Implies(rompus, wumpus))\n\n# Wumpuses are wooden\nsolver.add(Implies(wumpus, wooden))\n\n# Wumpuses are zumpuses\nsolver.add(Implies(wumpus, zumpus))\n\n# Every zumpus is temperate\nsolver.add(Implies(zumpus, temperate))\n\n# Every zumpus is a dumpus\nsolver.add(Implies(zumpus, dumpus))\n\n# Dumpuses are dull\nsolver.add(Implies(dumpus, dull))\n\n# Dumpuses are vumpuses\nsolver.add(Implies(dumpus, vumpus))\n\n# Every vumpus is not shy\nsolver.add(Implies(vumpus, Not(shy)))\n\n# Every yumpus is sweet\nsolver.add(Implies(yumpus, sweet))\n\n# Vumpuses are numpuses\nsolver.add(Implies(vumpus, numpus))\n\n# Numpuses are not sweet\nsolver.add(Implies(numpus, Not(sweet2)))\n\n# Numpuses are tumpuses\nsolver.add(Implies(numpus, tumpus))\n\n# Fae is a wumpus\nsolver.add(Implies(fae, wumpus))\n\n# Create facts in the problem\nsolver.add(fae)\n\n# Create statements to be checked\nsolver.add(fae, sweet)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_10",
    "context": "Every impus is earthy. Each impus is a jompus. Jompuses are small. Jompuses are rompuses. Rompuses are not amenable. Rompuses are wumpuses. Wumpuses are wooden. Wumpuses are zumpuses. Every zumpus is temperate. Every zumpus is a dumpus. Dumpuses are dull. Dumpuses are vumpuses. Every vumpus is not shy. Every yumpus is sweet. Vumpuses are numpuses. Numpuses are not sweet. Numpuses are tumpuses. Fae is a wumpus.",
    "question": "Is the following statement true or false? Fae is sweet.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every impus is earthy\nimpus = Bool(\"impus\")\nearthy = Bool(\"earthy\")\n\n# Each impus is a jompus\n# impus has been defined before\njompus = Bool(\"jompus\")\n\n# Jompuses are small\n# jompus has been defined before\nsmall = Bool(\"small\")\n\n# Jompuses are rompuses\n# jompus has been defined before\nrompus = Bool(\"rompus\")\n\n# Rompuses are not amenable\n# rompus has been defined before\namenable = Bool(\"amenable\")\n\n# Rompuses are wumpuses\n# rompus has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Wumpuses are wooden\n# wumpus has been defined before\nwooden = Bool(\"wooden\")\n\n# Wumpuses are zumpuses\n# wumpus has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Every zumpus is temperate\n# zumpus has been defined before\ntemperate = Bool(\"temperate\")\n\n# Every zumpus is a dumpus\n# zumpus has been defined before\ndumpus = Bool(\"dumpus\")\n\n# Dumpuses are dull\n# dumpus has been defined before\ndull = Bool(\"dull\")\n\n# Dumpuses are vumpuses\n# dumpus has been defined before\nvumpus = Bool(\"vumpus\")\n\n# Every vumpus is not shy\n# vumpus has been defined before\nshy = Bool(\"shy\")\n\n# Every yumpus is sweet\nyumpus = Bool(\"yumpus\")\nsweet = Bool(\"sweet\")\n\n# Vumpuses are numpuses\n# vumpus has been defined before\nnumpus = Bool(\"numpus\")\n\n# Numpuses are not sweet\n# numpus has been defined before\n# sweet has been defined before\n\n# Numpuses are tumpuses\n# numpus has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Fae is a wumpus\nfae = Bool(\"fae\")\n# wumpus has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every impus is earthy\nsolver.add(Implies(impus, earthy))\n\n# Each impus is a jompus\nsolver.add(Implies(impus, jompus))\n\n# Jompuses are small\nsolver.add(Implies(jompus, small))\n\n# Jompuses are rompuses\nsolver.add(Implies(jompus, rompus))\n\n# Rompuses are not amenable\nsolver.add(Implies(rompus, Not(amenable)))\n\n# Rompuses are wumpuses\nsolver.add(Implies(rompus, wumpus))\n\n# Wumpuses are wooden\nsolver.add(Implies(wumpus, wooden))\n\n# Wumpuses are zumpuses\nsolver.add(Implies(wumpus, zumpus))\n\n# Every zumpus is temperate\nsolver.add(Implies(zumpus, temperate))\n\n# Every zumpus is a dumpus\nsolver.add(Implies(zumpus, dumpus))\n\n# Dumpuses are dull\nsolver.add(Implies(dumpus, dull))\n\n# Dumpuses are vumpuses\nsolver.add(Implies(dumpus, vumpus))\n\n# Every vumpus is not shy\nsolver.add(Implies(vumpus, Not(shy)))\n\n# Every yumpus is sweet\nsolver.add(Implies(yumpus, sweet))\n\n# Vumpuses are numpuses\nsolver.add(Implies(vumpus, numpus))\n\n# Numpuses are not sweet\nsolver.add(Implies(numpus, Not(sweet)))\n\n# Numpuses are tumpuses\nsolver.add(Implies(numpus, tumpus))\n\n# Fae is a wumpus\nsolver.add(Implies(fae, wumpus))\n\n# Create facts in the problem\nsolver.add(fae)\n\n# Create statements to be checked\nsolver.add(fae, sweet)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_1",
    "context": "Jompuses are not shy. Jompuses are yumpuses. Each yumpus is aggressive. Each yumpus is a dumpus. Dumpuses are not wooden. Dumpuses are wumpuses. Wumpuses are red. Every wumpus is an impus. Each impus is opaque. Impuses are tumpuses. Numpuses are sour. Tumpuses are not sour. Tumpuses are vumpuses. Vumpuses are earthy. Every vumpus is a zumpus. Zumpuses are small. Zumpuses are rompuses. Max is a yumpus.",
    "question": "Is the following statement true or false? Max is sour.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Jompuses are not shy\njompus = Bool(\"jompus\")\nshy = Bool(\"shy\")\n\n# Jompuses are yumpuses\n# Jompuses defined before\nyumpus = Bool(\"yumpus\")\n\n# Each yumpus is aggressive\naggressive = Bool(\"aggressive\")\n# Yumpuses defined before\n\n# Each yumpus is a dumpus\ndumpus = Bool(\"dumpus\")\n# Yumpuses defined before\n\n# Dumpuses are not wooden\nwooden = Bool(\"wooden\")\n# Dumpuses defined before\n\n# Dumpuses are wumpuses\nwumpus = Bool(\"wumpus\")\n# Dumpuses defined before\n\n# Wumpuses are red\nred = Bool(\"red\")\n# Wumpuses defined before\n\n# Every wumpus is an impus\nimpus = Bool(\"impus\")\n# Wumpuses defined before\n\n# Each impus is opaque\nopaque = Bool(\"opaque\")\n# Impuses defined before\n\n# Impuses are tumpuses\ntumpus = Bool(\"tumpus\")\n# Impuses defined before\n\n# Numpuses are sour\nnumpus = Bool(\"numpus\")\nsour = Bool(\"sour\")\n\n# Tumpuses are not sour\n# Tumpuses defined before\n\n# Tumpuses are vumpuses\nvumpus = Bool(\"vumpus\")\n# Tumpuses defined before\n\n# Vumpuses are earthy\nearthy = Bool(\"earthy\")\n# Vumpuses defined before\n\n# Every vumpus is a zumpus\nzumpus = Bool(\"zumpus\")\n# Vumpuses defined before\n\n# Zumpuses are small\nsmall = Bool(\"small\")\n# Zumpuses defined before\n\n# Zumpuses are rompuses\nrompus = Bool(\"rompus\")\n# Zumpuses defined before\n\n# Max is a yumpus\nmax = Bool(\"max\")\n# Yumpuses defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Jompuses are not shy\nsolver.add(Implies(jompus, Not(shy)))\n\n# Jompuses are yumpuses\nsolver.add(Implies(jompus, yumpus))\n\n# Each yumpus is aggressive\nsolver.add(Implies(yumpus, aggressive))\n\n# Each yumpus is a dumpus\nsolver.add(Implies(yumpus, dumpus))\n\n# Dumpuses are not wooden\nsolver.add(Implies(dumpus, Not(wooden)))\n\n# Dumpuses are wumpuses\nsolver.add(Implies(dumpus, wumpus))\n\n# Wumpuses are red\nsolver.add(Implies(wumpus, red))\n\n# Every wumpus is an impus\nsolver.add(Implies(wumpus, impus))\n\n# Each impus is opaque\nsolver.add(Implies(impus, opaque))\n\n# Impuses are tumpuses\nsolver.add(Implies(impus, tumpus))\n\n# Numpuses are sour\nsolver.add(Implies(numpus, sour))\n\n# Tumpuses are not sour\nsolver.add(Implies(tumpus, Not(sour)))\n\n# Tumpuses are vumpuses\nsolver.add(Implies(tumpus, vumpus))\n\n# Vumpuses are earthy\nsolver.add(Implies(vumpus, earthy))\n\n# Every vumpus is a zumpus\nsolver.add(Implies(vumpus, zumpus))\n\n# Zumpuses are small\nsolver.add(Implies(zumpus, small))\n\n# Zumpuses are rompuses\nsolver.add(Implies(zumpus, rompus))\n\n# Max is a yumpus\nsolver.add(Implies(max, yumpus))\n\n# Create facts in the problem\nsolver.add(max)\n\n# Create statements to be checked\nsolver.add(max, Not(sour))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_2",
    "context": "Every tumpus is not angry. Tumpuses are rompuses. Every numpus is not bright. Rompuses are not luminous. Rompuses are yumpuses. Yumpuses are transparent. Yumpuses are zumpuses. Each zumpus is not bitter. Zumpuses are impuses. Impuses are red. Each impus is a dumpus. Every dumpus is happy. Each dumpus is a vumpus. Vumpuses are bright. Every vumpus is a jompus. Jompuses are large. Each jompus is a wumpus. Stella is a yumpus.",
    "question": "Is the following statement true or false? Stella is bright.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every tumpus is not angry\ntumpus = Bool(\"tumpus\")\nangry = Bool(\"angry\")\n\n# Tumpuses are rompuses\n# Tumpuses defined before\nrompus = Bool(\"rompus\")\n\n# Every numpus is not bright\nnumpus = Bool(\"numpus\")\nbright = Bool(\"bright\")\n\n# Rompuses are not luminous\n# Rompuses defined before\nluminous = Bool(\"luminous\")\n\n# Rompuses are yumpuses\n# Rompuses defined before\nyumpus = Bool(\"yumpus\")\n\n# Yumpuses are transparent\n# Yumpuses defined before\ntransparent = Bool(\"transparent\")\n\n# Yumpuses are zumpuses\n# Yumpuses defined before\nzumpus = Bool(\"zumpus\")\n\n# Each zumpus is not bitter\nbitter = Bool(\"bitter\")\n\n# Zumpuses are impuses\n# Zumpuses defined before\nimpus = Bool(\"impus\")\n\n# Impuses are red\n# Impuses defined before\nred = Bool(\"red\")\n\n# Each impus is a dumpus\ndumpus = Bool(\"dumpus\")\n\n# Every dumpus is happy\n# Dumpus defined before\nhappy = Bool(\"happy\")\n\n# Each dumpus is a vumpus\nvumpus = Bool(\"vumpus\")\n\n# Vumpuses are bright\n# Vumpuses defined before\n# Bright defined before\n\n# Every vumpus is a jompus\n# Vumpuses defined before\njompus = Bool(\"jompus\")\n\n# Jompuses are large\n# Jompuses defined before\nlarge = Bool(\"large\")\n\n# Each jompus is a wumpus\nwumpus = Bool(\"wumpus\")\n\n# Stella is a yumpus\nstella = Bool(\"stella\")\n# Yumpuses defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every tumpus is not angry\nsolver.add(Implies(tumpus, Not(angry)))\n\n# Tumpuses are rompuses\nsolver.add(Implies(tumpus, rompus))\n\n# Every numpus is not bright\nsolver.add(Implies(numpus, Not(bright)))\n\n# Rompuses are not luminous\nsolver.add(Implies(rompus, Not(luminous)))\n\n# Rompuses are yumpuses\nsolver.add(Implies(rompus, yumpus))\n\n# Yumpuses are transparent\nsolver.add(Implies(yumpus, transparent))\n\n# Yumpuses are zumpuses\nsolver.add(Implies(yumpus, zumpus))\n\n# Each zumpus is not bitter\nsolver.add(Implies(zumpus, Not(bitter)))\n\n# Zumpuses are impuses\nsolver.add(Implies(zumpus, impus))\n\n# Impuses are red\nsolver.add(Implies(impus, red))\n\n# Each impus is a dumpus\nsolver.add(Implies(impus, dumpus))\n\n# Every dumpus is happy\nsolver.add(Implies(dumpus, happy))\n\n# Each dumpus is a vumpus\nsolver.add(Implies(dumpus, vumpus))\n\n# Vumpuses are bright\nsolver.add(Implies(vumpus, bright))\n\n# Every vumpus is a jompus\nsolver.add(Implies(vumpus, jompus))\n\n# Jompuses are large\nsolver.add(Implies(jompus, large))\n\n# Each jompus is a wumpus\nsolver.add(Implies(jompus, wumpus))\n\n# Stella is a yumpus\nsolver.add(Implies(stella, yumpus))\n\n# Create facts in the problem\nsolver.add(stella)\n\n# Create statements to be checked\nsolver.add(stella, bright)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_3",
    "context": "Vumpuses are floral. Vumpuses are tumpuses. Tumpuses are brown. Each tumpus is a wumpus. Wumpuses are small. Each wumpus is a rompus. Each zumpus is metallic. Every rompus is happy. Rompuses are impuses. Each impus is amenable. Each impus is a dumpus. Every dumpus is not metallic. Dumpuses are numpuses. Each numpus is bitter. Each numpus is a jompus. Every jompus is cold. Each jompus is a yumpus. Wren is a tumpus.",
    "question": "Is the following statement true or false? Wren is not metallic.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Vumpuses are floral\nvumpus = Bool(\"vumpus\")\nfloral = Bool(\"floral\")\n\n# Vumpuses are tumpuses\n# Vumpuses defined before\ntumpus = Bool(\"tumpus\")\n\n# Tumpuses are brown\n# Tumpuses defined before\nbrown = Bool(\"brown\")\n\n# Each tumpus is a wumpus\n# Tumpuses defined before\nwumpus = Bool(\"wumpus\")\n\n# Wumpuses are small\n# Wumpuses defined before\nsmall = Bool(\"small\")\n\n# Each wumpus is a rompus\n# Wumpuses defined before\nrompus = Bool(\"rompus\")\n\n# Each zumpus is metallic\nzumpus = Bool(\"zumpus\")\nmetallic = Bool(\"metallic\")\n\n# Every rompus is happy\nrompus = Bool(\"rompus\")\nhappy = Bool(\"happy\")\n\n# Rompuses are impuses\n# Rompuses defined before\nimpus = Bool(\"impus\")\n\n# Each impus is amenable\n# Impus defined before\namenable = Bool(\"amenable\")\n\n# Each impus is a dumpus\n# Impus defined before\ndumpus = Bool(\"dumpus\")\n\n# Every dumpus is not metallic\n# Dumpus defined before\nmetallic = Bool(\"metallic\")\n\n# Dumpuses are numpuses\n# Dumpus defined before\nnumpus = Bool(\"numpus\")\n\n# Each numpus is bitter\n# Numpus defined before\nbitter = Bool(\"bitter\")\n\n# Each numpus is a jompus\n# Numpus defined before\njompus = Bool(\"jompus\")\n\n# Every jompus is cold\n# Jompus defined before\ncold = Bool(\"cold\")\n\n# Each jompus is a yumpus\n# Jompus defined before\nyumpus = Bool(\"yumpus\")\n\n# Wren is a tumpus\nwren = Bool(\"wren\")\n# Tumpus defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Vumpuses are floral\nsolver.add(Implies(vumpus, floral))\n\n# Vumpuses are tumpuses\nsolver.add(Implies(vumpus, tumpus))\n\n# Tumpuses are brown\nsolver.add(Implies(tumpus, brown))\n\n# Each tumpus is a wumpus\nsolver.add(Implies(tumpus, wumpus))\n\n# Wumpuses are small\nsolver.add(Implies(wumpus, small))\n\n# Each wumpus is a rompus\nsolver.add(Implies(wumpus, rompus))\n\n# Each zumpus is metallic\nsolver.add(Implies(zumpus, metallic))\n\n# Every rompus is happy\nsolver.add(Implies(rompus, happy))\n\n# Rompuses are impuses\nsolver.add(Implies(rompus, impus))\n\n# Each impus is amenable\nsolver.add(Implies(impus, amenable))\n\n# Each impus is a dumpus\nsolver.add(Implies(impus, dumpus))\n\n# Every dumpus is not metallic\nsolver.add(Implies(dumpus, Not(metallic)))\n\n# Dumpuses are numpuses\nsolver.add(Implies(dumpus, numpus))\n\n# Each numpus is bitter\nsolver.add(Implies(numpus, bitter))\n\n# Each numpus is a jompus\nsolver.add(Implies(numpus, jompus))\n\n# Every jompus is cold\nsolver.add(Implies(jompus, cold))\n\n# Each jompus is a yumpus\nsolver.add(Implies(jompus, yumpus))\n\n# Wren is a tumpus\nsolver.add(Implies(wren, tumpus))\n\n# Create facts in the problem\nsolver.add(wren)\n\n# Create statements to be checked\nsolver.add(wren, Not(metallic))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_4",
    "context": "Rompuses are spicy. Every rompus is an impus. Yumpuses are not small. Impuses are orange. Impuses are zumpuses. Zumpuses are not hot. Zumpuses are numpuses. Numpuses are metallic. Numpuses are wumpuses. Every wumpus is not kind. Each wumpus is a dumpus. Each dumpus is not bright. Every dumpus is a jompus. Jompuses are small. Jompuses are vumpuses. Each vumpus is not shy. Every vumpus is a tumpus. Alex is a zumpus.",
    "question": "Is the following statement true or false? Alex is not small.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Rompuses are spicy\nrompus = Bool(\"rompus\")\nspicy = Bool(\"spicy\")\n\n# Every rompus is an impus\nrompus = Bool(\"rompus\")\nimpus = Bool(\"impus\")\n\n# Yumpuses are not small\nyumpus = Bool(\"yumpus\")\nsmall = Bool(\"small\")\n\n# Impuses are orange\nimpus = Bool(\"impus\")\norange = Bool(\"orange\")\n\n# Impuses are zumpuses\nzumpus = Bool(\"zumpus\")\n\n# Zumpuses are not hot\nhot = Bool(\"hot\")\n\n# Zumpuses are numpuses\nnumpus = Bool(\"numpus\")\n\n# Numpuses are metallic\nmetallic = Bool(\"metallic\")\n\n# Numpuses are wumpuses\nwumpus = Bool(\"wumpus\")\n\n# Every wumpus is not kind\nwumpus = Bool(\"wumpus\")\nkind = Bool(\"kind\")\n\n# Each wumpus is a dumpus\ndumpus = Bool(\"dumpus\")\n\n# Each dumpus is not bright\ndumpus = Bool(\"dumpus\")\nbright = Bool(\"bright\")\n\n# Every dumpus is a jompus\ndumpus = Bool(\"dumpus\")\njompus = Bool(\"jompus\")\n\n# Jompuses are small\njompus = Bool(\"jompus\")\nsmall = Bool(\"small\")\n\n# Jompuses are vumpuses\nvumpus = Bool(\"vumpus\")\n\n# Each vumpus is not shy\nvumpus = Bool(\"vumpus\")\nshy = Bool(\"shy\")\n\n# Every vumpus is a tumpus\nvumpus = Bool(\"vumpus\")\ntumpus = Bool(\"tumpus\")\n\n# Alex is a zumpus\nalex = Bool(\"alex\")\nzumpus = Bool(\"zumpus\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Rompuses are spicy\nsolver.add(Implies(rompus, spicy))\n\n# Every rompus is an impus\nsolver.add(Implies(rompus, impus))\n\n# Yumpuses are not small\nsolver.add(Implies(yumpus, Not(small)))\n\n# Impuses are orange\nsolver.add(Implies(impus, orange))\n\n# Impuses are zumpuses\nsolver.add(Implies(impus, zumpus))\n\n# Zumpuses are not hot\nsolver.add(Implies(zumpus, Not(hot)))\n\n# Zumpuses are numpuses\nsolver.add(Implies(zumpus, numpus))\n\n# Numpuses are metallic\nsolver.add(Implies(numpus, metallic))\n\n# Numpuses are wumpuses\nsolver.add(Implies(numpus, wumpus))\n\n# Every wumpus is not kind\nsolver.add(Implies(wumpus, Not(kind)))\n\n# Each wumpus is a dumpus\nsolver.add(Implies(wumpus, dumpus))\n\n# Each dumpus is not bright\nsolver.add(Implies(dumpus, Not(bright)))\n\n# Every dumpus is a jompus\nsolver.add(Implies(dumpus, jompus))\n\n# Jompuses are small\nsolver.add(Implies(jompus, small))\n\n# Jompuses are vumpuses\nsolver.add(Implies(jompus, vumpus))\n\n# Each vumpus is not shy\nsolver.add(Implies(vumpus, Not(shy)))\n\n# Every vumpus is a tumpus\nsolver.add(Implies(vumpus, tumpus))\n\n# Alex is a zumpus\nsolver.add(Implies(alex, zumpus))\n\n# Create facts in the problem\nsolver.add(alex)\n\n# Create statements to be checked\nsolver.add(alex, Not(small))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_5",
    "context": "Rompuses are mean. Rompuses are zumpuses. Each zumpus is not happy. Each zumpus is a numpus. Each numpus is not temperate. Each numpus is a tumpus. Tumpuses are not large. Tumpuses are yumpuses. Every yumpus is earthy. Each yumpus is a jompus. Jompuses are blue. Every jompus is a wumpus. Wumpuses are not dull. Wumpuses are impuses. Each vumpus is dull. Impuses are sour. Impuses are dumpuses. Alex is a numpus.",
    "question": "Is the following statement true or false? Alex is not dull.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Rompuses are mean\nrompus = Bool(\"rompus\")\nmean = Bool(\"mean\")\n\n# Rompuses are zumpuses\n# Rompuses defined before\nzumpus = Bool(\"zumpus\")\n\n# Each zumpus is not happy\n# Each zumpus is a numpus\nzumpus = Bool(\"zumpus\")\nhappy = Bool(\"happy\")\nnumpus = Bool(\"numpus\")\n\n# Each numpus is not temperate\n# Each numpus is a tumpus\nnumpus = Bool(\"numpus\")\ntemperate = Bool(\"temperate\")\ntumpus = Bool(\"tumpus\")\n\n# Tumpuses are not large\n# Tumpuses are yumpuses\ntumpus = Bool(\"tumpus\")\nlarge = Bool(\"large\")\nyumpus = Bool(\"yumpus\")\n\n# Every yumpus is earthy\n# Each yumpus is a jompus\nyumpus = Bool(\"yumpus\")\nearthy = Bool(\"earthy\")\njompus = Bool(\"jompus\")\n\n# Jompuses are blue\n# Every jompus is a wumpus\njompus = Bool(\"jompus\")\nblue = Bool(\"blue\")\nwumpus = Bool(\"wumpus\")\n\n# Wumpuses are not dull\n# Wumpuses are impuses\nwumpus = Bool(\"wumpus\")\ndull = Bool(\"dull\")\nimpuses = Bool(\"impuses\")\n\n# Each vumpus is dull\nvumpus = Bool(\"vumpus\")\n\n# Impuses are sour\n# Impuses are dumpuses\nimpuses = Bool(\"impuses\")\nsour = Bool(\"sour\")\ndumpuses = Bool(\"dumpuses\")\n\n# Alex is a numpus\nalex = Bool(\"alex\")\n# Numpus defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Rompuses are mean\nsolver.add(Implies(rompus, mean))\n\n# Rompuses are zumpuses\nsolver.add(Implies(rompus, zumpus))\n\n# Each zumpus is not happy\nsolver.add(Implies(zumpus, Not(happy)))\n\n# Each zumpus is a numpus\nsolver.add(Implies(zumpus, numpus))\n\n# Each numpus is not temperate\nsolver.add(Implies(numpus, Not(temperate)))\n\n# Each numpus is a tumpus\nsolver.add(Implies(numpus, tumpus))\n\n# Tumpuses are not large\nsolver.add(Implies(tumpus, Not(large)))\n\n# Tumpuses are yumpuses\nsolver.add(Implies(tumpus, yumpus))\n\n# Every yumpus is earthy\nsolver.add(Implies(yumpus, earthy))\n\n# Each yumpus is a jompus\nsolver.add(Implies(yumpus, jompus))\n\n# Jompuses are blue\nsolver.add(Implies(jompus, blue))\n\n# Every jompus is a wumpus\nsolver.add(Implies(jompus, wumpus))\n\n# Wumpuses are not dull\nsolver.add(Implies(wumpus, Not(dull)))\n\n# Wumpuses are impuses\nsolver.add(Implies(wumpus, impuses))\n\n# Each vumpus is dull\nsolver.add(Implies(vumpus, dull))\n\n# Impuses are sour\nsolver.add(Implies(impuses, sour))\n\n# Impuses are dumpuses\nsolver.add(Implies(impuses, dumpuses))\n\n# Alex is a numpus\nsolver.add(Implies(alex, numpus))\n\n# Create facts in the problem\nsolver.add(alex)\n\n# Create statements to be checked\nsolver.add(alex, Not(dull))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_6",
    "context": "Every tumpus is large. Tumpuses are wumpuses. Each wumpus is not opaque. Every dumpus is not dull. Every wumpus is a rompus. Every rompus is brown. Each rompus is a vumpus. Each vumpus is temperate. Vumpuses are jompuses. Jompuses are dull. Jompuses are numpuses. Every numpus is liquid. Each numpus is an impus. Impuses are spicy. Every impus is a yumpus. Every yumpus is not nervous. Every yumpus is a zumpus. Wren is a tumpus.",
    "question": "Is the following statement true or false? Wren is dull.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every tumpus is large\ntumpus = Bool(\"tumpus\")\nlarge = Bool(\"large\")\n\n# Tumpuses are wumpuses\n# Tumpus defined before\nwumpus = Bool(\"wumpus\")\n\n# Each wumpus is not opaque\n# Wumpus defined before\nopaque = Bool(\"opaque\")\n\n# Every dumpus is not dull\ndumpus = Bool(\"dumpus\")\ndull = Bool(\"dull\")\n\n# Every wumpus is a rompus\n# Wumpus defined before\nrompus = Bool(\"rompus\")\n\n# Every rompus is brown\n# Rompus defined before\nbrown = Bool(\"brown\")\n\n# Each rompus is a vumpus\n# Rompus defined before\nvumpus = Bool(\"vumpus\")\n\n# Each vumpus is temperate\n# Vumpus defined before\ntemperate = Bool(\"temperate\")\n\n# Vumpuses are jompuses\n# Vumpus defined before\njompus = Bool(\"jompus\")\n\n# Jompuses are dull\n# Jompus defined before\n# Dull defined before\n\n# Jompuses are numpuses\n# Jompus defined before\nnumpus = Bool(\"numpus\")\n\n# Every numpus is liquid\n# Numpus defined before\nliquid = Bool(\"liquid\")\n\n# Each numpus is an impus\n# Numpus defined before\nimpus = Bool(\"impus\")\n\n# Impuses are spicy\n# Impus defined before\nspicy = Bool(\"spicy\")\n\n# Every impus is a yumpus\n# Impus defined before\nyumpus = Bool(\"yumpus\")\n\n# Every yumpus is not nervous\n# Yumpus defined before\nnervous = Bool(\"nervous\")\n\n# Every yumpus is a zumpus\n# Yumpus defined before\nzumpus = Bool(\"zumpus\")\n\n# Wren is a tumpus\nwren = Bool(\"wren\")\n# Tumpus defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every tumpus is large\nsolver.add(Implies(tumpus, large))\n\n# Tumpuses are wumpuses\nsolver.add(Implies(tumpus, wumpus))\n\n# Each wumpus is not opaque\nsolver.add(Implies(wumpus, Not(opaque)))\n\n# Every dumpus is not dull\nsolver.add(Implies(dumpus, Not(dull)))\n\n# Every wumpus is a rompus\nsolver.add(Implies(wumpus, rompus))\n\n# Every rompus is brown\nsolver.add(Implies(rompus, brown))\n\n# Each rompus is a vumpus\nsolver.add(Implies(rompus, vumpus))\n\n# Each vumpus is temperate\nsolver.add(Implies(vumpus, temperate))\n\n# Vumpuses are jompuses\nsolver.add(Implies(vumpus, jompus))\n\n# Jompuses are dull\nsolver.add(Implies(jompus, dull))\n\n# Jompuses are numpuses\nsolver.add(Implies(jompus, numpus))\n\n# Every numpus is liquid\nsolver.add(Implies(numpus, liquid))\n\n# Each numpus is an impus\nsolver.add(Implies(numpus, impus))\n\n# Impuses are spicy\nsolver.add(Implies(impus, spicy))\n\n# Every impus is a yumpus\nsolver.add(Implies(impus, yumpus))\n\n# Every yumpus is not nervous\nsolver.add(Implies(yumpus, Not(nervous)))\n\n# Every yumpus is a zumpus\nsolver.add(Implies(yumpus, zumpus))\n\n# Wren is a tumpus\nsolver.add(Implies(wren, tumpus))\n\n# Create facts in the problem\nsolver.add(wren)\n\n# Create statements to be checked\nsolver.add(wren, dull)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_7",
    "context": "Every rompus is orange. Every rompus is an impus. Vumpuses are happy. Every impus is spicy. Every impus is a wumpus. Wumpuses are transparent. Wumpuses are numpuses. Every numpus is not kind. Numpuses are tumpuses. Each tumpus is not bright. Tumpuses are yumpuses. Every yumpus is not liquid. Yumpuses are dumpuses. Each dumpus is not happy. Dumpuses are zumpuses. Every zumpus is earthy. Each zumpus is a jompus. Stella is a wumpus.",
    "question": "Is the following statement true or false? Stella is happy.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every rompus is orange\nrompus = Bool(\"rompus\")\norange = Bool(\"orange\")\n\n# Every rompus is an impus\n# rompus defined before\nimpus = Bool(\"impus\")\n\n# Vumpuses are happy\nvumpus = Bool(\"vumpus\")\nhappy = Bool(\"happy\")\n\n# Every impus is spicy\n# impus defined before\nspicy = Bool(\"spicy\")\n\n# Every impus is a wumpus\n# impus defined before\nwumpus = Bool(\"wumpus\")\n\n# Wumpuses are transparent\n# wumpus defined before\ntransparent = Bool(\"transparent\")\n\n# Wumpuses are numpuses\n# wumpus defined before\nnumpus = Bool(\"numpus\")\n\n# Every numpus is not kind\n# numpus defined before\nkind = Bool(\"kind\")\n\n# Numpuses are tumpuses\n# numpus defined before\ntumpus = Bool(\"tumpus\")\n\n# Each tumpus is not bright\n# tumpus defined before\nbright = Bool(\"bright\")\n\n# Tumpuses are yumpuses\n# tumpus defined before\nyumpus = Bool(\"yumpus\")\n\n# Every yumpus is not liquid\n# yumpus defined before\nliquid = Bool(\"liquid\")\n\n# Yumpuses are dumpuses\n# yumpus defined before\ndumpus = Bool(\"dumpus\")\n\n# Each dumpus is not happy\n# dumpus defined before\nhappy2 = Bool(\"happy2\")\n\n# Dumpuses are zumpuses\n# dumpus defined before\nzumpus = Bool(\"zumpus\")\n\n# Every zumpus is earthy\n# zumpus defined before\nearthy = Bool(\"earthy\")\n\n# Each zumpus is a jompus\n# zumpus defined before\njompus = Bool(\"jompus\")\n\n# Stella is a wumpus\nstella = Bool(\"stella\")\n# wumpus defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every rompus is orange\nsolver.add(Implies(rompus, orange))\n\n# Every rompus is an impus\nsolver.add(Implies(rompus, impus))\n\n# Vumpuses are happy\nsolver.add(Implies(vumpus, happy))\n\n# Every impus is spicy\nsolver.add(Implies(impus, spicy))\n\n# Every impus is a wumpus\nsolver.add(Implies(impus, wumpus))\n\n# Wumpuses are transparent\nsolver.add(Implies(wumpus, transparent))\n\n# Wumpuses are numpuses\nsolver.add(Implies(wumpus, numpus))\n\n# Every numpus is not kind\nsolver.add(Implies(numpus, Not(kind)))\n\n# Numpuses are tumpuses\nsolver.add(Implies(numpus, tumpus))\n\n# Each tumpus is not bright\nsolver.add(Implies(tumpus, Not(bright)))\n\n# Tumpuses are yumpuses\nsolver.add(Implies(tumpus, yumpus))\n\n# Every yumpus is not liquid\nsolver.add(Implies(yumpus, Not(liquid)))\n\n# Yumpuses are dumpuses\nsolver.add(Implies(yumpus, dumpus))\n\n# Each dumpus is not happy\nsolver.add(Implies(dumpus, Not(happy2)))\n\n# Dumpuses are zumpuses\nsolver.add(Implies(dumpus, zumpus))\n\n# Every zumpus is earthy\nsolver.add(Implies(zumpus, earthy))\n\n# Each zumpus is a jompus\nsolver.add(Implies(zumpus, jompus))\n\n# Stella is a wumpus\nsolver.add(Implies(stella, wumpus))\n\n# Create facts in the problem\nsolver.add(stella)\n\n# Create statements to be checked\nsolver.add(stella, happy)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_8",
    "context": "Every jompus is sour. Each jompus is a rompus. Rompuses are not kind. Every rompus is a zumpus. Every zumpus is feisty. Zumpuses are tumpuses. Tumpuses are small. Tumpuses are wumpuses. Wumpuses are opaque. Wumpuses are impuses. Every yumpus is hot. Impuses are brown. Impuses are dumpuses. Dumpuses are not hot. Every dumpus is a vumpus. Each vumpus is dull. Vumpuses are numpuses. Alex is a zumpus.",
    "question": "Is the following statement true or false? Alex is hot.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every jompus is sour\njompus = Bool(\"jompus\")\nsour = Bool(\"sour\")\n\n# Each jompus is a rompus\n# jompus defined before\nrompus = Bool(\"rompus\")\n\n# Rompuses are not kind\n# rompus defined before\nkind = Bool(\"kind\")\n\n# Every rompus is a zumpus\n# rompus defined before\nzumpus = Bool(\"zumpus\")\n\n# Every zumpus is feisty\n# zumpus defined before\nfeisty = Bool(\"feisty\")\n\n# Zumpuses are tumpuses\n# zumpus defined before\ntumpus = Bool(\"tumpus\")\n\n# Tumpuses are small\n# tumpus defined before\nsmall = Bool(\"small\")\n\n# Tumpuses are wumpuses\n# tumpus defined before\nwumpus = Bool(\"wumpus\")\n\n# Wumpuses are opaque\n# wumpus defined before\nopaque = Bool(\"opaque\")\n\n# Wumpuses are impuses\n# wumpus defined before\nimpus = Bool(\"impus\")\n\n# Every yumpus is hot\nyumpus = Bool(\"yumpus\")\nhot = Bool(\"hot\")\n\n# Impuses are brown\n# impus defined before\nbrown = Bool(\"brown\")\n\n# Impuses are dumpuses\n# impus defined before\ndumpus = Bool(\"dumpus\")\n\n# Dumpuses are not hot\n# dumpus defined before\n# hot defined before\n\n# Every dumpus is a vumpus\ndumpus = Bool(\"dumpus\")\nvumpus = Bool(\"vumpus\")\n\n# Each vumpus is dull\n# vumpus defined before\ndull = Bool(\"dull\")\n\n# Vumpuses are numpuses\n# vumpus defined before\nnumpus = Bool(\"numpus\")\n\n# Alex is a zumpus\nalex = Bool(\"alex\")\n# zumpus defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every jompus is sour\nsolver.add(Implies(jompus, sour))\n\n# Each jompus is a rompus\nsolver.add(Implies(jompus, rompus))\n\n# Rompuses are not kind\nsolver.add(Implies(rompus, Not(kind)))\n\n# Every rompus is a zumpus\nsolver.add(Implies(rompus, zumpus))\n\n# Every zumpus is feisty\nsolver.add(Implies(zumpus, feisty))\n\n# Zumpuses are tumpuses\nsolver.add(Implies(zumpus, tumpus))\n\n# Tumpuses are small\nsolver.add(Implies(tumpus, small))\n\n# Tumpuses are wumpuses\nsolver.add(Implies(tumpus, wumpus))\n\n# Wumpuses are opaque\nsolver.add(Implies(wumpus, opaque))\n\n# Wumpuses are impuses\nsolver.add(Implies(wumpus, impus))\n\n# Every yumpus is hot\nsolver.add(Implies(yumpus, hot))\n\n# Impuses are brown\nsolver.add(Implies(impus, brown))\n\n# Impuses are dumpuses\nsolver.add(Implies(impus, dumpus))\n\n# Dumpuses are not hot\nsolver.add(Implies(dumpus, Not(hot)))\n\n# Every dumpus is a vumpus\nsolver.add(Implies(dumpus, vumpus))\n\n# Each vumpus is dull\nsolver.add(Implies(vumpus, dull))\n\n# Vumpuses are numpuses\nsolver.add(Implies(vumpus, numpus))\n\n# Alex is a zumpus\nsolver.add(Implies(alex, zumpus))\n\n# Create facts in the problem\nsolver.add(alex)\n\n# Create statements to be checked\nsolver.add(alex, hot)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_9",
    "context": "Every dumpus is not shy. Each dumpus is a tumpus. Rompuses are not wooden. Tumpuses are opaque. Every tumpus is a wumpus. Wumpuses are not floral. Each wumpus is an impus. Impuses are bitter. Every impus is a vumpus. Vumpuses are small. Each vumpus is a numpus. Every numpus is wooden. Each numpus is a yumpus. Each yumpus is orange. Each yumpus is a jompus. Each jompus is amenable. Every jompus is a zumpus. Wren is a tumpus.",
    "question": "Is the following statement true or false? Wren is wooden.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every dumpus is not shy\ndumpus = Bool(\"dumpus\")\nshy = Bool(\"shy\")\n\n# Each dumpus is a tumpus\n# dumpus defined before\ntumpus = Bool(\"tumpus\")\n\n# Rompuses are not wooden\nrompus = Bool(\"rompus\")\nwooden = Bool(\"wooden\")\n\n# Tumpuses are opaque\n# tumpus defined before\nopaque = Bool(\"opaque\")\n\n# Every tumpus is a wumpus\n# tumpus defined before\nwumpus = Bool(\"wumpus\")\n\n# Wumpuses are not floral\n# wumpus defined before\nfloral = Bool(\"floral\")\n\n# Each wumpus is an impus\n# wumpus defined before\nimpus = Bool(\"impus\")\n\n# Impuses are bitter\n# impus defined before\nbitter = Bool(\"bitter\")\n\n# Every impus is a vumpus\n# impus defined before\nvumpus = Bool(\"vumpus\")\n\n# Vumpuses are small\n# vumpus defined before\nsmall = Bool(\"small\")\n\n# Each vumpus is a numpus\n# vumpus defined before\nnumpus = Bool(\"numpus\")\n\n# Every numpus is wooden\n# numpus defined before\n# wooden defined before\n\n# Each numpus is a yumpus\n# numpus defined before\nyumpus = Bool(\"yumpus\")\n\n# Each yumpus is orange\n# yumpus defined before\norange = Bool(\"orange\")\n\n# Each yumpus is a jompus\n# yumpus defined before\njompus = Bool(\"jompus\")\n\n# Each jompus is amenable\n# jompus defined before\namenable = Bool(\"amenable\")\n\n# Every jompus is a zumpus\n# jompus defined before\nzumpus = Bool(\"zumpus\")\n\n# Wren is a tumpus\nwren = Bool(\"wren\")\n# tumpus defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every dumpus is not shy\nsolver.add(Implies(dumpus, Not(shy)))\n\n# Each dumpus is a tumpus\nsolver.add(Implies(dumpus, tumpus))\n\n# Rompuses are not wooden\nsolver.add(Implies(rompus, Not(wooden)))\n\n# Tumpuses are opaque\nsolver.add(Implies(tumpus, opaque))\n\n# Every tumpus is a wumpus\nsolver.add(Implies(tumpus, wumpus))\n\n# Wumpuses are not floral\nsolver.add(Implies(wumpus, Not(floral)))\n\n# Each wumpus is an impus\nsolver.add(Implies(wumpus, impus))\n\n# Impuses are bitter\nsolver.add(Implies(impus, bitter))\n\n# Every impus is a vumpus\nsolver.add(Implies(impus, vumpus))\n\n# Vumpuses are small\nsolver.add(Implies(vumpus, small))\n\n# Each vumpus is a numpus\nsolver.add(Implies(vumpus, numpus))\n\n# Every numpus is wooden\nsolver.add(Implies(numpus, wooden))\n\n# Each numpus is a yumpus\nsolver.add(Implies(numpus, yumpus))\n\n# Each yumpus is orange\nsolver.add(Implies(yumpus, orange))\n\n# Each yumpus is a jompus\nsolver.add(Implies(yumpus, jompus))\n\n# Each jompus is amenable\nsolver.add(Implies(jompus, amenable))\n\n# Every jompus is a zumpus\nsolver.add(Implies(jompus, zumpus))\n\n# Wren is a tumpus\nsolver.add(Implies(wren, tumpus))\n\n# Create facts in the problem\nsolver.add(wren)\n\n# Create statements to be checked\nsolver.add(wren, wooden)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_10",
    "context": "Every impus is earthy. Each impus is a jompus. Jompuses are small. Jompuses are rompuses. Rompuses are not amenable. Rompuses are wumpuses. Wumpuses are wooden. Wumpuses are zumpuses. Every zumpus is temperate. Every zumpus is a dumpus. Dumpuses are dull. Dumpuses are vumpuses. Every vumpus is not shy. Every yumpus is sweet. Vumpuses are numpuses. Numpuses are not sweet. Numpuses are tumpuses. Fae is a wumpus.",
    "question": "Is the following statement true or false? Fae is sweet.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every impus is earthy\nimpus = Bool(\"impus\")\nearthy = Bool(\"earthy\")\n\n# Each impus is a jompus\n# impus defined before\njompus = Bool(\"jompus\")\n\n# Jompuses are small\n# jompus defined before\nsmall = Bool(\"small\")\n\n# Jompuses are rompuses\n# jompus defined before\nrompus = Bool(\"rompus\")\n\n# Rompuses are not amenable\n# rompus defined before\namenable = Bool(\"amenable\")\n\n# Rompuses are wumpuses\n# rompus defined before\nwumpus = Bool(\"wumpus\")\n\n# Wumpuses are wooden\n# wumpus defined before\nwooden = Bool(\"wooden\")\n\n# Wumpuses are zumpuses\n# wumpus defined before\nzumpus = Bool(\"zumpus\")\n\n# Every zumpus is temperate\nzumpus_temperate = Bool(\"zumpus_temperate\")\ntemperate = Bool(\"temperate\")\n\n# Every zumpus is a dumpus\nzumpus_dumpus = Bool(\"zumpus_dumpus\")\ndumpus = Bool(\"dumpus\")\n\n# Dumpuses are dull\n# dumpus defined before\ndull = Bool(\"dull\")\n\n# Dumpuses are vumpuses\n# dumpus defined before\nvumpus = Bool(\"vumpus\")\n\n# Every vumpus is not shy\nvumpus_shy = Bool(\"vumpus_shy\")\nshy = Bool(\"shy\")\n\n# Every yumpus is sweet\nyumpus_sweet = Bool(\"yumpus_sweet\")\nsweet = Bool(\"sweet\")\n\n# Vumpuses are numpuses\n# vumpus defined before\nnumpus = Bool(\"numpus\")\n\n# Numpuses are not sweet\n# numpus defined before\n# sweet defined before\n\n# Numpuses are tumpuses\n# numpus defined before\ntumpus = Bool(\"tumpus\")\n\n# Fae is a wumpus\nfae = Bool(\"fae\")\n# wumpus defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every impus is earthy\nsolver.add(Implies(impus, earthy))\n\n# Each impus is a jompus\nsolver.add(Implies(impus, jompus))\n\n# Jompuses are small\nsolver.add(Implies(jompus, small))\n\n# Jompuses are rompuses\nsolver.add(Implies(jompus, rompus))\n\n# Rompuses are not amenable\nsolver.add(Implies(rompus, Not(amenable)))\n\n# Rompuses are wumpuses\nsolver.add(Implies(rompus, wumpus))\n\n# Wumpuses are wooden\nsolver.add(Implies(wumpus, wooden))\n\n# Wumpuses are zumpuses\nsolver.add(Implies(wumpus, zumpus))\n\n# Every zumpus is temperate\nsolver.add(Implies(zumpus, temperate))\n\n# Every zumpus is a dumpus\nsolver.add(Implies(zumpus, dumpus))\n\n# Dumpuses are dull\nsolver.add(Implies(dumpus, dull))\n\n# Dumpuses are vumpuses\nsolver.add(Implies(dumpus, vumpus))\n\n# Every vumpus is not shy\nsolver.add(Implies(vumpus, Not(shy)))\n\n# Every yumpus is sweet\nsolver.add(Implies(yumpus_sweet, sweet))\n\n# Vumpuses are numpuses\nsolver.add(Implies(vumpus, numpus))\n\n# Numpuses are not sweet\nsolver.add(Implies(numpus, Not(sweet)))\n\n# Numpuses are tumpuses\nsolver.add(Implies(numpus, tumpus))\n\n# Fae is a wumpus\nsolver.add(Implies(fae, wumpus))\n\n# Create facts in the problem\nsolver.add(fae)\n\n# Create statements to be checked\nsolver.add(fae, sweet)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_7",
    "context": "Every rompus is orange. Every rompus is an impus. Vumpuses are happy. Every impus is spicy. Every impus is a wumpus. Wumpuses are transparent. Wumpuses are numpuses. Every numpus is not kind. Numpuses are tumpuses. Each tumpus is not bright. Tumpuses are yumpuses. Every yumpus is not liquid. Yumpuses are dumpuses. Each dumpus is not happy. Dumpuses are zumpuses. Every zumpus is earthy. Each zumpus is a jompus. Stella is a wumpus.",
    "question": "Is the following statement true or false? Stella is happy.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every rompus is orange\nrompus = Bool(\"rompus\")\norange = Bool(\"orange\")\n\n# Every rompus is an impus\n# rompus has been defined before\nimpus = Bool(\"impus\")\n\n# Vumpuses are happy\nvumpus = Bool(\"vumpus\")\nhappy = Bool(\"happy\")\n\n# Every impus is spicy\n# impus has been defined before\nspicy = Bool(\"spicy\")\n\n# Every impus is a wumpus\n# impus has been defined before\n# wumpus has been defined before\n\n# Wumpuses are transparent\n# wumpus has been defined before\ntransparent = Bool(\"transparent\")\n\n# Wumpuses are numpuses\n# wumpus has been defined before\nnumpus = Bool(\"numpus\")\n\n# Every numpus is not kind\n# numpus has been defined before\nkind = Bool(\"kind\")\n\n# Numpuses are tumpuses\n# numpus has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Each tumpus is not bright\n# tumpus has been defined before\nbright = Bool(\"bright\")\n\n# Tumpuses are yumpuses\n# tumpus has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Every yumpus is not liquid\n# yumpus has been defined before\nliquid = Bool(\"liquid\")\n\n# Yumpuses are dumpuses\n# yumpus has been defined before\ndumpus = Bool(\"dumpus\")\n\n# Each dumpus is not happy\n# dumpus has been defined before\n# happy has been defined before\n\n# Dumpuses are zumpuses\n# dumpus has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Every zumpus is earthy\n# zumpus has been defined before\nearthy = Bool(\"earthy\")\n\n# Each zumpus is a jompus\n# zumpus has been defined before\njompus = Bool(\"jompus\")\n\n# Stella is a wumpus\nstella = Bool(\"stella\")\n# wumpus has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every rompus is orange\nsolver.add(Implies(rompus, orange))\n\n# Every rompus is an impus\nsolver.add(Implies(rompus, impus))\n\n# Vumpuses are happy\nsolver.add(Implies(vumpus, happy))\n\n# Every impus is spicy\nsolver.add(Implies(impus, spicy))\n\n# Every impus is a wumpus\nsolver.add(Implies(impus, wumpus))\n\n# Wumpuses are transparent\nsolver.add(Implies(wumpus, transparent))\n\n# Wumpuses are numpuses\nsolver.add(Implies(wumpus, numpus))\n\n# Every numpus is not kind\nsolver.add(Implies(numpus, Not(kind)))\n\n# Numpuses are tumpuses\nsolver.add(Implies(numpus, tumpus))\n\n# Each tumpus is not bright\nsolver.add(Implies(tumpus, Not(bright)))\n\n# Tumpuses are yumpuses\nsolver.add(Implies(tumpus, yumpus))\n\n# Every yumpus is not liquid\nsolver.add(Implies(yumpus, Not(liquid)))\n\n# Yumpuses are dumpuses\nsolver.add(Implies(yumpus, dumpus))\n\n# Each dumpus is not happy\nsolver.add(Implies(dumpus, Not(happy)))\n\n# Dumpuses are zumpuses\nsolver.add(Implies(dumpus, zumpus))\n\n# Every zumpus is earthy\nsolver.add(Implies(zumpus, earthy))\n\n# Each zumpus is a jompus\nsolver.add(Implies(zumpus, jompus))\n\n# Stella is a wumpus\nsolver.add(Implies(stella, wumpus))\n\n# Create facts in the problem\nsolver.add(stella)\n\n# Create statements to be checked\n# Stella is happy\nsolver.add(stella, happy)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_7",
    "context": "Every rompus is orange. Every rompus is an impus. Vumpuses are happy. Every impus is spicy. Every impus is a wumpus. Wumpuses are transparent. Wumpuses are numpuses. Every numpus is not kind. Numpuses are tumpuses. Each tumpus is not bright. Tumpuses are yumpuses. Every yumpus is not liquid. Yumpuses are dumpuses. Each dumpus is not happy. Dumpuses are zumpuses. Every zumpus is earthy. Each zumpus is a jompus. Stella is a wumpus.",
    "question": "Is the following statement true or false? Stella is happy.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every rompus is orange\nrompus = Bool(\"rompus\")\norange = Bool(\"orange\")\n\n# Every rompus is an impus\n# rompus has been defined before\nimpus = Bool(\"impus\")\n\n# Vumpuses are happy\nvumpus = Bool(\"vumpus\")\nhappy = Bool(\"happy\")\n\n# Every impus is spicy\n# impus has been defined before\nspicy = Bool(\"spicy\")\n\n# Every impus is a wumpus\n# impus has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Wumpuses are transparent\n# wumpus has been defined before\ntransparent = Bool(\"transparent\")\n\n# Wumpuses are numpuses\n# wumpus has been defined before\nnumpus = Bool(\"numpus\")\n\n# Every numpus is not kind\n# numpus has been defined before\nkind = Bool(\"kind\")\n\n# Numpuses are tumpuses\n# numpus has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Each tumpus is not bright\n# tumpus has been defined before\nbright = Bool(\"bright\")\n\n# Tumpuses are yumpuses\n# tumpus has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Every yumpus is not liquid\n# yumpus has been defined before\nliquid = Bool(\"liquid\")\n\n# Yumpuses are dumpuses\n# yumpus has been defined before\ndumpus = Bool(\"dumpus\")\n\n# Each dumpus is not happy\n# dumpus has been defined before\nhappy = Bool(\"happy\")\n\n# Dumpuses are zumpuses\n# dumpus has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Every zumpus is earthy\n# zumpus has been defined before\nearthy = Bool(\"earthy\")\n\n# Each zumpus is a jompus\n# zumpus has been defined before\njompus = Bool(\"jompus\")\n\n# Stella is a wumpus\nstella = Bool(\"stella\")\n# wumpus has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every rompus is orange\nsolver.add(Implies(rompus, orange))\n\n# Every rompus is an impus\nsolver.add(Implies(rompus, impus))\n\n# Vumpuses are happy\nsolver.add(Implies(vumpus, happy))\n\n# Every impus is spicy\nsolver.add(Implies(impus, spicy))\n\n# Every impus is a wumpus\nsolver.add(Implies(impus, wumpus))\n\n# Wumpuses are transparent\nsolver.add(Implies(wumpus, transparent))\n\n# Wumpuses are numpuses\nsolver.add(Implies(wumpus, numpus))\n\n# Every numpus is not kind\nsolver.add(Implies(numpus, Not(kind)))\n\n# Numpuses are tumpuses\nsolver.add(Implies(numpus, tumpus))\n\n# Each tumpus is not bright\nsolver.add(Implies(tumpus, Not(bright)))\n\n# Tumpuses are yumpuses\nsolver.add(Implies(tumpus, yumpus))\n\n# Every yumpus is not liquid\nsolver.add(Implies(yumpus, Not(liquid)))\n\n# Yumpuses are dumpuses\nsolver.add(Implies(yumpus, dumpus))\n\n# Each dumpus is not happy\nsolver.add(Implies(dumpus, Not(happy)))\n\n# Dumpuses are zumpuses\nsolver.add(Implies(dumpus, zumpus))\n\n# Every zumpus is earthy\nsolver.add(Implies(zumpus, earthy))\n\n# Each zumpus is a jompus\nsolver.add(Implies(zumpus, jompus))\n\n# Stella is a wumpus\nsolver.add(Implies(stella, wumpus))\n\n# Create facts in the problem\nsolver.add(stella)\n\n# Create statements to be checked\n# Stella is happy\nsolver.add(stella, happy)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_1",
    "context": "Jompuses are not shy. Jompuses are yumpuses. Each yumpus is aggressive. Each yumpus is a dumpus. Dumpuses are not wooden. Dumpuses are wumpuses. Wumpuses are red. Every wumpus is an impus. Each impus is opaque. Impuses are tumpuses. Numpuses are sour. Tumpuses are not sour. Tumpuses are vumpuses. Vumpuses are earthy. Every vumpus is a zumpus. Zumpuses are small. Zumpuses are rompuses. Max is a yumpus.",
    "question": "Is the following statement true or false? Max is sour.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Jompuses are not shy\njompus = Bool(\"jompus\")\nshy = Bool(\"shy\")\n\n# Jompuses are yumpuses\n# Jompuses has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Each yumpus is aggressive\naggressive = Bool(\"aggressive\")\n# Each yumpus is a dumpus\ndumpus = Bool(\"dumpus\")\n\n# Dumpuses are not wooden\n# Dumpuses has been defined before\nwooden = Bool(\"wooden\")\n\n# Dumpuses are wumpuses\n# Dumpuses has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Wumpuses are red\n# Wumpuses has been defined before\nred = Bool(\"red\")\n\n# Every wumpus is an impus\nimpus = Bool(\"impus\")\n# Each impus is opaque\nopaque = Bool(\"opaque\")\n\n# Impuses are tumpuses\n# Impuses has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Numpuses are sour\nnumpus = Bool(\"numpus\")\nsour = Bool(\"sour\")\n\n# Tumpuses are not sour\n# Tumpuses has been defined before\n# Sour has been defined before\n\n# Tumpuses are vumpuses\n# Tumpuses has been defined before\nvumpus = Bool(\"vumpus\")\n\n# Vumpuses are earthy\n# Vumpuses has been defined before\nearthy = Bool(\"earthy\")\n\n# Every vumpus is a zumpus\nzumpus = Bool(\"zumpus\")\n# Zumpuses are small\n# Zumpuses has been defined before\nsmall = Bool(\"small\")\n# Zumpuses are rompuses\n# Zumpuses has been defined before\nrompus = Bool(\"rompus\")\n\n# Max is a yumpus\nmax = Bool(\"max\")\n# Yumpuses has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Jompuses are not shy\nsolver.add(Implies(jompus, Not(shy)))\n# Jompuses are yumpuses\nsolver.add(Implies(jompus, yumpus))\n# Each yumpus is aggressive\nsolver.add(Implies(yumpus, aggressive))\n# Each yumpus is a dumpus\nsolver.add(Implies(yumpus, dumpus))\n# Dumpuses are not wooden\nsolver.add(Implies(dumpus, Not(wooden)))\n# Dumpuses are wumpuses\nsolver.add(Implies(dumpus, wumpus))\n# Wumpuses are red\nsolver.add(Implies(wumpus, red))\n# Every wumpus is an impus\nsolver.add(Implies(wumpus, impus))\n# Each impus is opaque\nsolver.add(Implies(impus, opaque))\n# Impuses are tumpuses\nsolver.add(Implies(impus, tumpus))\n# Numpuses are sour\nsolver.add(Implies(numpus, sour))\n# Tumpuses are not sour\nsolver.add(Implies(tumpus, Not(sour)))\n# Tumpuses are vumpuses\nsolver.add(Implies(tumpus, vumpus))\n# Vumpuses are earthy\nsolver.add(Implies(vumpus, earthy))\n# Every vumpus is a zumpus\nsolver.add(Implies(vumpus, zumpus))\n# Zumpuses are small\nsolver.add(Implies(zumpus, small))\n# Zumpuses are rompuses\nsolver.add(Implies(zumpus, rompus))\n# Max is a yumpus\nsolver.add(Implies(max, yumpus))\n\n# Create facts in the problem\nsolver.add(max)\n\n# Create statements to be checked\n# Max is sour\nsolver.add(max, sour)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_2",
    "context": "Every tumpus is not angry. Tumpuses are rompuses. Every numpus is not bright. Rompuses are not luminous. Rompuses are yumpuses. Yumpuses are transparent. Yumpuses are zumpuses. Each zumpus is not bitter. Zumpuses are impuses. Impuses are red. Each impus is a dumpus. Every dumpus is happy. Each dumpus is a vumpus. Vumpuses are bright. Every vumpus is a jompus. Jompuses are large. Each jompus is a wumpus. Stella is a yumpus.",
    "question": "Is the following statement true or false? Stella is bright.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every tumpus is not angry\ntumpus = Bool(\"tumpus\")\nangry = Bool(\"angry\")\n\n# Tumpuses are rompuses\n# Tumpuses has been defined before\nrompus = Bool(\"rompus\")\n\n# Every numpus is not bright\nnumpus = Bool(\"numpus\")\nbright = Bool(\"bright\")\n\n# Rompuses are not luminous\n# Rompuses has been defined before\nluminous = Bool(\"luminous\")\n\n# Rompuses are yumpuses\n# Rompuses has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Yumpuses are transparent\n# Yumpuses has been defined before\ntransparent = Bool(\"transparent\")\n\n# Yumpuses are zumpuses\n# Yumpuses has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Each zumpus is not bitter\n# Zumpuses has been defined before\nbitter = Bool(\"bitter\")\n\n# Zumpuses are impuses\n# Zumpuses has been defined before\nimpus = Bool(\"impus\")\n\n# Impuses are red\n# Impuses has been defined before\nred = Bool(\"red\")\n\n# Each impus is a dumpus\n# Impuses has been defined before\ndumpus = Bool(\"dumpus\")\n\n# Every dumpus is happy\n# Dumpus has been defined before\nhappy = Bool(\"happy\")\n\n# Each dumpus is a vumpus\n# Dumpus has been defined before\nvumpus = Bool(\"vumpus\")\n\n# Vumpuses are bright\n# Vumpuses has been defined before\n# Bright has been defined before\n\n# Every vumpus is a jompus\n# Vumpuses has been defined before\njompus = Bool(\"jompus\")\n\n# Jompuses are large\n# Jompuses has been defined before\nlarge = Bool(\"large\")\n\n# Each jompus is a wumpus\n# Jompuses has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Stella is a yumpus\nstella = Bool(\"stella\")\n# Yumpuses has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every tumpus is not angry\nsolver.add(Implies(tumpus, Not(angry)))\n\n# Tumpuses are rompuses\nsolver.add(Implies(tumpus, rompus))\n\n# Every numpus is not bright\nsolver.add(Implies(numpus, Not(bright)))\n\n# Rompuses are not luminous\nsolver.add(Implies(rompus, Not(luminous)))\n\n# Rompuses are yumpuses\nsolver.add(Implies(rompus, yumpus))\n\n# Yumpuses are transparent\nsolver.add(Implies(yumpus, transparent))\n\n# Yumpuses are zumpuses\nsolver.add(Implies(yumpus, zumpus))\n\n# Each zumpus is not bitter\nsolver.add(Implies(zumpus, Not(bitter)))\n\n# Zumpuses are impuses\nsolver.add(Implies(zumpus, impus))\n\n# Impuses are red\nsolver.add(Implies(impus, red))\n\n# Each impus is a dumpus\nsolver.add(Implies(impus, dumpus))\n\n# Every dumpus is happy\nsolver.add(Implies(dumpus, happy))\n\n# Each dumpus is a vumpus\nsolver.add(Implies(dumpus, vumpus))\n\n# Vumpuses are bright\nsolver.add(Implies(vumpus, bright))\n\n# Every vumpus is a jompus\nsolver.add(Implies(vumpus, jompus))\n\n# Jompuses are large\nsolver.add(Implies(jompus, large))\n\n# Each jompus is a wumpus\nsolver.add(Implies(jompus, wumpus))\n\n# Stella is a yumpus\nsolver.add(Implies(stella, yumpus))\n\n# Create facts in the problem\nsolver.add(stella)\n\n# Create statements to be checked\n# Stella is bright\nsolver.add(stella, bright)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_3",
    "context": "Vumpuses are floral. Vumpuses are tumpuses. Tumpuses are brown. Each tumpus is a wumpus. Wumpuses are small. Each wumpus is a rompus. Each zumpus is metallic. Every rompus is happy. Rompuses are impuses. Each impus is amenable. Each impus is a dumpus. Every dumpus is not metallic. Dumpuses are numpuses. Each numpus is bitter. Each numpus is a jompus. Every jompus is cold. Each jompus is a yumpus. Wren is a tumpus.",
    "question": "Is the following statement true or false? Wren is not metallic.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Vumpuses are floral\nvumpus = Bool(\"vumpus\")\nfloral = Bool(\"floral\")\n\n# Vumpuses are tumpuses\n# Vumpuses has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Tumpuses are brown\n# Tumpuses has been defined before\nbrown = Bool(\"brown\")\n\n# Each tumpus is a wumpus\n# Tumpuses has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Wumpuses are small\n# Wumpuses has been defined before\nsmall = Bool(\"small\")\n\n# Each wumpus is a rompus\n# Wumpuses has been defined before\nrompus = Bool(\"rompus\")\n\n# Each zumpus is metallic\n# Zumpuses has been defined before\nmetallic = Bool(\"metallic\")\n\n# Every rompus is happy\nrompus = Bool(\"rompus\")\nhappy = Bool(\"happy\")\n\n# Rompuses are impuses\n# Rompuses has been defined before\nimpus = Bool(\"impus\")\n\n# Each impus is amenable\n# Impus has been defined before\namenable = Bool(\"amenable\")\n\n# Each impus is a dumpus\n# Impus has been defined before\ndumpus = Bool(\"dumpus\")\n\n# Every dumpus is not metallic\n# Dumpuses has been defined before\nmetallic = Bool(\"metallic\")\n\n# Dumpuses are numpuses\n# Dumpuses has been defined before\nnumpus = Bool(\"numpus\")\n\n# Each numpus is bitter\n# Numpus has been defined before\nbitter = Bool(\"bitter\")\n\n# Each numpus is a jompus\n# Numpus has been defined before\njompus = Bool(\"jompus\")\n\n# Every jompus is cold\n# Jompus has been defined before\ncold = Bool(\"cold\")\n\n# Each jompus is a yumpus\n# Jompus has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Wren is a tumpus\nwren = Bool(\"wren\")\n# Tumpuses has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Vumpuses are floral\nsolver.add(Implies(vumpus, floral))\n\n# Vumpuses are tumpuses\nsolver.add(Implies(vumpus, tumpus))\n\n# Tumpuses are brown\nsolver.add(Implies(tumpus, brown))\n\n# Each tumpus is a wumpus\nsolver.add(Implies(tumpus, wumpus))\n\n# Wumpuses are small\nsolver.add(Implies(wumpus, small))\n\n# Each wumpus is a rompus\nsolver.add(Implies(wumpus, rompus))\n\n# Each zumpus is metallic\nsolver.add(Implies(zumpus, metallic))\n\n# Every rompus is happy\nsolver.add(Implies(rompus, happy))\n\n# Rompuses are impuses\nsolver.add(Implies(rompus, impus))\n\n# Each impus is amenable\nsolver.add(Implies(impus, amenable))\n\n# Each impus is a dumpus\nsolver.add(Implies(impus, dumpus))\n\n# Every dumpus is not metallic\nsolver.add(Implies(dumpus, Not(metallic)))\n\n# Dumpuses are numpuses\nsolver.add(Implies(dumpus, numpus))\n\n# Each numpus is bitter\nsolver.add(Implies(numpus, bitter))\n\n# Each numpus is a jompus\nsolver.add(Implies(numpus, jompus))\n\n# Every jompus is cold\nsolver.add(Implies(jompus, cold))\n\n# Each jompus is a yumpus\nsolver.add(Implies(jompus, yumpus))\n\n# Wren is a tumpus\nsolver.add(Implies(wren, tumpus))\n\n# Create facts in the problem\nsolver.add(wren)\n\n# Create statements to be checked\n# Wren is not metallic\nsolver.add(wren, Not(metallic))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_3",
    "context": "Vumpuses are floral. Vumpuses are tumpuses. Tumpuses are brown. Each tumpus is a wumpus. Wumpuses are small. Each wumpus is a rompus. Each zumpus is metallic. Every rompus is happy. Rompuses are impuses. Each impus is amenable. Each impus is a dumpus. Every dumpus is not metallic. Dumpuses are numpuses. Each numpus is bitter. Each numpus is a jompus. Every jompus is cold. Each jompus is a yumpus. Wren is a tumpus.",
    "question": "Is the following statement true or false? Wren is not metallic.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Vumpuses are floral\nvumpus = Bool(\"vumpus\")\nfloral = Bool(\"floral\")\n\n# Vumpuses are tumpuses\n# Vumpuses has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Tumpuses are brown\n# Tumpuses has been defined before\nbrown = Bool(\"brown\")\n\n# Each tumpus is a wumpus\n# Tumpuses has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Wumpuses are small\n# Wumpuses has been defined before\nsmall = Bool(\"small\")\n\n# Each wumpus is a rompus\n# Wumpuses has been defined before\nrompus = Bool(\"rompus\")\n\n# Each zumpus is metallic\n# Zumpuses has been defined before\nzumpus = Bool(\"zumpus\")\nmetallic = Bool(\"metallic\")\n\n# Every rompus is happy\nrompus = Bool(\"rompus\")\nhappy = Bool(\"happy\")\n\n# Rompuses are impuses\n# Rompuses has been defined before\nimpus = Bool(\"impus\")\n\n# Each impus is amenable\n# Impus has been defined before\namenable = Bool(\"amenable\")\n\n# Each impus is a dumpus\n# Impus has been defined before\ndumpus = Bool(\"dumpus\")\n\n# Every dumpus is not metallic\n# Dumpuses has been defined before\nmetallic = Bool(\"metallic\")\n\n# Dumpuses are numpuses\n# Dumpuses has been defined before\nnumpus = Bool(\"numpus\")\n\n# Each numpus is bitter\n# Numpus has been defined before\nbitter = Bool(\"bitter\")\n\n# Each numpus is a jompus\n# Numpus has been defined before\njompus = Bool(\"jompus\")\n\n# Every jompus is cold\n# Jompus has been defined before\ncold = Bool(\"cold\")\n\n# Each jompus is a yumpus\n# Jompus has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Wren is a tumpus\nwren = Bool(\"wren\")\n# Tumpuses has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Vumpuses are floral\nsolver.add(Implies(vumpus, floral))\n\n# Vumpuses are tumpuses\nsolver.add(Implies(vumpus, tumpus))\n\n# Tumpuses are brown\nsolver.add(Implies(tumpus, brown))\n\n# Each tumpus is a wumpus\nsolver.add(Implies(tumpus, wumpus))\n\n# Wumpuses are small\nsolver.add(Implies(wumpus, small))\n\n# Each wumpus is a rompus\nsolver.add(Implies(wumpus, rompus))\n\n# Each zumpus is metallic\nsolver.add(Implies(zumpus, metallic))\n\n# Every rompus is happy\nsolver.add(Implies(rompus, happy))\n\n# Rompuses are impuses\nsolver.add(Implies(rompus, impus))\n\n# Each impus is amenable\nsolver.add(Implies(impus, amenable))\n\n# Each impus is a dumpus\nsolver.add(Implies(impus, dumpus))\n\n# Every dumpus is not metallic\nsolver.add(Implies(dumpus, Not(metallic)))\n\n# Dumpuses are numpuses\nsolver.add(Implies(dumpus, numpus))\n\n# Each numpus is bitter\nsolver.add(Implies(numpus, bitter))\n\n# Each numpus is a jompus\nsolver.add(Implies(numpus, jompus))\n\n# Every jompus is cold\nsolver.add(Implies(jompus, cold))\n\n# Each jompus is a yumpus\nsolver.add(Implies(jompus, yumpus))\n\n# Wren is a tumpus\nsolver.add(Implies(wren, tumpus))\n\n# Create facts in the problem\nsolver.add(wren)\n\n# Create statements to be checked\n# Wren is not metallic\nsolver.add(Not(metallic))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_4",
    "context": "Rompuses are spicy. Every rompus is an impus. Yumpuses are not small. Impuses are orange. Impuses are zumpuses. Zumpuses are not hot. Zumpuses are numpuses. Numpuses are metallic. Numpuses are wumpuses. Every wumpus is not kind. Each wumpus is a dumpus. Each dumpus is not bright. Every dumpus is a jompus. Jompuses are small. Jompuses are vumpuses. Each vumpus is not shy. Every vumpus is a tumpus. Alex is a zumpus.",
    "question": "Is the following statement true or false? Alex is not small.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Rompuses are spicy\nrompus = Bool(\"rompus\")\nspicy = Bool(\"spicy\")\n\n# Every rompus is an impus\nrompus = Bool(\"rompus\")\nimpus = Bool(\"impus\")\n\n# Yumpuses are not small\nyumpus = Bool(\"yumpus\")\nsmall = Bool(\"small\")\n\n# Impuses are orange\nimpus = Bool(\"impus\")\norange = Bool(\"orange\")\n\n# Impuses are zumpuses\nzumpus = Bool(\"zumpus\")\n\n# Zumpuses are not hot\nhot = Bool(\"hot\")\n\n# Zumpuses are numpuses\nnumpus = Bool(\"numpus\")\n\n# Numpuses are metallic\nnumpus = Bool(\"numpus\")\nmetallic = Bool(\"metallic\")\n\n# Numpuses are wumpuses\nwumpus = Bool(\"wumpus\")\n\n# Every wumpus is not kind\nwumpus = Bool(\"wumpus\")\nkind = Bool(\"kind\")\n\n# Each wumpus is a dumpus\ndumpus = Bool(\"dumpus\")\n\n# Each dumpus is not bright\ndumpus = Bool(\"dumpus\")\nbright = Bool(\"bright\")\n\n# Every dumpus is a jompus\ndumpus = Bool(\"dumpus\")\njompus = Bool(\"jompus\")\n\n# Jompuses are small\njompus = Bool(\"jompus\")\nsmall = Bool(\"small\")\n\n# Jompuses are vumpuses\nvumpus = Bool(\"vumpus\")\n\n# Each vumpus is not shy\nvumpus = Bool(\"vumpus\")\nshy = Bool(\"shy\")\n\n# Every vumpus is a tumpus\nvumpus = Bool(\"vumpus\")\ntumpus = Bool(\"tumpus\")\n\n# Alex is a zumpus\nalex = Bool(\"alex\")\nzumpus = Bool(\"zumpus\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Rompuses are spicy\nsolver.add(Implies(rompus, spicy))\n\n# Every rompus is an impus\nsolver.add(Implies(rompus, impus))\n\n# Yumpuses are not small\nsolver.add(Implies(yumpus, Not(small)))\n\n# Impuses are orange\nsolver.add(Implies(impus, orange))\n\n# Impuses are zumpuses\nsolver.add(Implies(impus, zumpus))\n\n# Zumpuses are not hot\nsolver.add(Implies(zumpus, Not(hot)))\n\n# Zumpuses are numpuses\nsolver.add(Implies(zumpus, numpus))\n\n# Numpuses are metallic\nsolver.add(Implies(numpus, metallic))\n\n# Numpuses are wumpuses\nsolver.add(Implies(numpus, wumpus))\n\n# Every wumpus is not kind\nsolver.add(Implies(wumpus, Not(kind)))\n\n# Each wumpus is a dumpus\nsolver.add(Implies(wumpus, dumpus))\n\n# Each dumpus is not bright\nsolver.add(Implies(dumpus, Not(bright)))\n\n# Every dumpus is a jompus\nsolver.add(Implies(dumpus, jompus))\n\n# Jompuses are small\nsolver.add(Implies(jompus, small))\n\n# Jompuses are vumpuses\nsolver.add(Implies(jompus, vumpus))\n\n# Each vumpus is not shy\nsolver.add(Implies(vumpus, Not(shy)))\n\n# Every vumpus is a tumpus\nsolver.add(Implies(vumpus, tumpus))\n\n# Alex is a zumpus\nsolver.add(Implies(alex, zumpus))\n\n# Create facts in the problem\nsolver.add(alex)\n\n# Create statements to be checked\n# Alex is not small\nsolver.add(alex, Not(small))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_5",
    "context": "Rompuses are mean. Rompuses are zumpuses. Each zumpus is not happy. Each zumpus is a numpus. Each numpus is not temperate. Each numpus is a tumpus. Tumpuses are not large. Tumpuses are yumpuses. Every yumpus is earthy. Each yumpus is a jompus. Jompuses are blue. Every jompus is a wumpus. Wumpuses are not dull. Wumpuses are impuses. Each vumpus is dull. Impuses are sour. Impuses are dumpuses. Alex is a numpus.",
    "question": "Is the following statement true or false? Alex is not dull.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Rompuses are mean\nrompus = Bool(\"rompus\")\nmean = Bool(\"mean\")\n\n# Rompuses are zumpuses\n# Rompuses has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Each zumpus is not happy\n# Each zumpus is a numpus\n# Each numpus is not temperate\n# Each numpus is a tumpus\n# Tumpuses are not large\n# Tumpuses are yumpuses\n# Every yumpus is earthy\n# Each yumpus is a jompus\n# Jompuses are blue\n# Every jompus is a wumpus\n# Wumpuses are not dull\n# Wumpuses are impuses\n# Each vumpus is dull\n# Impuses are sour\n# Impuses are dumpuses\n# Alex is a numpus\nrompus = Bool(\"rompus\")\nmean = Bool(\"mean\")\nzumpus = Bool(\"zumpus\")\nhappy = Bool(\"happy\")\nnumpus = Bool(\"numpus\")\ntemperate = Bool(\"temperate\")\ntumpus = Bool(\"tumpus\")\nlarge = Bool(\"large\")\nyumpus = Bool(\"yumpus\")\nearthy = Bool(\"earthy\")\njompus = Bool(\"jompus\")\nblue = Bool(\"blue\")\nwumpus = Bool(\"wumpus\")\ndull = Bool(\"dull\")\nimpus = Bool(\"impus\")\nvumpus = Bool(\"vumpus\")\nsour = Bool(\"sour\")\ndumpus = Bool(\"dumpus\")\nalex = Bool(\"alex\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Rompuses are mean\nsolver.add(Implies(rompus, mean))\n# Rompuses are zumpuses\nsolver.add(Implies(rompus, zumpus))\n# Each zumpus is not happy\nsolver.add(Implies(zumpus, Not(happy)))\n# Each zumpus is a numpus\nsolver.add(Implies(zumpus, numpus))\n# Each numpus is not temperate\nsolver.add(Implies(numpus, Not(temperate)))\n# Each numpus is a tumpus\nsolver.add(Implies(numpus, tumpus))\n# Tumpuses are not large\nsolver.add(Implies(tumpus, Not(large)))\n# Tumpuses are yumpuses\nsolver.add(Implies(tumpus, yumpus))\n# Every yumpus is earthy\nsolver.add(Implies(yumpus, earthy))\n# Each yumpus is a jompus\nsolver.add(Implies(yumpus, jompus))\n# Jompuses are blue\nsolver.add(Implies(jompus, blue))\n# Every jompus is a wumpus\nsolver.add(Implies(jompus, wumpus))\n# Wumpuses are not dull\nsolver.add(Implies(wumpus, Not(dull)))\n# Wumpuses are impuses\nsolver.add(Implies(wumpus, impus))\n# Each vumpus is dull\nsolver.add(Implies(vumpus, dull))\n# Impuses are sour\nsolver.add(Implies(impus, sour))\n# Impuses are dumpuses\nsolver.add(Implies(impus, dumpus))\n# Alex is a numpus\nsolver.add(Implies(alex, numpus))\n\n# Create facts in the problem\nsolver.add(alex)\n\n# Create statements to be checked\n# Alex is not dull\nsolver.add(alex, Not(dull))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_6",
    "context": "Every tumpus is large. Tumpuses are wumpuses. Each wumpus is not opaque. Every dumpus is not dull. Every wumpus is a rompus. Every rompus is brown. Each rompus is a vumpus. Each vumpus is temperate. Vumpuses are jompuses. Jompuses are dull. Jompuses are numpuses. Every numpus is liquid. Each numpus is an impus. Impuses are spicy. Every impus is a yumpus. Every yumpus is not nervous. Every yumpus is a zumpus. Wren is a tumpus.",
    "question": "Is the following statement true or false? Wren is dull.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every tumpus is large\ntumpus = Bool(\"tumpus\")\nlarge = Bool(\"large\")\n\n# Tumpuses are wumpuses\n# Tumpuses has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Each wumpus is not opaque\n# Wumpuses has been defined before\nopaque = Bool(\"opaque\")\n\n# Every dumpus is not dull\ndumpus = Bool(\"dumpus\")\ndull = Bool(\"dull\")\n\n# Every wumpus is a rompus\n# Wumpuses has been defined before\nrompus = Bool(\"rompus\")\n\n# Every rompus is brown\n# Rompus has been defined before\nbrown = Bool(\"brown\")\n\n# Each rompus is a vumpus\n# Rompus has been defined before\nvumpus = Bool(\"vumpus\")\n\n# Each vumpus is temperate\n# Vumpus has been defined before\ntemperate = Bool(\"temperate\")\n\n# Vumpuses are jompuses\n# Vumpus has been defined before\njompus = Bool(\"jompus\")\n\n# Jompuses are dull\n# Jompus has been defined before\n# Dull has been defined before\n\n# Jompuses are numpuses\n# Jompus has been defined before\nnumpus = Bool(\"numpus\")\n\n# Every numpus is liquid\n# Numpus has been defined before\nliquid = Bool(\"liquid\")\n\n# Each numpus is an impus\n# Numpus has been defined before\nimpus = Bool(\"impus\")\n\n# Impuses are spicy\n# Impus has been defined before\nspicy = Bool(\"spicy\")\n\n# Every impus is a yumpus\n# Impus has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Every yumpus is not nervous\n# Yumpus has been defined before\nnervous = Bool(\"nervous\")\n\n# Every yumpus is a zumpus\n# Yumpus has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Wren is a tumpus\nwren = Bool(\"wren\")\n# Tumpus has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every tumpus is large\nsolver.add(Implies(tumpus, large))\n\n# Tumpuses are wumpuses\nsolver.add(Implies(tumpus, wumpus))\n\n# Each wumpus is not opaque\nsolver.add(Implies(wumpus, Not(opaque)))\n\n# Every dumpus is not dull\nsolver.add(Implies(dumpus, Not(dull)))\n\n# Every wumpus is a rompus\nsolver.add(Implies(wumpus, rompus))\n\n# Every rompus is brown\nsolver.add(Implies(rompus, brown))\n\n# Each rompus is a vumpus\nsolver.add(Implies(rompus, vumpus))\n\n# Each vumpus is temperate\nsolver.add(Implies(vumpus, temperate))\n\n# Vumpuses are jompuses\nsolver.add(Implies(vumpus, jompus))\n\n# Jompuses are dull\nsolver.add(Implies(jompus, dull))\n\n# Jompuses are numpuses\nsolver.add(Implies(jompus, numpus))\n\n# Every numpus is liquid\nsolver.add(Implies(numpus, liquid))\n\n# Each numpus is an impus\nsolver.add(Implies(numpus, impus))\n\n# Impuses are spicy\nsolver.add(Implies(impus, spicy))\n\n# Every impus is a yumpus\nsolver.add(Implies(impus, yumpus))\n\n# Every yumpus is not nervous\nsolver.add(Implies(yumpus, Not(nervous)))\n\n# Every yumpus is a zumpus\nsolver.add(Implies(yumpus, zumpus))\n\n# Wren is a tumpus\nsolver.add(Implies(wren, tumpus))\n\n# Create facts in the problem\nsolver.add(wren)\n\n# Create statements to be checked\n# Wren is dull\nsolver.add(wren, dull)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_7",
    "context": "Every rompus is orange. Every rompus is an impus. Vumpuses are happy. Every impus is spicy. Every impus is a wumpus. Wumpuses are transparent. Wumpuses are numpuses. Every numpus is not kind. Numpuses are tumpuses. Each tumpus is not bright. Tumpuses are yumpuses. Every yumpus is not liquid. Yumpuses are dumpuses. Each dumpus is not happy. Dumpuses are zumpuses. Every zumpus is earthy. Each zumpus is a jompus. Stella is a wumpus.",
    "question": "Is the following statement true or false? Stella is happy.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every rompus is orange\nrompus = Bool(\"rompus\")\norange = Bool(\"orange\")\n\n# Every rompus is an impus\n# rompus has been defined before\nimpus = Bool(\"impus\")\n\n# Vumpuses are happy\nvumpus = Bool(\"vumpus\")\nhappy = Bool(\"happy\")\n\n# Every impus is spicy\n# impus has been defined before\nspicy = Bool(\"spicy\")\n\n# Every impus is a wumpus\n# impus has been defined before\n# wumpus has been defined before\n\n# Wumpuses are transparent\n# wumpus has been defined before\ntransparent = Bool(\"transparent\")\n\n# Wumpuses are numpuses\n# wumpus has been defined before\nnumpus = Bool(\"numpus\")\n\n# Every numpus is not kind\n# numpus has been defined before\nkind = Bool(\"kind\")\n\n# Numpuses are tumpuses\n# numpus has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Each tumpus is not bright\n# tumpus has been defined before\nbright = Bool(\"bright\")\n\n# Tumpuses are yumpuses\n# tumpus has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Every yumpus is not liquid\n# yumpus has been defined before\nliquid = Bool(\"liquid\")\n\n# Yumpuses are dumpuses\n# yumpus has been defined before\ndumpus = Bool(\"dumpus\")\n\n# Each dumpus is not happy\n# dumpus has been defined before\n# happy has been defined before\n\n# Dumpuses are zumpuses\n# dumpus has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Every zumpus is earthy\n# zumpus has been defined before\nearthy = Bool(\"earthy\")\n\n# Each zumpus is a jompus\n# zumpus has been defined before\njompus = Bool(\"jompus\")\n\n# Stella is a wumpus\nstella = Bool(\"stella\")\n# wumpus has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every rompus is orange\nsolver.add(Implies(rompus, orange))\n\n# Every rompus is an impus\nsolver.add(Implies(rompus, impus))\n\n# Vumpuses are happy\nsolver.add(Implies(vumpus, happy))\n\n# Every impus is spicy\nsolver.add(Implies(impus, spicy))\n\n# Every impus is a wumpus\nsolver.add(Implies(impus, wumpus))\n\n# Wumpuses are transparent\nsolver.add(Implies(wumpus, transparent))\n\n# Wumpuses are numpuses\nsolver.add(Implies(wumpus, numpus))\n\n# Every numpus is not kind\nsolver.add(Implies(numpus, Not(kind)))\n\n# Numpuses are tumpuses\nsolver.add(Implies(numpus, tumpus))\n\n# Each tumpus is not bright\nsolver.add(Implies(tumpus, Not(bright)))\n\n# Tumpuses are yumpuses\nsolver.add(Implies(tumpus, yumpus))\n\n# Every yumpus is not liquid\nsolver.add(Implies(yumpus, Not(liquid)))\n\n# Yumpuses are dumpuses\nsolver.add(Implies(yumpus, dumpus))\n\n# Each dumpus is not happy\nsolver.add(Implies(dumpus, Not(happy)))\n\n# Dumpuses are zumpuses\nsolver.add(Implies(dumpus, zumpus))\n\n# Every zumpus is earthy\nsolver.add(Implies(zumpus, earthy))\n\n# Each zumpus is a jompus\nsolver.add(Implies(zumpus, jompus))\n\n# Stella is a wumpus\nsolver.add(Implies(stella, wumpus))\n\n# Create statements to be checked\n# Stella is happy\nsolver.add(stella, happy)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_7",
    "context": "Every rompus is orange. Every rompus is an impus. Vumpuses are happy. Every impus is spicy. Every impus is a wumpus. Wumpuses are transparent. Wumpuses are numpuses. Every numpus is not kind. Numpuses are tumpuses. Each tumpus is not bright. Tumpuses are yumpuses. Every yumpus is not liquid. Yumpuses are dumpuses. Each dumpus is not happy. Dumpuses are zumpuses. Every zumpus is earthy. Each zumpus is a jompus. Stella is a wumpus.",
    "question": "Is the following statement true or false? Stella is happy.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every rompus is orange\nrompus = Bool(\"rompus\")\norange = Bool(\"orange\")\n\n# Every rompus is an impus\n# rompus has been defined before\nimpus = Bool(\"impus\")\n\n# Vumpuses are happy\nvumpus = Bool(\"vumpus\")\nhappy = Bool(\"happy\")\n\n# Every impus is spicy\n# impus has been defined before\nspicy = Bool(\"spicy\")\n\n# Every impus is a wumpus\n# impus has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Wumpuses are transparent\n# wumpus has been defined before\ntransparent = Bool(\"transparent\")\n\n# Wumpuses are numpuses\n# wumpus has been defined before\nnumpus = Bool(\"numpus\")\n\n# Every numpus is not kind\n# numpus has been defined before\nkind = Bool(\"kind\")\n\n# Numpuses are tumpuses\n# numpus has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Each tumpus is not bright\n# tumpus has been defined before\nbright = Bool(\"bright\")\n\n# Tumpuses are yumpuses\n# tumpus has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Every yumpus is not liquid\n# yumpus has been defined before\nliquid = Bool(\"liquid\")\n\n# Yumpuses are dumpuses\n# yumpus has been defined before\ndumpus = Bool(\"dumpus\")\n\n# Each dumpus is not happy\n# dumpus has been defined before\nhappy = Bool(\"happy\")\n\n# Dumpuses are zumpuses\n# dumpus has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Every zumpus is earthy\n# zumpus has been defined before\nearthy = Bool(\"earthy\")\n\n# Each zumpus is a jompus\n# zumpus has been defined before\njompus = Bool(\"jompus\")\n\n# Stella is a wumpus\nstella = Bool(\"stella\")\n# wumpus has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every rompus is orange\nsolver.add(Implies(rompus, orange))\n\n# Every rompus is an impus\nsolver.add(Implies(rompus, impus))\n\n# Vumpuses are happy\nsolver.add(Implies(vumpus, happy))\n\n# Every impus is spicy\nsolver.add(Implies(impus, spicy))\n\n# Every impus is a wumpus\nsolver.add(Implies(impus, wumpus))\n\n# Wumpuses are transparent\nsolver.add(Implies(wumpus, transparent))\n\n# Wumpuses are numpuses\nsolver.add(Implies(wumpus, numpus))\n\n# Every numpus is not kind\nsolver.add(Implies(numpus, Not(kind)))\n\n# Numpuses are tumpuses\nsolver.add(Implies(numpus, tumpus))\n\n# Each tumpus is not bright\nsolver.add(Implies(tumpus, Not(bright)))\n\n# Tumpuses are yumpuses\nsolver.add(Implies(tumpus, yumpus))\n\n# Every yumpus is not liquid\nsolver.add(Implies(yumpus, Not(liquid)))\n\n# Yumpuses are dumpuses\nsolver.add(Implies(yumpus, dumpus))\n\n# Each dumpus is not happy\nsolver.add(Implies(dumpus, Not(happy)))\n\n# Dumpuses are zumpuses\nsolver.add(Implies(dumpus, zumpus))\n\n# Every zumpus is earthy\nsolver.add(Implies(zumpus, earthy))\n\n# Each zumpus is a jompus\nsolver.add(Implies(zumpus, jompus))\n\n# Stella is a wumpus\nsolver.add(Implies(stella, wumpus))\n\n# Create statements to be checked\n# Stella is happy\nsolver.add(stella, happy)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_8",
    "context": "Every jompus is sour. Each jompus is a rompus. Rompuses are not kind. Every rompus is a zumpus. Every zumpus is feisty. Zumpuses are tumpuses. Tumpuses are small. Tumpuses are wumpuses. Wumpuses are opaque. Wumpuses are impuses. Every yumpus is hot. Impuses are brown. Impuses are dumpuses. Dumpuses are not hot. Every dumpus is a vumpus. Each vumpus is dull. Vumpuses are numpuses. Alex is a zumpus.",
    "question": "Is the following statement true or false? Alex is hot.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every jompus is sour\njompus = Bool(\"jompus\")\nsour = Bool(\"sour\")\n\n# Each jompus is a rompus\n# jompus has been defined before\nrompus = Bool(\"rompus\")\n\n# Rompuses are not kind\n# Rompuses has been defined before\nkind = Bool(\"kind\")\n\n# Every rompus is a zumpus\n# Rompuses has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Every zumpus is feisty\n# Zumpuses has been defined before\nfeisty = Bool(\"feisty\")\n\n# Zumpuses are tumpuses\n# Zumpuses has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Tumpuses are small\n# Tumpuses has been defined before\nsmall = Bool(\"small\")\n\n# Tumpuses are wumpuses\n# Tumpuses has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Wumpuses are opaque\n# Wumpuses has been defined before\nopaque = Bool(\"opaque\")\n\n# Wumpuses are impuses\n# Wumpuses has been defined before\nimpus = Bool(\"impus\")\n\n# Every yumpus is hot\nyumpus = Bool(\"yumpus\")\nhot = Bool(\"hot\")\n\n# Impuses are brown\n# Impuses has been defined before\nbrown = Bool(\"brown\")\n\n# Impuses are dumpuses\n# Impuses has been defined before\ndumpus = Bool(\"dumpus\")\n\n# Dumpuses are not hot\n# Dumpuses has been defined before\n# Hot has been defined before\n\n# Every dumpus is a vumpus\ndumpus = Bool(\"dumpus\")\nvumpus = Bool(\"vumpus\")\n\n# Each vumpus is dull\n# Vumpuses has been defined before\ndull = Bool(\"dull\")\n\n# Vumpuses are numpuses\n# Vumpuses has been defined before\nnumpus = Bool(\"numpus\")\n\n# Alex is a zumpus\nalex = Bool(\"alex\")\n# Zumpuses has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every jompus is sour\nsolver.add(Implies(jompus, sour))\n\n# Each jompus is a rompus\nsolver.add(Implies(jompus, rompus))\n\n# Rompuses are not kind\nsolver.add(Implies(rompus, Not(kind)))\n\n# Every rompus is a zumpus\nsolver.add(Implies(rompus, zumpus))\n\n# Every zumpus is feisty\nsolver.add(Implies(zumpus, feisty))\n\n# Zumpuses are tumpuses\nsolver.add(Implies(zumpus, tumpus))\n\n# Tumpuses are small\nsolver.add(Implies(tumpus, small))\n\n# Tumpuses are wumpuses\nsolver.add(Implies(tumpus, wumpus))\n\n# Wumpuses are opaque\nsolver.add(Implies(wumpus, opaque))\n\n# Wumpuses are impuses\nsolver.add(Implies(wumpus, impus))\n\n# Every yumpus is hot\nsolver.add(Implies(yumpus, hot))\n\n# Impuses are brown\nsolver.add(Implies(impus, brown))\n\n# Impuses are dumpuses\nsolver.add(Implies(impus, dumpus))\n\n# Dumpuses are not hot\nsolver.add(Implies(dumpus, Not(hot)))\n\n# Every dumpus is a vumpus\nsolver.add(Implies(dumpus, vumpus))\n\n# Each vumpus is dull\nsolver.add(Implies(vumpus, dull))\n\n# Vumpuses are numpuses\nsolver.add(Implies(vumpus, numpus))\n\n# Alex is a zumpus\nsolver.add(Implies(alex, zumpus))\n\n# Create facts in the problem\nsolver.add(alex)\n\n# Create statements to be checked\n# Alex is hot\nsolver.add(alex, hot)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_9",
    "context": "Every dumpus is not shy. Each dumpus is a tumpus. Rompuses are not wooden. Tumpuses are opaque. Every tumpus is a wumpus. Wumpuses are not floral. Each wumpus is an impus. Impuses are bitter. Every impus is a vumpus. Vumpuses are small. Each vumpus is a numpus. Every numpus is wooden. Each numpus is a yumpus. Each yumpus is orange. Each yumpus is a jompus. Each jompus is amenable. Every jompus is a zumpus. Wren is a tumpus.",
    "question": "Is the following statement true or false? Wren is wooden.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every dumpus is not shy\ndumpus = Bool(\"dumpus\")\nshy = Bool(\"shy\")\n\n# Each dumpus is a tumpus\n# dumpus has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Rompuses are not wooden\nrompus = Bool(\"rompus\")\nwooden = Bool(\"wooden\")\n\n# Tumpuses are opaque\n# Tumpuses has been defined before\nopaque = Bool(\"opaque\")\n\n# Every tumpus is a wumpus\ntumpus = Bool(\"tumpus\")\nwumpus = Bool(\"wumpus\")\n\n# Wumpuses are not floral\n# Wumpuses has been defined before\nfloral = Bool(\"floral\")\n\n# Each wumpus is an impus\n# Wumpuses has been defined before\nimpus = Bool(\"impus\")\n\n# Impuses are bitter\n# Impuses has been defined before\nbitter = Bool(\"bitter\")\n\n# Every impus is a vumpus\nimpus = Bool(\"impus\")\nvumpus = Bool(\"vumpus\")\n\n# Vumpuses are small\n# Vumpuses has been defined before\nsmall = Bool(\"small\")\n\n# Each vumpus is a numpus\n# Vumpuses has been defined before\nnumpus = Bool(\"numpus\")\n\n# Every numpus is wooden\n# Numpus has been defined before\nwooden = Bool(\"wooden\")\n\n# Each numpus is a yumpus\n# Numpus has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Each yumpus is orange\n# Yumpus has been defined before\norange = Bool(\"orange\")\n\n# Each yumpus is a jompus\n# Yumpus has been defined before\njompus = Bool(\"jompus\")\n\n# Each jompus is amenable\n# Jompus has been defined before\namenable = Bool(\"amenable\")\n\n# Every jompus is a zumpus\n# Jompus has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Wren is a tumpus\nwren = Bool(\"wren\")\n# Tumpus has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every dumpus is not shy\nsolver.add(Implies(dumpus, Not(shy)))\n\n# Each dumpus is a tumpus\nsolver.add(Implies(dumpus, tumpus))\n\n# Rompuses are not wooden\nsolver.add(Implies(rompus, Not(wooden)))\n\n# Tumpuses are opaque\nsolver.add(Implies(tumpus, opaque))\n\n# Every tumpus is a wumpus\nsolver.add(Implies(tumpus, wumpus))\n\n# Wumpuses are not floral\nsolver.add(Implies(wumpus, Not(floral)))\n\n# Each wumpus is an impus\nsolver.add(Implies(wumpus, impus))\n\n# Impuses are bitter\nsolver.add(Implies(impus, bitter))\n\n# Every impus is a vumpus\nsolver.add(Implies(impus, vumpus))\n\n# Vumpuses are small\nsolver.add(Implies(vumpus, small))\n\n# Each vumpus is a numpus\nsolver.add(Implies(vumpus, numpus))\n\n# Every numpus is wooden\nsolver.add(Implies(numpus, wooden))\n\n# Each numpus is a yumpus\nsolver.add(Implies(numpus, yumpus))\n\n# Each yumpus is orange\nsolver.add(Implies(yumpus, orange))\n\n# Each yumpus is a jompus\nsolver.add(Implies(yumpus, jompus))\n\n# Each jompus is amenable\nsolver.add(Implies(jompus, amenable))\n\n# Every jompus is a zumpus\nsolver.add(Implies(jompus, zumpus))\n\n# Wren is a tumpus\nsolver.add(Implies(wren, tumpus))\n\n# Create facts in the problem\nsolver.add(wren)\n\n# Create statements to be checked\n# Wren is wooden\nsolver.add(wren, wooden)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_10",
    "context": "Every impus is earthy. Each impus is a jompus. Jompuses are small. Jompuses are rompuses. Rompuses are not amenable. Rompuses are wumpuses. Wumpuses are wooden. Wumpuses are zumpuses. Every zumpus is temperate. Every zumpus is a dumpus. Dumpuses are dull. Dumpuses are vumpuses. Every vumpus is not shy. Every yumpus is sweet. Vumpuses are numpuses. Numpuses are not sweet. Numpuses are tumpuses. Fae is a wumpus.",
    "question": "Is the following statement true or false? Fae is sweet.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every impus is earthy\nimpus = Bool(\"impus\")\nearthy = Bool(\"earthy\")\n\n# Each impus is a jompus\n# impus has been defined before\njompus = Bool(\"jompus\")\n\n# Jompuses are small\n# jompus has been defined before\nsmall = Bool(\"small\")\n\n# Jompuses are rompuses\n# jompus has been defined before\nrompus = Bool(\"rompus\")\n\n# Rompuses are not amenable\n# rompus has been defined before\namenable = Bool(\"amenable\")\n\n# Rompuses are wumpuses\n# rompus has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Wumpuses are wooden\n# wumpus has been defined before\nwooden = Bool(\"wooden\")\n\n# Wumpuses are zumpuses\n# wumpus has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Every zumpus is temperate\n# zumpus has been defined before\ntemperate = Bool(\"temperate\")\n\n# Every zumpus is a dumpus\n# zumpus has been defined before\ndumpus = Bool(\"dumpus\")\n\n# Dumpuses are dull\n# dumpus has been defined before\ndull = Bool(\"dull\")\n\n# Dumpuses are vumpuses\n# dumpus has been defined before\nvumpus = Bool(\"vumpus\")\n\n# Every vumpus is not shy\n# vumpus has been defined before\nshy = Bool(\"shy\")\n\n# Every yumpus is sweet\nyumpus = Bool(\"yumpus\")\nsweet = Bool(\"sweet\")\n\n# Vumpuses are numpuses\n# vumpus has been defined before\nnumpus = Bool(\"numpus\")\n\n# Numpuses are not sweet\n# numpus has been defined before\n# sweet has been defined before\n\n# Numpuses are tumpuses\n# numpus has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Fae is a wumpus\nfae = Bool(\"fae\")\n# Wumpuses has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every impus is earthy\nsolver.add(Implies(impus, earthy))\n\n# Each impus is a jompus\nsolver.add(Implies(impus, jompus))\n\n# Jompuses are small\nsolver.add(Implies(jompus, small))\n\n# Jompuses are rompuses\nsolver.add(Implies(jompus, rompus))\n\n# Rompuses are not amenable\nsolver.add(Implies(rompus, Not(amenable)))\n\n# Rompuses are wumpuses\nsolver.add(Implies(rompus, wumpus))\n\n# Wumpuses are wooden\nsolver.add(Implies(wumpus, wooden))\n\n# Wumpuses are zumpuses\nsolver.add(Implies(wumpus, zumpus))\n\n# Every zumpus is temperate\nsolver.add(Implies(zumpus, temperate))\n\n# Every zumpus is a dumpus\nsolver.add(Implies(zumpus, dumpus))\n\n# Dumpuses are dull\nsolver.add(Implies(dumpus, dull))\n\n# Dumpuses are vumpuses\nsolver.add(Implies(dumpus, vumpus))\n\n# Every vumpus is not shy\nsolver.add(Implies(vumpus, Not(shy)))\n\n# Every yumpus is sweet\nsolver.add(Implies(yumpus, sweet))\n\n# Vumpuses are numpuses\nsolver.add(Implies(vumpus, numpus))\n\n# Numpuses are not sweet\nsolver.add(Implies(numpus, Not(sweet)))\n\n# Numpuses are tumpuses\nsolver.add(Implies(numpus, tumpus))\n\n# Fae is a wumpus\nsolver.add(Implies(fae, wumpus))\n\n# Create facts in the problem\nsolver.add(fae)\n\n# Create statements to be checked\n# Fae is sweet\nsolver.add(fae, sweet)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_1",
    "context": "Jompuses are not shy. Jompuses are yumpuses. Each yumpus is aggressive. Each yumpus is a dumpus. Dumpuses are not wooden. Dumpuses are wumpuses. Wumpuses are red. Every wumpus is an impus. Each impus is opaque. Impuses are tumpuses. Numpuses are sour. Tumpuses are not sour. Tumpuses are vumpuses. Vumpuses are earthy. Every vumpus is a zumpus. Zumpuses are small. Zumpuses are rompuses. Max is a yumpus.",
    "question": "Is the following statement true or false? Max is sour.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Jompuses are not shy\njompus = Bool(\"jompus\")\nshy = Bool(\"shy\")\n\n# Jompuses are yumpuses\n# Jompuses has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Each yumpus is aggressive\naggressive = Bool(\"aggressive\")\n# Each yumpus is a dumpus\ndumpus = Bool(\"dumpus\")\n\n# Dumpuses are not wooden\n# Dumpuses has been defined before\nwooden = Bool(\"wooden\")\n\n# Dumpuses are wumpuses\n# Dumpuses has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Wumpuses are red\n# Wumpuses has been defined before\nred = Bool(\"red\")\n\n# Every wumpus is an impus\nimpus = Bool(\"impus\")\n# Each impus is opaque\nopaque = Bool(\"opaque\")\n\n# Impuses are tumpuses\n# Impuses has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Numpuses are sour\nnumpus = Bool(\"numpus\")\nsour = Bool(\"sour\")\n\n# Tumpuses are not sour\n# Tumpuses has been defined before\n# Sour has been defined before\n\n# Tumpuses are vumpuses\n# Tumpuses has been defined before\nvumpus = Bool(\"vumpus\")\n\n# Vumpuses are earthy\n# Vumpuses has been defined before\nearthy = Bool(\"earthy\")\n\n# Every vumpus is a zumpus\nzumpus = Bool(\"zumpus\")\n# Zumpuses are small\n# Zumpuses has been defined before\nsmall = Bool(\"small\")\n# Zumpuses are rompuses\n# Zumpuses has been defined before\nrompus = Bool(\"rompus\")\n\n# Max is a yumpus\nmax = Bool(\"max\")\n# Yumpuses has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Jompuses are not shy\nsolver.add(Implies(jompus, Not(shy)))\n# Jompuses are yumpuses\nsolver.add(Implies(jompus, yumpus))\n# Each yumpus is aggressive\nsolver.add(Implies(yumpus, aggressive))\n# Each yumpus is a dumpus\nsolver.add(Implies(yumpus, dumpus))\n# Dumpuses are not wooden\nsolver.add(Implies(dumpus, Not(wooden)))\n# Dumpuses are wumpuses\nsolver.add(Implies(dumpus, wumpus))\n# Wumpuses are red\nsolver.add(Implies(wumpus, red))\n# Every wumpus is an impus\nsolver.add(Implies(wumpus, impus))\n# Each impus is opaque\nsolver.add(Implies(impus, opaque))\n# Impuses are tumpuses\nsolver.add(Implies(impus, tumpus))\n# Numpuses are sour\nsolver.add(Implies(numpus, sour))\n# Tumpuses are not sour\nsolver.add(Implies(tumpus, Not(sour)))\n# Tumpuses are vumpuses\nsolver.add(Implies(tumpus, vumpus))\n# Vumpuses are earthy\nsolver.add(Implies(vumpus, earthy))\n# Every vumpus is a zumpus\nsolver.add(Implies(vumpus, zumpus))\n# Zumpuses are small\nsolver.add(Implies(zumpus, small))\n# Zumpuses are rompuses\nsolver.add(Implies(zumpus, rompus))\n# Max is a yumpus\nsolver.add(Implies(max, yumpus))\n\n# Create facts in the problem\nsolver.add(max)\n\n# Create statements to be checked\n# Max is sour\nsolver.add(max, sour)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_2",
    "context": "Every tumpus is not angry. Tumpuses are rompuses. Every numpus is not bright. Rompuses are not luminous. Rompuses are yumpuses. Yumpuses are transparent. Yumpuses are zumpuses. Each zumpus is not bitter. Zumpuses are impuses. Impuses are red. Each impus is a dumpus. Every dumpus is happy. Each dumpus is a vumpus. Vumpuses are bright. Every vumpus is a jompus. Jompuses are large. Each jompus is a wumpus. Stella is a yumpus.",
    "question": "Is the following statement true or false? Stella is bright.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every tumpus is not angry\ntumpus = Bool(\"tumpus\")\nangry = Bool(\"angry\")\n\n# Tumpuses are rompuses\n# Tumpuses has been defined before\nrompus = Bool(\"rompus\")\n\n# Every numpus is not bright\nnumpus = Bool(\"numpus\")\nbright = Bool(\"bright\")\n\n# Rompuses are not luminous\n# Rompuses has been defined before\nluminous = Bool(\"luminous\")\n\n# Rompuses are yumpuses\n# Rompuses has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Yumpuses are transparent\n# Yumpuses has been defined before\ntransparent = Bool(\"transparent\")\n\n# Yumpuses are zumpuses\n# Yumpuses has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Each zumpus is not bitter\n# Zumpuses has been defined before\nbitter = Bool(\"bitter\")\n\n# Zumpuses are impuses\n# Zumpuses has been defined before\nimpus = Bool(\"impus\")\n\n# Impuses are red\n# Impuses has been defined before\nred = Bool(\"red\")\n\n# Each impus is a dumpus\n# Impuses has been defined before\ndumpus = Bool(\"dumpus\")\n\n# Every dumpus is happy\n# Dumpus has been defined before\nhappy = Bool(\"happy\")\n\n# Each dumpus is a vumpus\n# Dumpus has been defined before\nvumpus = Bool(\"vumpus\")\n\n# Vumpuses are bright\n# Vumpuses has been defined before\n# Bright has been defined before\n\n# Every vumpus is a jompus\n# Vumpuses has been defined before\njompus = Bool(\"jompus\")\n\n# Jompuses are large\n# Jompuses has been defined before\nlarge = Bool(\"large\")\n\n# Each jompus is a wumpus\n# Jompuses has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Stella is a yumpus\nstella = Bool(\"stella\")\n# Yumpuses has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every tumpus is not angry\nsolver.add(Implies(tumpus, Not(angry)))\n\n# Tumpuses are rompuses\nsolver.add(Implies(tumpus, rompus))\n\n# Every numpus is not bright\nsolver.add(Implies(numpus, Not(bright)))\n\n# Rompuses are not luminous\nsolver.add(Implies(rompus, Not(luminous)))\n\n# Rompuses are yumpuses\nsolver.add(Implies(rompus, yumpus))\n\n# Yumpuses are transparent\nsolver.add(Implies(yumpus, transparent))\n\n# Yumpuses are zumpuses\nsolver.add(Implies(yumpus, zumpus))\n\n# Each zumpus is not bitter\nsolver.add(Implies(zumpus, Not(bitter)))\n\n# Zumpuses are impuses\nsolver.add(Implies(zumpus, impus))\n\n# Impuses are red\nsolver.add(Implies(impus, red))\n\n# Each impus is a dumpus\nsolver.add(Implies(impus, dumpus))\n\n# Every dumpus is happy\nsolver.add(Implies(dumpus, happy))\n\n# Each dumpus is a vumpus\nsolver.add(Implies(dumpus, vumpus))\n\n# Vumpuses are bright\nsolver.add(Implies(vumpus, bright))\n\n# Every vumpus is a jompus\nsolver.add(Implies(vumpus, jompus))\n\n# Jompuses are large\nsolver.add(Implies(jompus, large))\n\n# Each jompus is a wumpus\nsolver.add(Implies(jompus, wumpus))\n\n# Stella is a yumpus\nsolver.add(Implies(stella, yumpus))\n\n# Create facts in the problem\nsolver.add(stella)\n\n# Create statements to be checked\n# Stella is bright\nsolver.add(stella, bright)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_3",
    "context": "Vumpuses are floral. Vumpuses are tumpuses. Tumpuses are brown. Each tumpus is a wumpus. Wumpuses are small. Each wumpus is a rompus. Each zumpus is metallic. Every rompus is happy. Rompuses are impuses. Each impus is amenable. Each impus is a dumpus. Every dumpus is not metallic. Dumpuses are numpuses. Each numpus is bitter. Each numpus is a jompus. Every jompus is cold. Each jompus is a yumpus. Wren is a tumpus.",
    "question": "Is the following statement true or false? Wren is not metallic.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Vumpuses are floral\nvumpus = Bool(\"vumpus\")\nfloral = Bool(\"floral\")\n\n# Vumpuses are tumpuses\n# Vumpuses has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Tumpuses are brown\n# Tumpuses has been defined before\nbrown = Bool(\"brown\")\n\n# Each tumpus is a wumpus\n# Tumpuses has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Wumpuses are small\n# Wumpuses has been defined before\nsmall = Bool(\"small\")\n\n# Each wumpus is a rompus\n# Wumpuses has been defined before\nrompus = Bool(\"rompus\")\n\n# Each zumpus is metallic\n# Zumpuses has been defined before\nmetallic = Bool(\"metallic\")\n\n# Every rompus is happy\nrompus = Bool(\"rompus\")\nhappy = Bool(\"happy\")\n\n# Rompuses are impuses\n# Rompuses has been defined before\nimpus = Bool(\"impus\")\n\n# Each impus is amenable\n# Impus has been defined before\namenable = Bool(\"amenable\")\n\n# Each impus is a dumpus\n# Impus has been defined before\ndumpus = Bool(\"dumpus\")\n\n# Every dumpus is not metallic\n# Dumpuses has been defined before\nmetallic = Bool(\"metallic\")\n\n# Dumpuses are numpuses\n# Dumpuses has been defined before\nnumpus = Bool(\"numpus\")\n\n# Each numpus is bitter\n# Numpus has been defined before\nbitter = Bool(\"bitter\")\n\n# Each numpus is a jompus\n# Numpus has been defined before\njompus = Bool(\"jompus\")\n\n# Every jompus is cold\n# Jompus has been defined before\ncold = Bool(\"cold\")\n\n# Each jompus is a yumpus\n# Jompus has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Wren is a tumpus\nwren = Bool(\"wren\")\n# Tumpuses has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Vumpuses are floral\nsolver.add(Implies(vumpus, floral))\n\n# Vumpuses are tumpuses\nsolver.add(Implies(vumpus, tumpus))\n\n# Tumpuses are brown\nsolver.add(Implies(tumpus, brown))\n\n# Each tumpus is a wumpus\nsolver.add(Implies(tumpus, wumpus))\n\n# Wumpuses are small\nsolver.add(Implies(wumpus, small))\n\n# Each wumpus is a rompus\nsolver.add(Implies(wumpus, rompus))\n\n# Each zumpus is metallic\nsolver.add(Implies(zumpus, metallic))\n\n# Every rompus is happy\nsolver.add(Implies(rompus, happy))\n\n# Rompuses are impuses\nsolver.add(Implies(rompus, impus))\n\n# Each impus is amenable\nsolver.add(Implies(impus, amenable))\n\n# Each impus is a dumpus\nsolver.add(Implies(impus, dumpus))\n\n# Every dumpus is not metallic\nsolver.add(Implies(dumpus, Not(metallic)))\n\n# Dumpuses are numpuses\nsolver.add(Implies(dumpus, numpus))\n\n# Each numpus is bitter\nsolver.add(Implies(numpus, bitter))\n\n# Each numpus is a jompus\nsolver.add(Implies(numpus, jompus))\n\n# Every jompus is cold\nsolver.add(Implies(jompus, cold))\n\n# Each jompus is a yumpus\nsolver.add(Implies(jompus, yumpus))\n\n# Wren is a tumpus\nsolver.add(Implies(wren, tumpus))\n\n# Create facts in the problem\nsolver.add(wren)\n\n# Create statements to be checked\n# Wren is not metallic\nsolver.add(wren, Not(metallic))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_3",
    "context": "Vumpuses are floral. Vumpuses are tumpuses. Tumpuses are brown. Each tumpus is a wumpus. Wumpuses are small. Each wumpus is a rompus. Each zumpus is metallic. Every rompus is happy. Rompuses are impuses. Each impus is amenable. Each impus is a dumpus. Every dumpus is not metallic. Dumpuses are numpuses. Each numpus is bitter. Each numpus is a jompus. Every jompus is cold. Each jompus is a yumpus. Wren is a tumpus.",
    "question": "Is the following statement true or false? Wren is not metallic.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Vumpuses are floral\nvumpus = Bool(\"vumpus\")\nfloral = Bool(\"floral\")\n\n# Vumpuses are tumpuses\n# Vumpuses has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Tumpuses are brown\n# Tumpuses has been defined before\nbrown = Bool(\"brown\")\n\n# Each tumpus is a wumpus\n# Tumpuses has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Wumpuses are small\n# Wumpuses has been defined before\nsmall = Bool(\"small\")\n\n# Each wumpus is a rompus\n# Wumpuses has been defined before\nrompus = Bool(\"rompus\")\n\n# Each zumpus is metallic\n# Zumpuses has been defined before\nzumpus = Bool(\"zumpus\")\nmetallic = Bool(\"metallic\")\n\n# Every rompus is happy\nrompus = Bool(\"rompus\")\nhappy = Bool(\"happy\")\n\n# Rompuses are impuses\n# Rompuses has been defined before\nimpus = Bool(\"impus\")\n\n# Each impus is amenable\n# Impus has been defined before\namenable = Bool(\"amenable\")\n\n# Each impus is a dumpus\n# Impus has been defined before\ndumpus = Bool(\"dumpus\")\n\n# Every dumpus is not metallic\n# Dumpuses has been defined before\nmetallic = Bool(\"metallic\")\n\n# Dumpuses are numpuses\n# Dumpuses has been defined before\nnumpus = Bool(\"numpus\")\n\n# Each numpus is bitter\n# Numpus has been defined before\nbitter = Bool(\"bitter\")\n\n# Each numpus is a jompus\n# Numpus has been defined before\njompus = Bool(\"jompus\")\n\n# Every jompus is cold\n# Jompus has been defined before\ncold = Bool(\"cold\")\n\n# Each jompus is a yumpus\n# Jompus has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Wren is a tumpus\nwren = Bool(\"wren\")\n# Tumpuses has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Vumpuses are floral\nsolver.add(Implies(vumpus, floral))\n\n# Vumpuses are tumpuses\nsolver.add(Implies(vumpus, tumpus))\n\n# Tumpuses are brown\nsolver.add(Implies(tumpus, brown))\n\n# Each tumpus is a wumpus\nsolver.add(Implies(tumpus, wumpus))\n\n# Wumpuses are small\nsolver.add(Implies(wumpus, small))\n\n# Each wumpus is a rompus\nsolver.add(Implies(wumpus, rompus))\n\n# Each zumpus is metallic\nsolver.add(Implies(zumpus, metallic))\n\n# Every rompus is happy\nsolver.add(Implies(rompus, happy))\n\n# Rompuses are impuses\nsolver.add(Implies(rompus, impus))\n\n# Each impus is amenable\nsolver.add(Implies(impus, amenable))\n\n# Each impus is a dumpus\nsolver.add(Implies(impus, dumpus))\n\n# Every dumpus is not metallic\nsolver.add(Implies(dumpus, Not(metallic)))\n\n# Dumpuses are numpuses\nsolver.add(Implies(dumpus, numpus))\n\n# Each numpus is bitter\nsolver.add(Implies(numpus, bitter))\n\n# Each numpus is a jompus\nsolver.add(Implies(numpus, jompus))\n\n# Every jompus is cold\nsolver.add(Implies(jompus, cold))\n\n# Each jompus is a yumpus\nsolver.add(Implies(jompus, yumpus))\n\n# Wren is a tumpus\nsolver.add(Implies(wren, tumpus))\n\n# Create facts in the problem\nsolver.add(wren)\n\n# Create statements to be checked\n# Wren is not metallic\nsolver.add(Not(metallic))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_4",
    "context": "Rompuses are spicy. Every rompus is an impus. Yumpuses are not small. Impuses are orange. Impuses are zumpuses. Zumpuses are not hot. Zumpuses are numpuses. Numpuses are metallic. Numpuses are wumpuses. Every wumpus is not kind. Each wumpus is a dumpus. Each dumpus is not bright. Every dumpus is a jompus. Jompuses are small. Jompuses are vumpuses. Each vumpus is not shy. Every vumpus is a tumpus. Alex is a zumpus.",
    "question": "Is the following statement true or false? Alex is not small.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Rompuses are spicy\nrompus = Bool(\"rompus\")\nspicy = Bool(\"spicy\")\n\n# Every rompus is an impus\nrompus = Bool(\"rompus\")\nimpus = Bool(\"impus\")\n\n# Yumpuses are not small\nyumpus = Bool(\"yumpus\")\nsmall = Bool(\"small\")\n\n# Impuses are orange\nimpus = Bool(\"impus\")\norange = Bool(\"orange\")\n\n# Impuses are zumpuses\nzumpus = Bool(\"zumpus\")\n\n# Zumpuses are not hot\nhot = Bool(\"hot\")\n\n# Zumpuses are numpuses\nnumpus = Bool(\"numpus\")\n\n# Numpuses are metallic\nnumpus = Bool(\"numpus\")\nmetallic = Bool(\"metallic\")\n\n# Numpuses are wumpuses\nwumpus = Bool(\"wumpus\")\n\n# Every wumpus is not kind\nwumpus = Bool(\"wumpus\")\nkind = Bool(\"kind\")\n\n# Each wumpus is a dumpus\ndumpus = Bool(\"dumpus\")\n\n# Each dumpus is not bright\ndumpus = Bool(\"dumpus\")\nbright = Bool(\"bright\")\n\n# Every dumpus is a jompus\ndumpus = Bool(\"dumpus\")\njompus = Bool(\"jompus\")\n\n# Jompuses are small\njompus = Bool(\"jompus\")\nsmall = Bool(\"small\")\n\n# Jompuses are vumpuses\nvumpus = Bool(\"vumpus\")\n\n# Each vumpus is not shy\nvumpus = Bool(\"vumpus\")\nshy = Bool(\"shy\")\n\n# Every vumpus is a tumpus\nvumpus = Bool(\"vumpus\")\ntumpus = Bool(\"tumpus\")\n\n# Alex is a zumpus\nalex = Bool(\"alex\")\nzumpus = Bool(\"zumpus\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Rompuses are spicy\nsolver.add(Implies(rompus, spicy))\n\n# Every rompus is an impus\nsolver.add(Implies(rompus, impus))\n\n# Yumpuses are not small\nsolver.add(Implies(yumpus, Not(small)))\n\n# Impuses are orange\nsolver.add(Implies(impus, orange))\n\n# Impuses are zumpuses\nsolver.add(Implies(impus, zumpus))\n\n# Zumpuses are not hot\nsolver.add(Implies(zumpus, Not(hot)))\n\n# Zumpuses are numpuses\nsolver.add(Implies(zumpus, numpus))\n\n# Numpuses are metallic\nsolver.add(Implies(numpus, metallic))\n\n# Numpuses are wumpuses\nsolver.add(Implies(numpus, wumpus))\n\n# Every wumpus is not kind\nsolver.add(Implies(wumpus, Not(kind)))\n\n# Each wumpus is a dumpus\nsolver.add(Implies(wumpus, dumpus))\n\n# Each dumpus is not bright\nsolver.add(Implies(dumpus, Not(bright)))\n\n# Every dumpus is a jompus\nsolver.add(Implies(dumpus, jompus))\n\n# Jompuses are small\nsolver.add(Implies(jompus, small))\n\n# Jompuses are vumpuses\nsolver.add(Implies(jompus, vumpus))\n\n# Each vumpus is not shy\nsolver.add(Implies(vumpus, Not(shy)))\n\n# Every vumpus is a tumpus\nsolver.add(Implies(vumpus, tumpus))\n\n# Alex is a zumpus\nsolver.add(Implies(alex, zumpus))\n\n# Create facts in the problem\nsolver.add(alex)\n\n# Create statements to be checked\n# Alex is not small\nsolver.add(alex, Not(small))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_5",
    "context": "Rompuses are mean. Rompuses are zumpuses. Each zumpus is not happy. Each zumpus is a numpus. Each numpus is not temperate. Each numpus is a tumpus. Tumpuses are not large. Tumpuses are yumpuses. Every yumpus is earthy. Each yumpus is a jompus. Jompuses are blue. Every jompus is a wumpus. Wumpuses are not dull. Wumpuses are impuses. Each vumpus is dull. Impuses are sour. Impuses are dumpuses. Alex is a numpus.",
    "question": "Is the following statement true or false? Alex is not dull.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Rompuses are mean\nrompus = Bool(\"rompus\")\nmean = Bool(\"mean\")\n\n# Rompuses are zumpuses\n# Rompuses has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Each zumpus is not happy\n# Each zumpus is a numpus\n# Each numpus is not temperate\n# Each numpus is a tumpus\n# Tumpuses are not large\n# Tumpuses are yumpuses\n# Every yumpus is earthy\n# Each yumpus is a jompus\n# Jompuses are blue\n# Every jompus is a wumpus\n# Wumpuses are not dull\n# Wumpuses are impuses\n# Each vumpus is dull\n# Impuses are sour\n# Impuses are dumpuses\n# Alex is a numpus\nrompus = Bool(\"rompus\")\nmean = Bool(\"mean\")\nzumpus = Bool(\"zumpus\")\nhappy = Bool(\"happy\")\nnumpus = Bool(\"numpus\")\ntemperate = Bool(\"temperate\")\ntumpus = Bool(\"tumpus\")\nlarge = Bool(\"large\")\nyumpus = Bool(\"yumpus\")\nearthy = Bool(\"earthy\")\njompus = Bool(\"jompus\")\nblue = Bool(\"blue\")\nwumpus = Bool(\"wumpus\")\ndull = Bool(\"dull\")\nimpus = Bool(\"impus\")\nvumpus = Bool(\"vumpus\")\nsour = Bool(\"sour\")\ndumpus = Bool(\"dumpus\")\nalex = Bool(\"alex\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Rompuses are mean\nsolver.add(Implies(rompus, mean))\n# Rompuses are zumpuses\nsolver.add(Implies(rompus, zumpus))\n# Each zumpus is not happy\nsolver.add(Implies(zumpus, Not(happy)))\n# Each zumpus is a numpus\nsolver.add(Implies(zumpus, numpus))\n# Each numpus is not temperate\nsolver.add(Implies(numpus, Not(temperate)))\n# Each numpus is a tumpus\nsolver.add(Implies(numpus, tumpus))\n# Tumpuses are not large\nsolver.add(Implies(tumpus, Not(large)))\n# Tumpuses are yumpuses\nsolver.add(Implies(tumpus, yumpus))\n# Every yumpus is earthy\nsolver.add(Implies(yumpus, earthy))\n# Each yumpus is a jompus\nsolver.add(Implies(yumpus, jompus))\n# Jompuses are blue\nsolver.add(Implies(jompus, blue))\n# Every jompus is a wumpus\nsolver.add(Implies(jompus, wumpus))\n# Wumpuses are not dull\nsolver.add(Implies(wumpus, Not(dull)))\n# Wumpuses are impuses\nsolver.add(Implies(wumpus, impus))\n# Each vumpus is dull\nsolver.add(Implies(vumpus, dull))\n# Impuses are sour\nsolver.add(Implies(impus, sour))\n# Impuses are dumpuses\nsolver.add(Implies(impus, dumpus))\n# Alex is a numpus\nsolver.add(Implies(alex, numpus))\n\n# Create facts in the problem\nsolver.add(alex)\n\n# Create statements to be checked\n# Alex is not dull\nsolver.add(alex, Not(dull))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_6",
    "context": "Every tumpus is large. Tumpuses are wumpuses. Each wumpus is not opaque. Every dumpus is not dull. Every wumpus is a rompus. Every rompus is brown. Each rompus is a vumpus. Each vumpus is temperate. Vumpuses are jompuses. Jompuses are dull. Jompuses are numpuses. Every numpus is liquid. Each numpus is an impus. Impuses are spicy. Every impus is a yumpus. Every yumpus is not nervous. Every yumpus is a zumpus. Wren is a tumpus.",
    "question": "Is the following statement true or false? Wren is dull.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every tumpus is large\ntumpus = Bool(\"tumpus\")\nlarge = Bool(\"large\")\n\n# Tumpuses are wumpuses\n# Tumpus has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Each wumpus is not opaque\n# Wumpus has been defined before\nopaque = Bool(\"opaque\")\n\n# Every dumpus is not dull\ndumpus = Bool(\"dumpus\")\ndull = Bool(\"dull\")\n\n# Every wumpus is a rompus\n# Wumpus has been defined before\nrompus = Bool(\"rompus\")\n\n# Every rompus is brown\n# Rompus has been defined before\nbrown = Bool(\"brown\")\n\n# Each rompus is a vumpus\n# Rompus has been defined before\nvumpus = Bool(\"vumpus\")\n\n# Each vumpus is temperate\n# Vumpus has been defined before\ntemperate = Bool(\"temperate\")\n\n# Vumpuses are jompuses\n# Vumpus has been defined before\njompus = Bool(\"jompus\")\n\n# Jompuses are dull\n# Jompus has been defined before\n\n# Jompuses are numpuses\n# Jompus has been defined before\nnumpus = Bool(\"numpus\")\n\n# Every numpus is liquid\n# Numpus has been defined before\nliquid = Bool(\"liquid\")\n\n# Each numpus is an impus\n# Numpus has been defined before\nimpus = Bool(\"impus\")\n\n# Impuses are spicy\n# Impus has been defined before\nspicy = Bool(\"spicy\")\n\n# Every impus is a yumpus\n# Impus has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Every yumpus is not nervous\n# Yumpus has been defined before\nnervous = Bool(\"nervous\")\n\n# Every yumpus is a zumpus\n# Yumpus has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Wren is a tumpus\nwren = Bool(\"wren\")\n# Tumpus has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every tumpus is large\nsolver.add(Implies(tumpus, large))\n\n# Tumpuses are wumpuses\nsolver.add(Implies(tumpus, wumpus))\n\n# Each wumpus is not opaque\nsolver.add(Implies(wumpus, Not(opaque)))\n\n# Every dumpus is not dull\nsolver.add(Implies(dumpus, Not(dull)))\n\n# Every wumpus is a rompus\nsolver.add(Implies(wumpus, rompus))\n\n# Every rompus is brown\nsolver.add(Implies(rompus, brown))\n\n# Each rompus is a vumpus\nsolver.add(Implies(rompus, vumpus))\n\n# Each vumpus is temperate\nsolver.add(Implies(vumpus, temperate))\n\n# Vumpuses are jompuses\nsolver.add(Implies(vumpus, jompus))\n\n# Jompuses are dull\nsolver.add(Implies(jompus, dull))\n\n# Jompuses are numpuses\nsolver.add(Implies(jompus, numpus))\n\n# Every numpus is liquid\nsolver.add(Implies(numpus, liquid))\n\n# Each numpus is an impus\nsolver.add(Implies(numpus, impus))\n\n# Impuses are spicy\nsolver.add(Implies(impus, spicy))\n\n# Every impus is a yumpus\nsolver.add(Implies(impus, yumpus))\n\n# Every yumpus is not nervous\nsolver.add(Implies(yumpus, Not(nervous)))\n\n# Every yumpus is a zumpus\nsolver.add(Implies(yumpus, zumpus))\n\n# Wren is a tumpus\nsolver.add(Implies(wren, tumpus))\n\n# Create facts in the problem\nsolver.add(wren)\n\n# Create statements to be checked\n# Wren is dull\nsolver.add(wren, dull)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_7",
    "context": "Every rompus is orange. Every rompus is an impus. Vumpuses are happy. Every impus is spicy. Every impus is a wumpus. Wumpuses are transparent. Wumpuses are numpuses. Every numpus is not kind. Numpuses are tumpuses. Each tumpus is not bright. Tumpuses are yumpuses. Every yumpus is not liquid. Yumpuses are dumpuses. Each dumpus is not happy. Dumpuses are zumpuses. Every zumpus is earthy. Each zumpus is a jompus. Stella is a wumpus.",
    "question": "Is the following statement true or false? Stella is happy.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every rompus is orange\nrompus = Bool(\"rompus\")\norange = Bool(\"orange\")\n\n# Every rompus is an impus\n# rompus has been defined before\nimpus = Bool(\"impus\")\n\n# Vumpuses are happy\nvumpus = Bool(\"vumpus\")\nhappy = Bool(\"happy\")\n\n# Every impus is spicy\n# impus has been defined before\nspicy = Bool(\"spicy\")\n\n# Every impus is a wumpus\n# impus has been defined before\n# wumpus has been defined before\n\n# Wumpuses are transparent\n# wumpus has been defined before\ntransparent = Bool(\"transparent\")\n\n# Wumpuses are numpuses\n# wumpus has been defined before\nnumpus = Bool(\"numpus\")\n\n# Every numpus is not kind\n# numpus has been defined before\nkind = Bool(\"kind\")\n\n# Numpuses are tumpuses\n# numpus has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Each tumpus is not bright\n# tumpus has been defined before\nbright = Bool(\"bright\")\n\n# Tumpuses are yumpuses\n# tumpus has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Every yumpus is not liquid\n# yumpus has been defined before\nliquid = Bool(\"liquid\")\n\n# Yumpuses are dumpuses\n# yumpus has been defined before\ndumpus = Bool(\"dumpus\")\n\n# Each dumpus is not happy\n# dumpus has been defined before\n# happy has been defined before\n\n# Dumpuses are zumpuses\n# dumpus has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Every zumpus is earthy\n# zumpus has been defined before\nearthy = Bool(\"earthy\")\n\n# Each zumpus is a jompus\n# zumpus has been defined before\njompus = Bool(\"jompus\")\n\n# Stella is a wumpus\nstella = Bool(\"stella\")\n# wumpus has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every rompus is orange\nsolver.add(Implies(rompus, orange))\n\n# Every rompus is an impus\nsolver.add(Implies(rompus, impus))\n\n# Vumpuses are happy\nsolver.add(Implies(vumpus, happy))\n\n# Every impus is spicy\nsolver.add(Implies(impus, spicy))\n\n# Every impus is a wumpus\nsolver.add(Implies(impus, wumpus))\n\n# Wumpuses are transparent\nsolver.add(Implies(wumpus, transparent))\n\n# Wumpuses are numpuses\nsolver.add(Implies(wumpus, numpus))\n\n# Every numpus is not kind\nsolver.add(Implies(numpus, Not(kind)))\n\n# Numpuses are tumpuses\nsolver.add(Implies(numpus, tumpus))\n\n# Each tumpus is not bright\nsolver.add(Implies(tumpus, Not(bright)))\n\n# Tumpuses are yumpuses\nsolver.add(Implies(tumpus, yumpus))\n\n# Every yumpus is not liquid\nsolver.add(Implies(yumpus, Not(liquid)))\n\n# Yumpuses are dumpuses\nsolver.add(Implies(yumpus, dumpus))\n\n# Each dumpus is not happy\nsolver.add(Implies(dumpus, Not(happy)))\n\n# Dumpuses are zumpuses\nsolver.add(Implies(dumpus, zumpus))\n\n# Every zumpus is earthy\nsolver.add(Implies(zumpus, earthy))\n\n# Each zumpus is a jompus\nsolver.add(Implies(zumpus, jompus))\n\n# Stella is a wumpus\nsolver.add(Implies(stella, wumpus))\n\n# Create facts in the problem\nsolver.add(stella)\n\n# Create statements to be checked\n# Stella is happy\nsolver.add(stella, happy)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_7",
    "context": "Every rompus is orange. Every rompus is an impus. Vumpuses are happy. Every impus is spicy. Every impus is a wumpus. Wumpuses are transparent. Wumpuses are numpuses. Every numpus is not kind. Numpuses are tumpuses. Each tumpus is not bright. Tumpuses are yumpuses. Every yumpus is not liquid. Yumpuses are dumpuses. Each dumpus is not happy. Dumpuses are zumpuses. Every zumpus is earthy. Each zumpus is a jompus. Stella is a wumpus.",
    "question": "Is the following statement true or false? Stella is happy.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every rompus is orange\nrompus = Bool(\"rompus\")\norange = Bool(\"orange\")\n\n# Every rompus is an impus\n# rompus has been defined before\nimpus = Bool(\"impus\")\n\n# Vumpuses are happy\nvumpus = Bool(\"vumpus\")\nhappy = Bool(\"happy\")\n\n# Every impus is spicy\n# impus has been defined before\nspicy = Bool(\"spicy\")\n\n# Every impus is a wumpus\n# impus has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Wumpuses are transparent\n# wumpus has been defined before\ntransparent = Bool(\"transparent\")\n\n# Wumpuses are numpuses\n# wumpus has been defined before\nnumpus = Bool(\"numpus\")\n\n# Every numpus is not kind\n# numpus has been defined before\nkind = Bool(\"kind\")\n\n# Numpuses are tumpuses\n# numpus has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Each tumpus is not bright\n# tumpus has been defined before\nbright = Bool(\"bright\")\n\n# Tumpuses are yumpuses\n# tumpus has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Every yumpus is not liquid\n# yumpus has been defined before\nliquid = Bool(\"liquid\")\n\n# Yumpuses are dumpuses\n# yumpus has been defined before\ndumpus = Bool(\"dumpus\")\n\n# Each dumpus is not happy\n# dumpus has been defined before\nhappy = Bool(\"happy\")\n\n# Dumpuses are zumpuses\n# dumpus has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Every zumpus is earthy\n# zumpus has been defined before\nearthy = Bool(\"earthy\")\n\n# Each zumpus is a jompus\n# zumpus has been defined before\njompus = Bool(\"jompus\")\n\n# Stella is a wumpus\nstella = Bool(\"stella\")\n# wumpus has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every rompus is orange\nsolver.add(Implies(rompus, orange))\n\n# Every rompus is an impus\nsolver.add(Implies(rompus, impus))\n\n# Vumpuses are happy\nsolver.add(Implies(vumpus, happy))\n\n# Every impus is spicy\nsolver.add(Implies(impus, spicy))\n\n# Every impus is a wumpus\nsolver.add(Implies(impus, wumpus))\n\n# Wumpuses are transparent\nsolver.add(Implies(wumpus, transparent))\n\n# Wumpuses are numpuses\nsolver.add(Implies(wumpus, numpus))\n\n# Every numpus is not kind\nsolver.add(Implies(numpus, Not(kind)))\n\n# Numpuses are tumpuses\nsolver.add(Implies(numpus, tumpus))\n\n# Each tumpus is not bright\nsolver.add(Implies(tumpus, Not(bright)))\n\n# Tumpuses are yumpuses\nsolver.add(Implies(tumpus, yumpus))\n\n# Every yumpus is not liquid\nsolver.add(Implies(yumpus, Not(liquid)))\n\n# Yumpuses are dumpuses\nsolver.add(Implies(yumpus, dumpus))\n\n# Each dumpus is not happy\nsolver.add(Implies(dumpus, Not(happy)))\n\n# Dumpuses are zumpuses\nsolver.add(Implies(dumpus, zumpus))\n\n# Every zumpus is earthy\nsolver.add(Implies(zumpus, earthy))\n\n# Each zumpus is a jompus\nsolver.add(Implies(zumpus, jompus))\n\n# Stella is a wumpus\nsolver.add(Implies(stella, wumpus))\n\n# Create facts in the problem\nsolver.add(stella)\n\n# Create statements to be checked\n# Stella is happy\nsolver.add(stella, happy)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_8",
    "context": "Every jompus is sour. Each jompus is a rompus. Rompuses are not kind. Every rompus is a zumpus. Every zumpus is feisty. Zumpuses are tumpuses. Tumpuses are small. Tumpuses are wumpuses. Wumpuses are opaque. Wumpuses are impuses. Every yumpus is hot. Impuses are brown. Impuses are dumpuses. Dumpuses are not hot. Every dumpus is a vumpus. Each vumpus is dull. Vumpuses are numpuses. Alex is a zumpus.",
    "question": "Is the following statement true or false? Alex is hot.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every jompus is sour\njompus = Bool(\"jompus\")\nsour = Bool(\"sour\")\n\n# Each jompus is a rompus\n# jompus has been defined before\nrompus = Bool(\"rompus\")\n\n# Rompuses are not kind\n# Rompuses has been defined before\nkind = Bool(\"kind\")\n\n# Every rompus is a zumpus\n# Rompuses has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Every zumpus is feisty\n# Zumpuses has been defined before\nfeisty = Bool(\"feisty\")\n\n# Zumpuses are tumpuses\n# Zumpuses has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Tumpuses are small\n# Tumpuses has been defined before\nsmall = Bool(\"small\")\n\n# Tumpuses are wumpuses\n# Tumpuses has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Wumpuses are opaque\n# Wumpuses has been defined before\nopaque = Bool(\"opaque\")\n\n# Wumpuses are impuses\n# Wumpuses has been defined before\nimpus = Bool(\"impus\")\n\n# Every yumpus is hot\nyumpus = Bool(\"yumpus\")\nhot = Bool(\"hot\")\n\n# Impuses are brown\n# Impuses has been defined before\nbrown = Bool(\"brown\")\n\n# Impuses are dumpuses\n# Impuses has been defined before\ndumpus = Bool(\"dumpus\")\n\n# Dumpuses are not hot\n# Dumpuses has been defined before\n# Hot has been defined before\n\n# Every dumpus is a vumpus\ndumpus = Bool(\"dumpus\")\nvumpus = Bool(\"vumpus\")\n\n# Each vumpus is dull\n# Vumpuses has been defined before\ndull = Bool(\"dull\")\n\n# Vumpuses are numpuses\n# Vumpuses has been defined before\nnumpus = Bool(\"numpus\")\n\n# Alex is a zumpus\nalex = Bool(\"alex\")\n# Zumpuses has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every jompus is sour\nsolver.add(Implies(jompus, sour))\n\n# Each jompus is a rompus\nsolver.add(Implies(jompus, rompus))\n\n# Rompuses are not kind\nsolver.add(Implies(rompus, Not(kind)))\n\n# Every rompus is a zumpus\nsolver.add(Implies(rompus, zumpus))\n\n# Every zumpus is feisty\nsolver.add(Implies(zumpus, feisty))\n\n# Zumpuses are tumpuses\nsolver.add(Implies(zumpus, tumpus))\n\n# Tumpuses are small\nsolver.add(Implies(tumpus, small))\n\n# Tumpuses are wumpuses\nsolver.add(Implies(tumpus, wumpus))\n\n# Wumpuses are opaque\nsolver.add(Implies(wumpus, opaque))\n\n# Wumpuses are impuses\nsolver.add(Implies(wumpus, impus))\n\n# Every yumpus is hot\nsolver.add(Implies(yumpus, hot))\n\n# Impuses are brown\nsolver.add(Implies(impus, brown))\n\n# Impuses are dumpuses\nsolver.add(Implies(impus, dumpus))\n\n# Dumpuses are not hot\nsolver.add(Implies(dumpus, Not(hot)))\n\n# Every dumpus is a vumpus\nsolver.add(Implies(dumpus, vumpus))\n\n# Each vumpus is dull\nsolver.add(Implies(vumpus, dull))\n\n# Vumpuses are numpuses\nsolver.add(Implies(vumpus, numpus))\n\n# Alex is a zumpus\nsolver.add(Implies(alex, zumpus))\n\n# Create facts in the problem\nsolver.add(alex)\n\n# Create statements to be checked\n# Alex is hot\nsolver.add(alex, hot)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_9",
    "context": "Every dumpus is not shy. Each dumpus is a tumpus. Rompuses are not wooden. Tumpuses are opaque. Every tumpus is a wumpus. Wumpuses are not floral. Each wumpus is an impus. Impuses are bitter. Every impus is a vumpus. Vumpuses are small. Each vumpus is a numpus. Every numpus is wooden. Each numpus is a yumpus. Each yumpus is orange. Each yumpus is a jompus. Each jompus is amenable. Every jompus is a zumpus. Wren is a tumpus.",
    "question": "Is the following statement true or false? Wren is wooden.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every dumpus is not shy\ndumpus = Bool(\"dumpus\")\nshy = Bool(\"shy\")\n\n# Each dumpus is a tumpus\n# dumpus has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Rompuses are not wooden\nrompus = Bool(\"rompus\")\nwooden = Bool(\"wooden\")\n\n# Tumpuses are opaque\n# Tumpuses has been defined before\nopaque = Bool(\"opaque\")\n\n# Every tumpus is a wumpus\ntumpus = Bool(\"tumpus\")\nwumpus = Bool(\"wumpus\")\n\n# Wumpuses are not floral\n# Wumpuses has been defined before\nfloral = Bool(\"floral\")\n\n# Each wumpus is an impus\n# Wumpuses has been defined before\nimpus = Bool(\"impus\")\n\n# Impuses are bitter\n# Impuses has been defined before\nbitter = Bool(\"bitter\")\n\n# Every impus is a vumpus\nimpus = Bool(\"impus\")\nvumpus = Bool(\"vumpus\")\n\n# Vumpuses are small\n# Vumpuses has been defined before\nsmall = Bool(\"small\")\n\n# Each vumpus is a numpus\n# Vumpuses has been defined before\nnumpus = Bool(\"numpus\")\n\n# Every numpus is wooden\n# Numpus has been defined before\nwooden = Bool(\"wooden\")\n\n# Each numpus is a yumpus\n# Numpus has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Each yumpus is orange\n# Yumpus has been defined before\norange = Bool(\"orange\")\n\n# Each yumpus is a jompus\n# Yumpus has been defined before\njompus = Bool(\"jompus\")\n\n# Each jompus is amenable\n# Jompus has been defined before\namenable = Bool(\"amenable\")\n\n# Every jompus is a zumpus\n# Jompus has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Wren is a tumpus\nwren = Bool(\"wren\")\n# Tumpus has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every dumpus is not shy\nsolver.add(Implies(dumpus, Not(shy)))\n\n# Each dumpus is a tumpus\nsolver.add(Implies(dumpus, tumpus))\n\n# Rompuses are not wooden\nsolver.add(Implies(rompus, Not(wooden)))\n\n# Tumpuses are opaque\nsolver.add(Implies(tumpus, opaque))\n\n# Every tumpus is a wumpus\nsolver.add(Implies(tumpus, wumpus))\n\n# Wumpuses are not floral\nsolver.add(Implies(wumpus, Not(floral)))\n\n# Each wumpus is an impus\nsolver.add(Implies(wumpus, impus))\n\n# Impuses are bitter\nsolver.add(Implies(impus, bitter))\n\n# Every impus is a vumpus\nsolver.add(Implies(impus, vumpus))\n\n# Vumpuses are small\nsolver.add(Implies(vumpus, small))\n\n# Each vumpus is a numpus\nsolver.add(Implies(vumpus, numpus))\n\n# Every numpus is wooden\nsolver.add(Implies(numpus, wooden))\n\n# Each numpus is a yumpus\nsolver.add(Implies(numpus, yumpus))\n\n# Each yumpus is orange\nsolver.add(Implies(yumpus, orange))\n\n# Each yumpus is a jompus\nsolver.add(Implies(yumpus, jompus))\n\n# Each jompus is amenable\nsolver.add(Implies(jompus, amenable))\n\n# Every jompus is a zumpus\nsolver.add(Implies(jompus, zumpus))\n\n# Wren is a tumpus\nsolver.add(Implies(wren, tumpus))\n\n# Create facts in the problem\nsolver.add(wren)\n\n# Create statements to be checked\n# Wren is wooden\nsolver.add(wren, wooden)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_10",
    "context": "Every impus is earthy. Each impus is a jompus. Jompuses are small. Jompuses are rompuses. Rompuses are not amenable. Rompuses are wumpuses. Wumpuses are wooden. Wumpuses are zumpuses. Every zumpus is temperate. Every zumpus is a dumpus. Dumpuses are dull. Dumpuses are vumpuses. Every vumpus is not shy. Every yumpus is sweet. Vumpuses are numpuses. Numpuses are not sweet. Numpuses are tumpuses. Fae is a wumpus.",
    "question": "Is the following statement true or false? Fae is sweet.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every impus is earthy\nimpus = Bool(\"impus\")\nearthy = Bool(\"earthy\")\n\n# Each impus is a jompus\n# impus has been defined before\njompus = Bool(\"jompus\")\n\n# Jompuses are small\n# jompus has been defined before\nsmall = Bool(\"small\")\n\n# Jompuses are rompuses\n# jompus has been defined before\nrompus = Bool(\"rompus\")\n\n# Rompuses are not amenable\n# rompus has been defined before\namenable = Bool(\"amenable\")\n\n# Rompuses are wumpuses\n# rompus has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Wumpuses are wooden\n# wumpus has been defined before\nwooden = Bool(\"wooden\")\n\n# Wumpuses are zumpuses\n# wumpus has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Every zumpus is temperate\n# zumpus has been defined before\ntemperate = Bool(\"temperate\")\n\n# Every zumpus is a dumpus\n# zumpus has been defined before\ndumpus = Bool(\"dumpus\")\n\n# Dumpuses are dull\n# dumpus has been defined before\ndull = Bool(\"dull\")\n\n# Dumpuses are vumpuses\n# dumpus has been defined before\nvumpus = Bool(\"vumpus\")\n\n# Every vumpus is not shy\n# vumpus has been defined before\nshy = Bool(\"shy\")\n\n# Every yumpus is sweet\nyumpus = Bool(\"yumpus\")\nsweet = Bool(\"sweet\")\n\n# Vumpuses are numpuses\n# vumpus has been defined before\nnumpus = Bool(\"numpus\")\n\n# Numpuses are not sweet\n# numpus has been defined before\n# sweet has been defined before\n\n# Numpuses are tumpuses\n# numpus has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Fae is a wumpus\nfae = Bool(\"fae\")\n# wumpus has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every impus is earthy\nsolver.add(Implies(impus, earthy))\n\n# Each impus is a jompus\nsolver.add(Implies(impus, jompus))\n\n# Jompuses are small\nsolver.add(Implies(jompus, small))\n\n# Jompuses are rompuses\nsolver.add(Implies(jompus, rompus))\n\n# Rompuses are not amenable\nsolver.add(Implies(rompus, Not(amenable)))\n\n# Rompuses are wumpuses\nsolver.add(Implies(rompus, wumpus))\n\n# Wumpuses are wooden\nsolver.add(Implies(wumpus, wooden))\n\n# Wumpuses are zumpuses\nsolver.add(Implies(wumpus, zumpus))\n\n# Every zumpus is temperate\nsolver.add(Implies(zumpus, temperate))\n\n# Every zumpus is a dumpus\nsolver.add(Implies(zumpus, dumpus))\n\n# Dumpuses are dull\nsolver.add(Implies(dumpus, dull))\n\n# Dumpuses are vumpuses\nsolver.add(Implies(dumpus, vumpus))\n\n# Every vumpus is not shy\nsolver.add(Implies(vumpus, Not(shy)))\n\n# Every yumpus is sweet\nsolver.add(Implies(yumpus, sweet))\n\n# Vumpuses are numpuses\nsolver.add(Implies(vumpus, numpus))\n\n# Numpuses are not sweet\nsolver.add(Implies(numpus, Not(sweet)))\n\n# Numpuses are tumpuses\nsolver.add(Implies(numpus, tumpus))\n\n# Fae is a wumpus\nsolver.add(Implies(fae, wumpus))\n\n# Create facts in the problem\nsolver.add(fae)\n\n# Create statements to be checked\n# Fae is sweet\nsolver.add(fae, sweet)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_11",
    "context": "Each jompus is not amenable. Wumpuses are not fruity. Every jompus is a vumpus. Every vumpus is not shy. Every vumpus is a rompus. Rompuses are not bitter. Rompuses are dumpuses. Dumpuses are opaque. Every dumpus is a yumpus. Every yumpus is orange. Yumpuses are zumpuses. Zumpuses are fruity. Each zumpus is a numpus. Numpuses are metallic. Every numpus is a tumpus. Each tumpus is large. Each tumpus is an impus. Sam is a vumpus.",
    "question": "Is the following statement true or false? Sam is not fruity.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Each jompus is not amenable\njompus = Bool(\"jompus\")\namenable = Bool(\"amenable\")\n\n# Wumpuses are not fruity\nwumpus = Bool(\"wumpus\")\nfruity = Bool(\"fruity\")\n\n# Every jompus is a vumpus\nvumpus = Bool(\"vumpus\")\n\n# Every vumpus is not shy\nshy = Bool(\"shy\")\n\n# Every vumpus is a rompus\nrompus = Bool(\"rompus\")\n\n# Rompuses are not bitter\nbitter = Bool(\"bitter\")\n\n# Rompuses are dumpuses\ndumpus = Bool(\"dumpus\")\n\n# Dumpuses are opaque\nopaque = Bool(\"opaque\")\n\n# Every dumpus is a yumpus\nyumpus = Bool(\"yumpus\")\n\n# Every yumpus is orange\norange = Bool(\"orange\")\n\n# Yumpuses are zumpuses\nzumpus = Bool(\"zumpus\")\n\n# Zumpuses are fruity\n# zumpus has been defined before\n\n# Each zumpus is a numpus\nnumpus = Bool(\"numpus\")\n\n# Numpuses are metallic\nmetallic = Bool(\"metallic\")\n\n# Every numpus is a tumpus\ntumpus = Bool(\"tumpus\")\n\n# Each tumpus is large\nlarge = Bool(\"large\")\n\n# Each tumpus is an impus\nimpus = Bool(\"impus\")\n\n# Sam is a vumpus\nsam = Bool(\"sam\")\n# Vumpus has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Each jompus is not amenable\nsolver.add(Implies(jompus, Not(amenable)))\n\n# Wumpuses are not fruity\nsolver.add(Implies(wumpus, Not(fruity)))\n\n# Every jompus is a vumpus\nsolver.add(Implies(jompus, vumpus))\n\n# Every vumpus is not shy\nsolver.add(Implies(vumpus, Not(shy)))\n\n# Every vumpus is a rompus\nsolver.add(Implies(vumpus, rompus))\n\n# Rompuses are not bitter\nsolver.add(Implies(rompus, Not(bitter)))\n\n# Rompuses are dumpuses\nsolver.add(Implies(rompus, dumpus))\n\n# Dumpuses are opaque\nsolver.add(Implies(dumpus, opaque))\n\n# Every dumpus is a yumpus\nsolver.add(Implies(dumpus, yumpus))\n\n# Every yumpus is orange\nsolver.add(Implies(yumpus, orange))\n\n# Yumpuses are zumpuses\nsolver.add(Implies(yumpus, zumpus))\n\n# Zumpuses are fruity\nsolver.add(Implies(zumpus, fruity))\n\n# Each zumpus is a numpus\nsolver.add(Implies(zumpus, numpus))\n\n# Numpuses are metallic\nsolver.add(Implies(numpus, metallic))\n\n# Every numpus is a tumpus\nsolver.add(Implies(numpus, tumpus))\n\n# Each tumpus is large\nsolver.add(Implies(tumpus, large))\n\n# Each tumpus is an impus\nsolver.add(Implies(tumpus, impus))\n\n# Sam is a vumpus\nsolver.add(Implies(sam, vumpus))\n\n# Create facts in the problem\nsolver.add(sam)\n\n# Create statements to be checked\n# Sam is not fruity\nsolver.add(sam, Not(fruity))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_12",
    "context": "Each tumpus is orange. Tumpuses are numpuses. Numpuses are small. Numpuses are vumpuses. Every vumpus is sour. Vumpuses are dumpuses. Each dumpus is cold. Every dumpus is a zumpus. Each zumpus is dull. Zumpuses are yumpuses. Jompuses are floral. Every yumpus is not amenable. Each yumpus is a rompus. Every rompus is opaque. Rompuses are impuses. Impuses are not floral. Impuses are wumpuses. Fae is a dumpus.",
    "question": "Is the following statement true or false? Fae is not floral.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Each tumpus is orange\ntumpus = Bool(\"tumpus\")\norange = Bool(\"orange\")\n\n# Tumpuses are numpuses\n# Tumpuses has been defined before\nnumpus = Bool(\"numpus\")\n\n# Numpuses are small\n# Numpuses has been defined before\nsmall = Bool(\"small\")\n\n# Numpuses are vumpuses\n# Numpuses has been defined before\nvumpus = Bool(\"vumpus\")\n\n# Every vumpus is sour\nsour = Bool(\"sour\")\n\n# Vumpuses are dumpuses\n# Vumpuses has been defined before\ndumpus = Bool(\"dumpus\")\n\n# Each dumpus is cold\ncold = Bool(\"cold\")\n\n# Every dumpus is a zumpus\nzumpus = Bool(\"zumpus\")\n\n# Each zumpus is dull\ndull = Bool(\"dull\")\n\n# Zumpuses are yumpuses\n# Zumpuses has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Jompuses are floral\njompus = Bool(\"jompus\")\nfloral = Bool(\"floral\")\n\n# Every yumpus is not amenable\namenable = Bool(\"amenable\")\nyumpus = Bool(\"yumpus\")\n\n# Each yumpus is a rompus\nrompus = Bool(\"rompus\")\nyumpus = Bool(\"yumpus\")\n\n# Every rompus is opaque\nopaque = Bool(\"opaque\")\nrompus = Bool(\"rompus\")\n\n# Rompuses are impuses\nimpus = Bool(\"impus\")\nrompus = Bool(\"rompus\")\n\n# Impuses are not floral\n# Impuses has been defined before\nfloral = Bool(\"floral\")\n\n# Impuses are wumpuses\n# Impuses has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Fae is a dumpus\nfae = Bool(\"fae\")\ndumpus = Bool(\"dumpus\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Each tumpus is orange\nsolver.add(Implies(tumpus, orange))\n\n# Tumpuses are numpuses\nsolver.add(Implies(tumpus, numpus))\n\n# Numpuses are small\nsolver.add(Implies(numpus, small))\n\n# Numpuses are vumpuses\nsolver.add(Implies(numpus, vumpus))\n\n# Every vumpus is sour\nsolver.add(Implies(vumpus, sour))\n\n# Vumpuses are dumpuses\nsolver.add(Implies(vumpus, dumpus))\n\n# Each dumpus is cold\nsolver.add(Implies(dumpus, cold))\n\n# Every dumpus is a zumpus\nsolver.add(Implies(dumpus, zumpus))\n\n# Each zumpus is dull\nsolver.add(Implies(zumpus, dull))\n\n# Zumpuses are yumpuses\nsolver.add(Implies(zumpus, yumpus))\n\n# Jompuses are floral\nsolver.add(Implies(jompus, floral))\n\n# Every yumpus is not amenable\nsolver.add(Implies(yumpus, Not(amenable)))\n\n# Each yumpus is a rompus\nsolver.add(Implies(yumpus, rompus))\n\n# Every rompus is opaque\nsolver.add(Implies(rompus, opaque))\n\n# Rompuses are impuses\nsolver.add(Implies(rompus, impus))\n\n# Impuses are not floral\nsolver.add(Implies(impus, Not(floral)))\n\n# Impuses are wumpuses\nsolver.add(Implies(impus, wumpus))\n\n# Fae is a dumpus\nsolver.add(Implies(fae, dumpus))\n\n# Create facts in the problem\nsolver.add(fae)\n\n# Create statements to be checked\n# Fae is not floral\nsolver.add(fae, Not(floral))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_13",
    "context": "Each yumpus is opaque. Each yumpus is a dumpus. Vumpuses are not dull. Dumpuses are floral. Each dumpus is a zumpus. Each zumpus is hot. Every zumpus is an impus. Each impus is large. Every impus is a rompus. Rompuses are spicy. Each rompus is a numpus. Numpuses are amenable. Each numpus is a jompus. Jompuses are dull. Each jompus is a wumpus. Wumpuses are not metallic. Every wumpus is a tumpus. Max is a zumpus.",
    "question": "Is the following statement true or false? Max is dull.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Each yumpus is opaque\nyumpus = Bool(\"yumpus\")\nopaque = Bool(\"opaque\")\n\n# Each yumpus is a dumpus\n# yumpus has been defined before\ndumpus = Bool(\"dumpus\")\n\n# Vumpuses are not dull\nvumpus = Bool(\"vumpus\")\ndull = Bool(\"dull\")\n\n# Dumpuses are floral\n# dumpus has been defined before\nfloral = Bool(\"floral\")\n\n# Each dumpus is a zumpus\n# dumpus has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Each zumpus is hot\n# zumpus has been defined before\nhot = Bool(\"hot\")\n\n# Every zumpus is an impus\n# zumpus has been defined before\nimpus = Bool(\"impus\")\n\n# Each impus is large\n# impus has been defined before\nlarge = Bool(\"large\")\n\n# Every impus is a rompus\n# impus has been defined before\nrompus = Bool(\"rompus\")\n\n# Rompuses are spicy\n# rompus has been defined before\nspicy = Bool(\"spicy\")\n\n# Each rompus is a numpus\n# rompus has been defined before\nnumpus = Bool(\"numpus\")\n\n# Numpuses are amenable\n# numpus has been defined before\namenable = Bool(\"amenable\")\n\n# Each numpus is a jompus\n# numpus has been defined before\njompus = Bool(\"jompus\")\n\n# Jompuses are dull\n# jompus has been defined before\n# dull has been defined before\n\n# Each jompus is a wumpus\n# jompus has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Wumpuses are not metallic\n# wumpus has been defined before\nmetallic = Bool(\"metallic\")\n\n# Every wumpus is a tumpus\n# wumpus has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Max is a zumpus\nmax = Bool(\"max\")\n# zumpus has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Each yumpus is opaque\nsolver.add(Implies(yumpus, opaque))\n\n# Each yumpus is a dumpus\nsolver.add(Implies(yumpus, dumpus))\n\n# Vumpuses are not dull\nsolver.add(Implies(vumpus, Not(dull)))\n\n# Dumpuses are floral\nsolver.add(Implies(dumpus, floral))\n\n# Each dumpus is a zumpus\nsolver.add(Implies(dumpus, zumpus))\n\n# Each zumpus is hot\nsolver.add(Implies(zumpus, hot))\n\n# Every zumpus is an impus\nsolver.add(Implies(zumpus, impus))\n\n# Each impus is large\nsolver.add(Implies(impus, large))\n\n# Every impus is a rompus\nsolver.add(Implies(impus, rompus))\n\n# Rompuses are spicy\nsolver.add(Implies(rompus, spicy))\n\n# Each rompus is a numpus\nsolver.add(Implies(rompus, numpus))\n\n# Numpuses are amenable\nsolver.add(Implies(numpus, amenable))\n\n# Each numpus is a jompus\nsolver.add(Implies(numpus, jompus))\n\n# Jompuses are dull\nsolver.add(Implies(jompus, dull))\n\n# Each jompus is a wumpus\nsolver.add(Implies(jompus, wumpus))\n\n# Wumpuses are not metallic\nsolver.add(Implies(wumpus, Not(metallic)))\n\n# Every wumpus is a tumpus\nsolver.add(Implies(wumpus, tumpus))\n\n# Max is a zumpus\nsolver.add(Implies(max, zumpus))\n\n# Create facts in the problem\nsolver.add(max)\n\n# Create statements to be checked\n# Max is dull\nsolver.add(max, dull)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_14",
    "context": "Jompuses are large. Every jompus is a zumpus. Each zumpus is sweet. Zumpuses are numpuses. Every numpus is hot. Each tumpus is opaque. Numpuses are yumpuses. Every yumpus is brown. Each yumpus is a wumpus. Wumpuses are not opaque. Wumpuses are impuses. Fae is a jompus.",
    "question": "Is the following statement true or false? Fae is opaque.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Jompuses are large\njompus = Bool(\"jompus\")\nlarge = Bool(\"large\")\n\n# Every jompus is a zumpus\nzumpus = Bool(\"zumpus\")\n\n# Each zumpus is sweet\nsweet = Bool(\"sweet\")\n\n# Zumpuses are numpuses\nnumpus = Bool(\"numpus\")\n\n# Every numpus is hot\nhot = Bool(\"hot\")\n\n# Each tumpus is opaque\ntumpus = Bool(\"tumpus\")\nopaque = Bool(\"opaque\")\n\n# Numpuses are yumpuses\nyumpus = Bool(\"yumpus\")\n\n# Every yumpus is brown\nbrown = Bool(\"brown\")\n\n# Each yumpus is a wumpus\nwumpus = Bool(\"wumpus\")\n\n# Wumpuses are not opaque\n# Wumpuses has been defined before\n# Opaque has been defined before\n\n# Wumpuses are impuses\nimpus = Bool(\"impus\")\n\n# Fae is a jompus\nfae = Bool(\"fae\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Jompuses are large\nsolver.add(Implies(jompus, large))\n\n# Every jompus is a zumpus\nsolver.add(Implies(jompus, zumpus))\n\n# Each zumpus is sweet\nsolver.add(Implies(zumpus, sweet))\n\n# Zumpuses are numpuses\nsolver.add(Implies(zumpus, numpus))\n\n# Every numpus is hot\nsolver.add(Implies(numpus, hot))\n\n# Each tumpus is opaque\nsolver.add(Implies(tumpus, opaque))\n\n# Numpuses are yumpuses\nsolver.add(Implies(numpus, yumpus))\n\n# Every yumpus is brown\nsolver.add(Implies(yumpus, brown))\n\n# Each yumpus is a wumpus\nsolver.add(Implies(yumpus, wumpus))\n\n# Wumpuses are not opaque\nsolver.add(Implies(wumpus, Not(opaque)))\n\n# Wumpuses are impuses\nsolver.add(Implies(wumpus, impus))\n\n# Fae is a jompus\nsolver.add(Implies(fae, jompus))\n\n# Create facts in the problem\nsolver.add(fae)\n\n# Create statements to be checked\n# Fae is opaque\nsolver.add(fae, opaque)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_15",
    "context": "Jompuses are not small. Jompuses are tumpuses. Tumpuses are not kind. Each tumpus is a vumpus. Vumpuses are metallic. Vumpuses are numpuses. Each numpus is fruity. Each numpus is a dumpus. Dumpuses are nervous. Dumpuses are rompuses. Each rompus is opaque. Every wumpus is dull. Each rompus is a zumpus. Each zumpus is hot. Every zumpus is an impus. Every impus is not dull. Each impus is a yumpus. Sam is a numpus.",
    "question": "Is the following statement true or false? Sam is not dull.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Jompuses are not small\njompus = Bool(\"jompus\")\nsmall = Bool(\"small\")\n\n# Jompuses are tumpuses\n# Jompuses has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Tumpuses are not kind\n# Tumpuses has been defined before\nkind = Bool(\"kind\")\n\n# Each tumpus is a vumpus\n# Tumpuses has been defined before\nvumpus = Bool(\"vumpus\")\n\n# Vumpuses are metallic\n# Vumpuses has been defined before\nmetallic = Bool(\"metallic\")\n\n# Vumpuses are numpuses\n# Vumpuses has been defined before\nnumpus = Bool(\"numpus\")\n\n# Each numpus is fruity\n# Numpuses has been defined before\nfruity = Bool(\"fruity\")\n\n# Each numpus is a dumpus\n# Numpuses has been defined before\ndumpus = Bool(\"dumpus\")\n\n# Dumpuses are nervous\n# Dumpuses has been defined before\nnervous = Bool(\"nervous\")\n\n# Dumpuses are rompuses\n# Dumpuses has been defined before\nrompus = Bool(\"rompus\")\n\n# Each rompus is opaque\n# Rompus has been defined before\nopaque = Bool(\"opaque\")\n\n# Every wumpus is dull\nwumpus = Bool(\"wumpus\")\ndull = Bool(\"dull\")\n\n# Each rompus is a zumpus\n# Rompus has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Each zumpus is hot\n# Zumpus has been defined before\nhot = Bool(\"hot\")\n\n# Every zumpus is an impus\n# Zumpus has been defined before\nimpus = Bool(\"impus\")\n\n# Every impus is not dull\n# Impus has been defined before\n# Dull has been defined before\n\n# Each impus is a yumpus\n# Impus has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Sam is a numpus\nsam = Bool(\"sam\")\n# Numpus has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Jompuses are not small\nsolver.add(Implies(jompus, Not(small)))\n\n# Jompuses are tumpuses\nsolver.add(Implies(jompus, tumpus))\n\n# Tumpuses are not kind\nsolver.add(Implies(tumpus, Not(kind)))\n\n# Each tumpus is a vumpus\nsolver.add(Implies(tumpus, vumpus))\n\n# Vumpuses are metallic\nsolver.add(Implies(vumpus, metallic))\n\n# Vumpuses are numpuses\nsolver.add(Implies(vumpus, numpus))\n\n# Each numpus is fruity\nsolver.add(Implies(numpus, fruity))\n\n# Each numpus is a dumpus\nsolver.add(Implies(numpus, dumpus))\n\n# Dumpuses are nervous\nsolver.add(Implies(dumpus, nervous))\n\n# Dumpuses are rompuses\nsolver.add(Implies(dumpus, rompus))\n\n# Each rompus is opaque\nsolver.add(Implies(rompus, opaque))\n\n# Every wumpus is dull\nsolver.add(Implies(wumpus, dull))\n\n# Each rompus is a zumpus\nsolver.add(Implies(rompus, zumpus))\n\n# Each zumpus is hot\nsolver.add(Implies(zumpus, hot))\n\n# Every zumpus is an impus\nsolver.add(Implies(zumpus, impus))\n\n# Every impus is not dull\nsolver.add(Implies(impus, Not(dull)))\n\n# Each impus is a yumpus\nsolver.add(Implies(impus, yumpus))\n\n# Sam is a numpus\nsolver.add(Implies(sam, numpus))\n\n# Create statements to be checked\n# Sam is not dull\nsolver.add(sam, Not(dull))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_16",
    "context": "Yumpuses are hot. Each yumpus is a rompus. Rompuses are happy. Rompuses are impuses. Each impus is not amenable. Every impus is a dumpus. Dumpuses are opaque. Dumpuses are tumpuses. Numpuses are small. Tumpuses are orange. Every tumpus is a wumpus. Wumpuses are not small. Wumpuses are vumpuses. Every vumpus is fruity. Every vumpus is a jompus. Jompuses are not dull. Every jompus is a zumpus. Sally is a rompus.",
    "question": "Is the following statement true or false? Sally is small.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Yumpuses are hot.\nyumpus = Bool(\"yumpus\")\nhot = Bool(\"hot\")\n\n# Each yumpus is a rompus.\nrompus = Bool(\"rompus\")\n# Yumpuses has been defined before\n\n# Rompuses are happy.\nhappy = Bool(\"happy\")\n# Rompuses has been defined before\n\n# Rompuses are impuses.\nimpus = Bool(\"impus\")\n# Rompuses has been defined before\n\n# Each impus is not amenable.\namenable = Bool(\"amenable\")\n# Impus has been defined before\n\n# Every impus is a dumpus.\ndumpus = Bool(\"dumpus\")\n# Impus has been defined before\n\n# Dumpuses are opaque.\nopaque = Bool(\"opaque\")\n# Dumpus has been defined before\n\n# Dumpuses are tumpuses.\ntumpus = Bool(\"tumpus\")\n# Dumpus has been defined before\n\n# Numpuses are small.\nnumpus = Bool(\"numpus\")\nsmall = Bool(\"small\")\n\n# Tumpuses are orange.\norange = Bool(\"orange\")\n# Tumpus has been defined before\n\n# Every tumpus is a wumpus.\nwumpus = Bool(\"wumpus\")\n# Tumpus has been defined before\n\n# Wumpuses are not small.\n# Wumpuses has been defined before\n# Small has been defined before\n\n# Wumpuses are vumpuses.\nvumpus = Bool(\"vumpus\")\n# Wumpus has been defined before\n\n# Every vumpus is fruity.\nfruity = Bool(\"fruity\")\n# Vumpus has been defined before\n\n# Every vumpus is a jompus.\njompus = Bool(\"jompus\")\n# Vumpus has been defined before\n\n# Jompuses are not dull.\ndull = Bool(\"dull\")\n# Jompus has been defined before\n\n# Every jompus is a zumpus.\nzumpus = Bool(\"zumpus\")\n# Jompus has been defined before\n\n# Sally is a rompus.\nsally = Bool(\"sally\")\n# Rompus has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Yumpuses are hot.\nsolver.add(Implies(yumpus, hot))\n\n# Each yumpus is a rompus.\nsolver.add(Implies(yumpus, rompus))\n\n# Rompuses are happy.\nsolver.add(Implies(rompus, happy))\n\n# Rompuses are impuses.\nsolver.add(Implies(rompus, impus))\n\n# Each impus is not amenable.\nsolver.add(Implies(impus, Not(amenable)))\n\n# Every impus is a dumpus.\nsolver.add(Implies(impus, dumpus))\n\n# Dumpuses are opaque.\nsolver.add(Implies(dumpus, opaque))\n\n# Dumpuses are tumpuses.\nsolver.add(Implies(dumpus, tumpus))\n\n# Numpuses are small.\nsolver.add(Implies(numpus, small))\n\n# Tumpuses are orange.\nsolver.add(Implies(tumpus, orange))\n\n# Every tumpus is a wumpus.\nsolver.add(Implies(tumpus, wumpus))\n\n# Wumpuses are not small.\nsolver.add(Implies(wumpus, Not(small)))\n\n# Wumpuses are vumpuses.\nsolver.add(Implies(wumpus, vumpus))\n\n# Every vumpus is fruity.\nsolver.add(Implies(vumpus, fruity))\n\n# Every vumpus is a jompus.\nsolver.add(Implies(vumpus, jompus))\n\n# Jompuses are not dull.\nsolver.add(Implies(jompus, Not(dull)))\n\n# Every jompus is a zumpus.\nsolver.add(Implies(jompus, zumpus))\n\n# Sally is a rompus.\nsolver.add(Implies(sally, rompus))\n\n# Create facts in the problem\nsolver.add(sally)\n\n# Create statements to be checked\n# Sally is small.\nsolver.add(sally, small)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_17",
    "context": "Each numpus is not nervous. Every numpus is a wumpus. Wumpuses are liquid. Each wumpus is a jompus. Jompuses are fruity. Zumpuses are not opaque. Each jompus is a yumpus. Every yumpus is kind. Yumpuses are vumpuses. Vumpuses are opaque. Every vumpus is an impus. Impuses are not small. Impuses are rompuses. Rompuses are dull. Rompuses are tumpuses. Every tumpus is temperate. Every tumpus is a dumpus. Fae is a numpus.",
    "question": "Is the following statement true or false? Fae is not opaque.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Each numpus is not nervous\nnumpus = Bool(\"numpus\")\nnervous = Bool(\"nervous\")\n\n# Every numpus is a wumpus\n# numpus has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Wumpuses are liquid\n# wumpus has been defined before\nliquid = Bool(\"liquid\")\n\n# Each wumpus is a jompus\n# wumpus has been defined before\njompus = Bool(\"jompus\")\n\n# Jompuses are fruity\n# jompus has been defined before\nfruity = Bool(\"fruity\")\n\n# Zumpuses are not opaque\nzumpus = Bool(\"zumpus\")\nopaque = Bool(\"opaque\")\n\n# Each jompus is a yumpus\n# jompus has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Every yumpus is kind\n# yumpus has been defined before\nkind = Bool(\"kind\")\n\n# Yumpuses are vumpuses\n# yumpus has been defined before\nvumpus = Bool(\"vumpus\")\n\n# Vumpuses are opaque\n# vumpus has been defined before\n# opaque has been defined before\n\n# Every vumpus is an impus\n# vumpus has been defined before\nimpus = Bool(\"impus\")\n\n# Impuses are not small\n# impus has been defined before\nsmall = Bool(\"small\")\n\n# Impuses are rompuses\n# impus has been defined before\nrompus = Bool(\"rompus\")\n\n# Rompuses are dull\n# rompus has been defined before\ndull = Bool(\"dull\")\n\n# Rompuses are tumpuses\n# rompus has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Every tumpus is temperate\n# tumpus has been defined before\ntemperate = Bool(\"temperate\")\n\n# Every tumpus is a dumpus\n# tumpus has been defined before\ndumpus = Bool(\"dumpus\")\n\n# Fae is a numpus\nfae = Bool(\"fae\")\n# numpus has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Each numpus is not nervous\nsolver.add(Implies(numpus, Not(nervous)))\n\n# Every numpus is a wumpus\nsolver.add(Implies(numpus, wumpus))\n\n# Wumpuses are liquid\nsolver.add(Implies(wumpus, liquid))\n\n# Each wumpus is a jompus\nsolver.add(Implies(wumpus, jompus))\n\n# Jompuses are fruity\nsolver.add(Implies(jompus, fruity))\n\n# Zumpuses are not opaque\nsolver.add(Implies(zumpus, Not(opaque)))\n\n# Each jompus is a yumpus\nsolver.add(Implies(jompus, yumpus))\n\n# Every yumpus is kind\nsolver.add(Implies(yumpus, kind))\n\n# Yumpuses are vumpuses\nsolver.add(Implies(yumpus, vumpus))\n\n# Vumpuses are opaque\nsolver.add(Implies(vumpus, opaque))\n\n# Every vumpus is an impus\nsolver.add(Implies(vumpus, impus))\n\n# Impuses are not small\nsolver.add(Implies(impus, Not(small)))\n\n# Impuses are rompuses\nsolver.add(Implies(impus, rompus))\n\n# Rompuses are dull\nsolver.add(Implies(rompus, dull))\n\n# Rompuses are tumpuses\nsolver.add(Implies(rompus, tumpus))\n\n# Every tumpus is temperate\nsolver.add(Implies(tumpus, temperate))\n\n# Every tumpus is a dumpus\nsolver.add(Implies(tumpus, dumpus))\n\n# Fae is a numpus\nsolver.add(Implies(fae, numpus))\n\n# Create facts in the problem\nsolver.add(fae)\n\n# Create statements to be checked\n# Fae is not opaque\nsolver.add(fae, Not(opaque))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_18",
    "context": "Each dumpus is bright. Each dumpus is a rompus. Every rompus is aggressive. Every rompus is a yumpus. Yumpuses are brown. Yumpuses are vumpuses. Every impus is fruity. Every vumpus is sour. Every vumpus is a numpus. Every numpus is not temperate. Every numpus is a zumpus. Zumpuses are metallic. Zumpuses are jompuses. Each jompus is not fruity. Jompuses are tumpuses. Tumpuses are opaque. Every tumpus is a wumpus. Sam is a yumpus.",
    "question": "Is the following statement true or false? Sam is fruity.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Each dumpus is bright\ndumpus = Bool(\"dumpus\")\nbright = Bool(\"bright\")\n\n# Each dumpus is a rompus\n# dumpus has been defined before\nrompus = Bool(\"rompus\")\n\n# Every rompus is aggressive\n# rompus has been defined before\naggressive = Bool(\"aggressive\")\n\n# Every rompus is a yumpus\n# rompus has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Yumpuses are brown\n# yumpus has been defined before\nbrown = Bool(\"brown\")\n\n# Yumpuses are vumpuses\n# yumpus has been defined before\nvumpus = Bool(\"vumpus\")\n\n# Every impus is fruity\nimpus = Bool(\"impus\")\nfruity = Bool(\"fruity\")\n\n# Every vumpus is sour\nvumpus = Bool(\"vumpus\")\nsour = Bool(\"sour\")\n\n# Every vumpus is a numpus\n# vumpus has been defined before\nnumpus = Bool(\"numpus\")\n\n# Every numpus is not temperate\n# numpus has been defined before\ntemperate = Bool(\"temperate\")\n\n# Every numpus is a zumpus\n# numpus has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Zumpuses are metallic\n# zumpus has been defined before\nmetallic = Bool(\"metallic\")\n\n# Zumpuses are jompuses\n# zumpus has been defined before\njompus = Bool(\"jompus\")\n\n# Each jompus is not fruity\njompus = Bool(\"jompus\")\nfruity = Bool(\"fruity\")\n\n# Jompuses are tumpuses\n# jompus has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Tumpuses are opaque\n# tumpus has been defined before\nopaque = Bool(\"opaque\")\n\n# Every tumpus is a wumpus\n# tumpus has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Sam is a yumpus\nsam = Bool(\"sam\")\n# yumpus has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Each dumpus is bright\nsolver.add(Implies(dumpus, bright))\n\n# Each dumpus is a rompus\nsolver.add(Implies(dumpus, rompus))\n\n# Every rompus is aggressive\nsolver.add(Implies(rompus, aggressive))\n\n# Every rompus is a yumpus\nsolver.add(Implies(rompus, yumpus))\n\n# Yumpuses are brown\nsolver.add(Implies(yumpus, brown))\n\n# Yumpuses are vumpuses\nsolver.add(Implies(yumpus, vumpus))\n\n# Every impus is fruity\nsolver.add(Implies(impus, fruity))\n\n# Every vumpus is sour\nsolver.add(Implies(vumpus, sour))\n\n# Every vumpus is a numpus\nsolver.add(Implies(vumpus, numpus))\n\n# Every numpus is not temperate\nsolver.add(Implies(numpus, Not(temperate)))\n\n# Every numpus is a zumpus\nsolver.add(Implies(numpus, zumpus))\n\n# Zumpuses are metallic\nsolver.add(Implies(zumpus, metallic))\n\n# Zumpuses are jompuses\nsolver.add(Implies(zumpus, jompus))\n\n# Each jompus is not fruity\nsolver.add(Implies(jompus, Not(fruity)))\n\n# Jompuses are tumpuses\nsolver.add(Implies(jompus, tumpus))\n\n# Tumpuses are opaque\nsolver.add(Implies(tumpus, opaque))\n\n# Every tumpus is a wumpus\nsolver.add(Implies(tumpus, wumpus))\n\n# Sam is a yumpus\nsolver.add(Implies(sam, yumpus))\n\n# Create facts in the problem\nsolver.add(sam)\n\n# Create statements to be checked\n# Sam is fruity\nsolver.add(sam, fruity)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_19",
    "context": "Each numpus is not opaque. Each numpus is a wumpus. Each wumpus is feisty. Wumpuses are tumpuses. Tumpuses are fruity. Every tumpus is a dumpus. Every dumpus is wooden. Each dumpus is a yumpus. Yumpuses are blue. Each yumpus is a zumpus. Every zumpus is spicy. Zumpuses are impuses. Each impus is not kind. Impuses are rompuses. Jompuses are not dull. Every rompus is dull. Each rompus is a vumpus. Sam is a dumpus.",
    "question": "Is the following statement true or false? Sam is not dull.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Each numpus is not opaque\nnumpus = Bool(\"numpus\")\nopaque = Bool(\"opaque\")\n\n# Each numpus is a wumpus\nwumpus = Bool(\"wumpus\")\n\n# Each wumpus is feisty\nfeisty = Bool(\"feisty\")\n\n# Wumpuses are tumpuses\ntumpus = Bool(\"tumpus\")\n\n# Tumpuses are fruity\nfruity = Bool(\"fruity\")\n\n# Every tumpus is a dumpus\ndumpus = Bool(\"dumpus\")\n\n# Every dumpus is wooden\nwooden = Bool(\"wooden\")\n\n# Each dumpus is a yumpus\nyumpus = Bool(\"yumpus\")\n\n# Yumpuses are blue\nblue = Bool(\"blue\")\n\n# Each yumpus is a zumpus\nzumpus = Bool(\"zumpus\")\n\n# Every zumpus is spicy\nspicy = Bool(\"spicy\")\n\n# Zumpuses are impuses\nimpus = Bool(\"impus\")\n\n# Each impus is not kind\nkind = Bool(\"kind\")\n\n# Impuses are rompuses\nrompus = Bool(\"rompus\")\n\n# Jompuses are not dull\njompus = Bool(\"jompus\")\ndull = Bool(\"dull\")\n\n# Every rompus is dull\nvumpus = Bool(\"vumpus\")\n\n# Sam is a dumpus\nsam = Bool(\"sam\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Each numpus is not opaque\nsolver.add(Implies(numpus, Not(opaque)))\n\n# Each numpus is a wumpus\nsolver.add(Implies(numpus, wumpus))\n\n# Each wumpus is feisty\nsolver.add(Implies(wumpus, feisty))\n\n# Wumpuses are tumpuses\nsolver.add(Implies(wumpus, tumpus))\n\n# Tumpuses are fruity\nsolver.add(Implies(tumpus, fruity))\n\n# Every tumpus is a dumpus\nsolver.add(Implies(tumpus, dumpus))\n\n# Every dumpus is wooden\nsolver.add(Implies(dumpus, wooden))\n\n# Each dumpus is a yumpus\nsolver.add(Implies(dumpus, yumpus))\n\n# Yumpuses are blue\nsolver.add(Implies(yumpus, blue))\n\n# Each yumpus is a zumpus\nsolver.add(Implies(yumpus, zumpus))\n\n# Every zumpus is spicy\nsolver.add(Implies(zumpus, spicy))\n\n# Zumpuses are impuses\nsolver.add(Implies(zumpus, impus))\n\n# Each impus is not kind\nsolver.add(Implies(impus, Not(kind)))\n\n# Impuses are rompuses\nsolver.add(Implies(impus, rompus))\n\n# Jompuses are not dull\nsolver.add(Implies(jompus, Not(dull)))\n\n# Every rompus is dull\nsolver.add(Implies(rompus, dull))\n\n# Sam is a dumpus\nsolver.add(Implies(sam, dumpus))\n\n# Create facts in the problem\nsolver.add(sam)\n\n# Create statements to be checked\n# Sam is not dull\nsolver.add(sam, Not(dull))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_20",
    "context": "Each yumpus is not small. Each yumpus is a dumpus. Each dumpus is opaque. Every dumpus is a jompus. Each jompus is shy. Each numpus is sour. Every jompus is a tumpus. Each tumpus is brown. Each tumpus is a vumpus. Vumpuses are dull. Vumpuses are wumpuses. Every wumpus is not sour. Wumpuses are rompuses. Each rompus is not luminous. Rompuses are impuses. Stella is a dumpus.",
    "question": "Is the following statement true or false? Stella is sour.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Each yumpus is not small\nyumpus = Bool(\"yumpus\")\nsmall = Bool(\"small_yumpus\")\n\n# Each yumpus is a dumpus\n# yumpus has been defined before\ndumpus = Bool(\"dumpus\")\n\n# Each dumpus is opaque\n# dumpus has been defined before\nopaque = Bool(\"opaque\")\n\n# Every dumpus is a jompus\n# dumpus has been defined before\njompus = Bool(\"jompus\")\n\n# Each jompus is shy\n# jompus has been defined before\nshy = Bool(\"shy\")\n\n# Each numpus is sour\nnumpus = Bool(\"numpus\")\nsour = Bool(\"sour_numpus\")\n\n# Every jompus is a tumpus\n# jompus has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Each tumpus is brown\n# tumpus has been defined before\nbrown = Bool(\"brown\")\n\n# Each tumpus is a vumpus\n# tumpus has been defined before\nvumpus = Bool(\"vumpus\")\n\n# Vumpuses are dull\n# vumpus has been defined before\ndull = Bool(\"dull\")\n\n# Vumpuses are wumpuses\n# vumpus has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Every wumpus is not sour\n# wumpus has been defined before\nsour_wumpus = Bool(\"sour_wumpus\")\n\n# Wumpuses are rompuses\n# wumpus has been defined before\nrompus = Bool(\"rompus\")\n\n# Each rompus is not luminous\n# rompus has been defined before\nluminous = Bool(\"luminous_rompus\")\n\n# Rompuses are impuses\n# rompus has been defined before\nimpus = Bool(\"impus\")\n\n# Stella is a dumpus\nstella = Bool(\"stella\")\n# dumpus has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Each yumpus is not small\nsolver.add(Implies(yumpus, Not(small)))\n# Each yumpus is a dumpus\nsolver.add(Implies(yumpus, dumpus))\n# Each dumpus is opaque\nsolver.add(Implies(dumpus, opaque))\n# Every dumpus is a jompus\nsolver.add(Implies(dumpus, jompus))\n# Each jompus is shy\nsolver.add(Implies(jompus, shy))\n# Each numpus is sour\nsolver.add(Implies(numpus, sour))\n# Every jompus is a tumpus\nsolver.add(Implies(jompus, tumpus))\n# Each tumpus is brown\nsolver.add(Implies(tumpus, brown))\n# Each tumpus is a vumpus\nsolver.add(Implies(tumpus, vumpus))\n# Vumpuses are dull\nsolver.add(Implies(vumpus, dull))\n# Vumpuses are wumpuses\nsolver.add(Implies(vumpus, wumpus))\n# Every wumpus is not sour\nsolver.add(Implies(wumpus, Not(sour_wumpus)))\n# Wumpuses are rompuses\nsolver.add(Implies(wumpus, rompus))\n# Each rompus is not luminous\nsolver.add(Implies(rompus, Not(luminous)))\n\n# Stella is a dumpus\nsolver.add(Implies(stella, dumpus))\n\n# Create statements to be checked\n# Stella is sour\nsolver.add(stella, sour)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_21",
    "context": "Vumpuses are earthy. Vumpuses are dumpuses. Dumpuses are not wooden. Dumpuses are numpuses. Every numpus is kind. Each numpus is a rompus. Each rompus is small. Every rompus is a jompus. Every jompus is bright. Jompuses are yumpuses. Yumpuses are orange. Every yumpus is a zumpus. Zumpuses are sour. Zumpuses are impuses. Impuses are transparent. Tumpuses are not orange. Each impus is a wumpus. Max is a dumpus.",
    "question": "Is the following statement true or false? Max is orange.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Vumpuses are earthy.\nvumpus = Bool(\"vumpus\")\nearthy = Bool(\"earthy\")\n\n# Vumpuses are dumpuses.\n# Vumpuses has been defined before\ndumpus = Bool(\"dumpus\")\n\n# Dumpuses are not wooden.\n# Dumpuses has been defined before\nwooden = Bool(\"wooden\")\n\n# Dumpuses are numpuses.\n# Dumpuses has been defined before\nnumpus = Bool(\"numpus\")\n\n# Every numpus is kind.\nnumpus = Bool(\"numpus\")\nkind = Bool(\"kind\")\n\n# Each numpus is a rompus.\n# Numpus has been defined before\nrompus = Bool(\"rompus\")\n\n# Each rompus is small.\n# Rompus has been defined before\nsmall = Bool(\"small\")\n\n# Every rompus is a jompus.\nrompus = Bool(\"rompus\")\njompus = Bool(\"jompus\")\n\n# Every jompus is bright.\n# Jompus has been defined before\nbright = Bool(\"bright\")\n\n# Jompuses are yumpuses.\njompus = Bool(\"jompus\")\nyumpus = Bool(\"yumpus\")\n\n# Yumpuses are orange.\n# Yumpuses has been defined before\norange = Bool(\"orange\")\n\n# Every yumpus is a zumpus.\nyumpus = Bool(\"yumpus\")\nzumpus = Bool(\"zumpus\")\n\n# Zumpuses are sour.\n# Zumpuses has been defined before\nsour = Bool(\"sour\")\n\n# Zumpuses are impuses.\n# Zumpuses has been defined before\nimpus = Bool(\"impus\")\n\n# Impuses are transparent.\n# Impuses has been defined before\ntransparent = Bool(\"transparent\")\n\n# Tumpuses are not orange.\ntumpus = Bool(\"tumpus\")\n\n# Each impus is a wumpus.\nimpus = Bool(\"impus\")\nwumpus = Bool(\"wumpus\")\n\n# Max is a dumpus.\nmax = Bool(\"max\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Vumpuses are earthy.\nsolver.add(Implies(vumpus, earthy))\n\n# Vumpuses are dumpuses.\nsolver.add(Implies(vumpus, dumpus))\n\n# Dumpuses are not wooden.\nsolver.add(Implies(dumpus, Not(wooden)))\n\n# Dumpuses are numpuses.\nsolver.add(Implies(dumpus, numpus))\n\n# Every numpus is kind.\nsolver.add(Implies(numpus, kind))\n\n# Each numpus is a rompus.\nsolver.add(Implies(numpus, rompus))\n\n# Each rompus is small.\nsolver.add(Implies(rompus, small))\n\n# Every rompus is a jompus.\nsolver.add(Implies(rompus, jompus))\n\n# Every jompus is bright.\nsolver.add(Implies(jompus, bright))\n\n# Jompuses are yumpuses.\nsolver.add(Implies(jompus, yumpus))\n\n# Yumpuses are orange.\nsolver.add(Implies(yumpus, orange))\n\n# Every yumpus is a zumpus.\nsolver.add(Implies(yumpus, zumpus))\n\n# Zumpuses are sour.\nsolver.add(Implies(zumpus, sour))\n\n# Zumpuses are impuses.\nsolver.add(Implies(zumpus, impus))\n\n# Impuses are transparent.\nsolver.add(Implies(impus, transparent))\n\n# Tumpuses are not orange.\nsolver.add(Implies(tumpus, Not(orange)))\n\n# Each impus is a wumpus.\nsolver.add(Implies(impus, wumpus))\n\n# Max is a dumpus.\nsolver.add(Implies(max, dumpus))\n\n# Create statements to be checked\n# Max is orange.\nsolver.add(max, orange)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_22",
    "context": "Every wumpus is sour. Wumpuses are yumpuses. Each yumpus is aggressive. Every yumpus is a tumpus. Every tumpus is transparent. Tumpuses are vumpuses. Vumpuses are wooden. Each vumpus is a jompus. Each impus is not feisty. Every jompus is large. Jompuses are numpuses. Numpuses are red. Numpuses are rompuses. Every rompus is feisty. Each rompus is a zumpus. Wren is a tumpus.",
    "question": "Is the following statement true or false? Wren is not feisty.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every wumpus is sour\nwumpus = Bool(\"wumpus\")\nsour = Bool(\"sour\")\n\n# Wumpuses are yumpuses\n# wumpus has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Each yumpus is aggressive\n# yumpus has been defined before\naggressive = Bool(\"aggressive\")\n\n# Every yumpus is a tumpus\n# yumpus has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Every tumpus is transparent\n# tumpus has been defined before\ntransparent = Bool(\"transparent\")\n\n# Tumpuses are vumpuses\n# tumpus has been defined before\nvumpus = Bool(\"vumpus\")\n\n# Vumpuses are wooden\n# vumpus has been defined before\nwooden = Bool(\"wooden\")\n\n# Each vumpus is a jompus\n# vumpus has been defined before\njompus = Bool(\"jompus\")\n\n# Each impus is not feisty\nimpus = Bool(\"impus\")\nfeisty = Bool(\"feisty\")\n\n# Every jompus is large\n# jompus has been defined before\nlarge = Bool(\"large\")\n\n# Jompuses are numpuses\n# jompus has been defined before\nnumpus = Bool(\"numpus\")\n\n# Numpuses are red\n# numpus has been defined before\nred = Bool(\"red\")\n\n# Numpuses are rompuses\n# numpus has been defined before\nrompus = Bool(\"rompus\")\n\n# Every rompus is feisty\n# rompus has been defined before\n# feisty has been defined before\n\n# Each rompus is a zumpus\nrompus = Bool(\"rompus\")\nzumpus = Bool(\"zumpus\")\n\n# Wren is a tumpus\nwren = Bool(\"wren\")\n# Tumpus has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every wumpus is sour\nsolver.add(Implies(wumpus, sour))\n\n# Wumpuses are yumpuses\nsolver.add(Implies(wumpus, yumpus))\n\n# Each yumpus is aggressive\nsolver.add(Implies(yumpus, aggressive))\n\n# Every yumpus is a tumpus\nsolver.add(Implies(yumpus, tumpus))\n\n# Every tumpus is transparent\nsolver.add(Implies(tumpus, transparent))\n\n# Tumpuses are vumpuses\nsolver.add(Implies(tumpus, vumpus))\n\n# Vumpuses are wooden\nsolver.add(Implies(vumpus, wooden))\n\n# Each vumpus is a jompus\nsolver.add(Implies(vumpus, jompus))\n\n# Each impus is not feisty\nsolver.add(Implies(impus, Not(feisty)))\n\n# Every jompus is large\nsolver.add(Implies(jompus, large))\n\n# Jompuses are numpuses\nsolver.add(Implies(jompus, numpus))\n\n# Numpuses are red\nsolver.add(Implies(numpus, red))\n\n# Numpuses are rompuses\nsolver.add(Implies(numpus, rompus))\n\n# Every rompus is feisty\nsolver.add(Implies(rompus, feisty))\n\n# Each rompus is a zumpus\nsolver.add(Implies(rompus, zumpus))\n\n# Wren is a tumpus\nsolver.add(Implies(wren, tumpus))\n\n# Create statements to be checked\n# Wren is not feisty\nsolver.add(wren, Not(feisty))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_23",
    "context": "Every zumpus is not opaque. Each zumpus is a numpus. Numpuses are brown. Numpuses are dumpuses. Each dumpus is amenable. Impuses are not bitter. Every dumpus is a vumpus. Each vumpus is not cold. Each vumpus is a tumpus. Every tumpus is wooden. Every tumpus is a rompus. Each rompus is floral. Rompuses are yumpuses. Yumpuses are bitter. Every yumpus is a wumpus. Wumpuses are not feisty. Wumpuses are jompuses. Sally is a dumpus.",
    "question": "Is the following statement true or false? Sally is bitter.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every zumpus is not opaque\nzumpus = Bool(\"zumpus\")\nopaque = Bool(\"opaque\")\n\n# Each zumpus is a numpus\nnumpus = Bool(\"numpus\")\n\n# Numpuses are brown\nbrown = Bool(\"brown\")\n\n# Numpuses are dumpuses\ndumpus = Bool(\"dumpus\")\n\n# Each dumpus is amenable\namenable = Bool(\"amenable\")\n\n# Impuses are not bitter\nimpus = Bool(\"impus\")\nbitter = Bool(\"bitter\")\n\n# Every dumpus is a vumpus\nvumpus = Bool(\"vumpus\")\n\n# Each vumpus is not cold\ncold = Bool(\"cold\")\n\n# Each vumpus is a tumpus\ntumpus = Bool(\"tumpus\")\n\n# Every tumpus is wooden\nwooden = Bool(\"wooden\")\n\n# Every tumpus is a rompus\nrompus = Bool(\"rompus\")\n\n# Each rompus is floral\nfloral = Bool(\"floral\")\n\n# Rompuses are yumpuses\nyumpus = Bool(\"yumpus\")\n\n# Yumpuses are bitter\n# Yumpuses has been defined before\n# Bitter has been defined before\n\n# Every yumpus is a wumpus\nwumpus = Bool(\"wumpus\")\n\n# Wumpuses are not feisty\nfeisty = Bool(\"feisty\")\n\n# Wumpuses are jompuses\njompus = Bool(\"jompus\")\n\n# Sally is a dumpus\nsally = Bool(\"sally\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every zumpus is not opaque\nsolver.add(Implies(zumpus, Not(opaque)))\n\n# Each zumpus is a numpus\nsolver.add(Implies(zumpus, numpus))\n\n# Numpuses are brown\nsolver.add(Implies(numpus, brown))\n\n# Numpuses are dumpuses\nsolver.add(Implies(numpus, dumpus))\n\n# Each dumpus is amenable\nsolver.add(Implies(dumpus, amenable))\n\n# Impuses are not bitter\nsolver.add(Implies(impus, Not(bitter)))\n\n# Every dumpus is a vumpus\nsolver.add(Implies(dumpus, vumpus))\n\n# Each vumpus is not cold\nsolver.add(Implies(vumpus, Not(cold)))\n\n# Each vumpus is a tumpus\nsolver.add(Implies(vumpus, tumpus))\n\n# Every tumpus is wooden\nsolver.add(Implies(tumpus, wooden))\n\n# Every tumpus is a rompus\nsolver.add(Implies(tumpus, rompus))\n\n# Each rompus is floral\nsolver.add(Implies(rompus, floral))\n\n# Rompuses are yumpuses\nsolver.add(Implies(rompus, yumpus))\n\n# Yumpuses are bitter\nsolver.add(Implies(yumpus, bitter))\n\n# Every yumpus is a wumpus\nsolver.add(Implies(yumpus, wumpus))\n\n# Wumpuses are not feisty\nsolver.add(Implies(wumpus, Not(feisty)))\n\n# Wumpuses are jompuses\nsolver.add(Implies(wumpus, jompus))\n\n# Sally is a dumpus\nsolver.add(Implies(sally, dumpus))\n\n# Create facts in the problem\nsolver.add(sally)\n\n# Create statements to be checked\n# Sally is bitter\nsolver.add(sally, bitter)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_24",
    "context": "Every numpus is floral. Numpuses are jompuses. Jompuses are not nervous. Each jompus is an impus. Every impus is brown. Every dumpus is not amenable. Each impus is a wumpus. Wumpuses are not bitter. Each wumpus is a zumpus. Every zumpus is not small. Zumpuses are vumpuses. Vumpuses are hot. Vumpuses are rompuses. Rompuses are amenable. Every rompus is a tumpus. Every tumpus is bright. Every tumpus is a yumpus. Alex is an impus.",
    "question": "Is the following statement true or false? Alex is amenable.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every numpus is floral\nnumpus = Bool(\"numpus\")\nfloral = Bool(\"floral\")\n\n# Numpuses are jompuses\n# numpus has been defined before\njompus = Bool(\"jompus\")\n\n# Jompuses are not nervous\n# jompus has been defined before\nnervous = Bool(\"nervous\")\n\n# Each jompus is an impus\n# jompus has been defined before\nimpus = Bool(\"impus\")\n\n# Every impus is brown\n# impus has been defined before\nbrown = Bool(\"brown\")\n\n# Every dumpus is not amenable\ndumpus = Bool(\"dumpus\")\namenable = Bool(\"amenable\")\n\n# Each impus is a wumpus\n# impus has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Wumpuses are not bitter\n# wumpus has been defined before\nbitter = Bool(\"bitter\")\n\n# Each wumpus is a zumpus\n# wumpus has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Every zumpus is not small\n# zumpus has been defined before\nsmall = Bool(\"small\")\n\n# Zumpuses are vumpuses\n# zumpus has been defined before\nvumpus = Bool(\"vumpus\")\n\n# Vumpuses are hot\n# vumpus has been defined before\nhot = Bool(\"hot\")\n\n# Vumpuses are rompuses\n# vumpus has been defined before\nrompus = Bool(\"rompus\")\n\n# Rompuses are amenable\n# rompus has been defined before\namenable = Bool(\"amenable\")\n\n# Every rompus is a tumpus\n# rompus has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Every tumpus is bright\n# tumpus has been defined before\nbright = Bool(\"bright\")\n\n# Every tumpus is a yumpus\n# tumpus has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Alex is an impus\nalex = Bool(\"alex\")\n# Impus has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every numpus is floral\nsolver.add(Implies(numpus, floral))\n\n# Numpuses are jompuses\nsolver.add(Implies(numpus, jompus))\n\n# Jompuses are not nervous\nsolver.add(Implies(jompus, Not(nervous)))\n\n# Each jompus is an impus\nsolver.add(Implies(jompus, impus))\n\n# Every impus is brown\nsolver.add(Implies(impus, brown))\n\n# Every dumpus is not amenable\nsolver.add(Implies(dumpus, Not(amenable)))\n\n# Each impus is a wumpus\nsolver.add(Implies(impus, wumpus))\n\n# Wumpuses are not bitter\nsolver.add(Implies(wumpus, Not(bitter)))\n\n# Each wumpus is a zumpus\nsolver.add(Implies(wumpus, zumpus))\n\n# Every zumpus is not small\nsolver.add(Implies(zumpus, Not(small)))\n\n# Zumpuses are vumpuses\nsolver.add(Implies(zumpus, vumpus))\n\n# Vumpuses are hot\nsolver.add(Implies(vumpus, hot))\n\n# Vumpuses are rompuses\nsolver.add(Implies(vumpus, rompus))\n\n# Rompuses are amenable\nsolver.add(Implies(rompus, amenable))\n\n# Every rompus is a tumpus\nsolver.add(Implies(rompus, tumpus))\n\n# Every tumpus is bright\nsolver.add(Implies(tumpus, bright))\n\n# Every tumpus is a yumpus\nsolver.add(Implies(tumpus, yumpus))\n\n# Alex is an impus\nsolver.add(Implies(alex, impus))\n\n# Create facts in the problem\n\n# Create statements to be checked\n# Alex is amenable\nsolver.add(alex, amenable)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_25",
    "context": "Zumpuses are dull. Every vumpus is not transparent. Vumpuses are numpuses. Numpuses are blue. Numpuses are wumpuses. Wumpuses are liquid. Each wumpus is a tumpus. Tumpuses are not spicy. Tumpuses are rompuses. Each rompus is not dull. Rompuses are yumpuses. Every yumpus is floral. Every yumpus is an impus. Impuses are hot. Each impus is a jompus. Every jompus is large. Jompuses are dumpuses. Sam is a vumpus.",
    "question": "Is the following statement true or false? Sam is not dull.",
    "program": "```python\nfrom z3 import * \n\n# Define boolean variables for all entities\n# Zumpuses are dull.\nzumpus = Bool(\"zumpus\") \n\n# Every vumpus is not transparent.\nvumpus = Bool(\"vumpus\") \ntransparent = Bool(\"transparent\") \n\n# Vumpuses are numpuses.\nnumpus = Bool(\"numpus\") \n\n# Numpuses are blue.\nblue = Bool(\"blue\") \n\n# Numpuses are wumpuses.\nwumpus = Bool(\"wumpus\") \n\n# Wumpuses are liquid.\nliquid = Bool(\"liquid\") \n\n# Each wumpus is a tumpus.\ntumpus = Bool(\"tumpus\") \n\n# Tumpuses are not spicy.\nspicy = Bool(\"spicy\") \n\n# Tumpuses are rompuses.\nrompus = Bool(\"rompus\") \n\n# Each rompus is not dull.\ndull = Bool(\"dull\") \n\n# Rompuses are yumpuses.\nyumpus = Bool(\"yumpus\") \n\n# Every yumpus is floral.\nfloral = Bool(\"floral\") \n\n# Every yumpus is an impus.\nimpus = Bool(\"impus\") \n\n# Impuses are hot.\nhot = Bool(\"hot\") \n\n# Each impus is a jompus.\njompus = Bool(\"jompus\") \n\n# Every jompus is large.\nlarge = Bool(\"large\") \n\n# Jompuses are dumpuses.\ndumpus = Bool(\"dumpus\") \n\n# Sam is a vumpus.\nsam = Bool(\"sam\") \n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Zumpuses are dull.\nsolver.add(Implies(zumpus, dull)) \n\n# Every vumpus is not transparent.\nsolver.add(Implies(vumpus, Not(transparent))) \n\n# Vumpuses are numpuses.\nsolver.add(Implies(vumpus, numpus)) \n\n# Numpuses are blue.\nsolver.add(Implies(numpus, blue)) \n\n# Numpuses are wumpuses.\nsolver.add(Implies(numpus, wumpus)) \n\n# Wumpuses are liquid.\nsolver.add(Implies(wumpus, liquid)) \n\n# Each wumpus is a tumpus.\nsolver.add(Implies(wumpus, tumpus)) \n\n# Tumpuses are not spicy.\nsolver.add(Implies(tumpus, Not(spicy))) \n\n# Tumpuses are rompuses.\nsolver.add(Implies(tumpus, rompus)) \n\n# Each rompus is not dull.\nsolver.add(Implies(rompus, Not(dull))) \n\n# Rompuses are yumpuses.\nsolver.add(Implies(rompus, yumpus)) \n\n# Every yumpus is floral.\nsolver.add(Implies(yumpus, floral)) \n\n# Every yumpus is an impus.\nsolver.add(Implies(yumpus, impus)) \n\n# Impuses are hot.\nsolver.add(Implies(impus, hot)) \n\n# Each impus is a jompus.\nsolver.add(Implies(impus, jompus)) \n\n# Every jompus is large.\nsolver.add(Implies(jompus, large)) \n\n# Jompuses are dumpuses.\nsolver.add(Implies(jompus, dumpus)) \n\n# Sam is a vumpus.\nsolver.add(Implies(sam, vumpus)) \n\n# Create facts in the problem\nsolver.add(sam)\n\n# Create statements to be checked\n# Sam is not dull.\nsolver.add(sam, Not(dull))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_26",
    "context": "Each numpus is fruity. Every numpus is a tumpus. Every tumpus is dull. Every tumpus is a jompus. Every jompus is not orange. Each jompus is an impus. Each impus is not shy. Impuses are wumpuses. Wumpuses are sweet. Wumpuses are rompuses. Every rompus is not amenable. Each rompus is a zumpus. Every zumpus is large. Zumpuses are yumpuses. Every vumpus is not large. Yumpuses are transparent. Yumpuses are dumpuses. Rex is a jompus.",
    "question": "Is the following statement true or false? Rex is large.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Each numpus is fruity\nnumpus = Bool(\"numpus\")\nfruity = Bool(\"fruity\")\n\n# Every numpus is a tumpus\n# numpus has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Every tumpus is dull\n# tumpus has been defined before\ndull = Bool(\"dull\")\n\n# Every tumpus is a jompus\n# tumpus has been defined before\njompus = Bool(\"jompus\")\n\n# Every jompus is not orange\n# jompus has been defined before\norange = Bool(\"orange\")\n\n# Each jompus is an impus\n# jompus has been defined before\nimpus = Bool(\"impus\")\n\n# Each impus is not shy\n# impus has been defined before\nshy = Bool(\"shy\")\n\n# Impuses are wumpuses\n# impus has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Wumpuses are sweet\n# wumpus has been defined before\nsweet = Bool(\"sweet\")\n\n# Wumpuses are rompuses\n# wumpus has been defined before\nrompus = Bool(\"rompus\")\n\n# Every rompus is not amenable\n# rompus has been defined before\namenable = Bool(\"amenable\")\n\n# Each rompus is a zumpus\n# rompus has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Every zumpus is large\n# zumpus has been defined before\nlarge = Bool(\"large\")\n\n# Zumpuses are yumpuses\n# zumpus has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Every vumpus is not large\nvumpus = Bool(\"vumpus\")\n# large has been defined before\n\n# Yumpuses are transparent\n# yumpus has been defined before\ntransparent = Bool(\"transparent\")\n\n# Yumpuses are dumpuses\n# yumpus has been defined before\ndumpus = Bool(\"dumpus\")\n\n# Rex is a jompus\nrex = Bool(\"rex\")\n# jompus has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Each numpus is fruity\nsolver.add(Implies(numpus, fruity))\n\n# Every numpus is a tumpus\nsolver.add(Implies(numpus, tumpus))\n\n# Every tumpus is dull\nsolver.add(Implies(tumpus, dull))\n\n# Every tumpus is a jompus\nsolver.add(Implies(tumpus, jompus))\n\n# Every jompus is not orange\nsolver.add(Implies(jompus, Not(orange)))\n\n# Each jompus is an impus\nsolver.add(Implies(jompus, impus))\n\n# Each impus is not shy\nsolver.add(Implies(impus, Not(shy)))\n\n# Impuses are wumpuses\nsolver.add(Implies(impus, wumpus))\n\n# Wumpuses are sweet\nsolver.add(Implies(wumpus, sweet))\n\n# Wumpuses are rompuses\nsolver.add(Implies(wumpus, rompus))\n\n# Every rompus is not amenable\nsolver.add(Implies(rompus, Not(amenable)))\n\n# Each rompus is a zumpus\nsolver.add(Implies(rompus, zumpus))\n\n# Every zumpus is large\nsolver.add(Implies(zumpus, large))\n\n# Zumpuses are yumpuses\nsolver.add(Implies(zumpus, yumpus))\n\n# Every vumpus is not large\nsolver.add(Implies(vumpus, Not(large)))\n\n# Yumpuses are transparent\nsolver.add(Implies(yumpus, transparent))\n\n# Yumpuses are dumpuses\nsolver.add(Implies(yumpus, dumpus))\n\n# Rex is a jompus\nsolver.add(Implies(rex, jompus))\n\n# Create facts in the problem\n\n# Create statements to be checked\n# Rex is large\nsolver.add(rex, large)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_27",
    "context": "Wumpuses are not sour. Each wumpus is a rompus. Rompuses are dull. Each rompus is a dumpus. Every dumpus is feisty. Jompuses are aggressive. Dumpuses are tumpuses. Tumpuses are opaque. Every tumpus is a numpus. Numpuses are hot. Numpuses are zumpuses. Zumpuses are large. Every zumpus is a vumpus. Vumpuses are blue. Every vumpus is an impus. Impuses are not aggressive. Impuses are yumpuses. Fae is a tumpus.",
    "question": "Is the following statement true or false? Fae is not aggressive.",
    "program": "```python\nfrom z3 import * \n\n# Define boolean variables for all entities\n# Wumpuses are not sour.\nwumpus = Bool(\"wumpus\")\nsour = Bool(\"sour\")\n\n# Each wumpus is a rompus.\nrompus = Bool(\"rompus\")\n\n# Rompuses are dull.\nrompus = Bool(\"rompus\")\ndull = Bool(\"dull\")\n\n# Each rompus is a dumpus.\ndumpus = Bool(\"dumpus\")\n\n# Every dumpus is feisty.\ndumpus = Bool(\"dumpus\")\nfeisty = Bool(\"feisty\")\n\n# Jompuses are aggressive.\njompus = Bool(\"jompus\")\naggressive = Bool(\"aggressive\")\n\n# Dumpuses are tumpuses.\ntumpus = Bool(\"tumpus\")\n\n# Tumpuses are opaque.\ntumpus = Bool(\"tumpus\")\nopaque = Bool(\"opaque\")\n\n# Every tumpus is a numpus.\ntumpus = Bool(\"tumpus\")\nnumpus = Bool(\"numpus\")\n\n# Numpuses are hot.\nnumpus = Bool(\"numpus\")\nhot = Bool(\"hot\")\n\n# Numpuses are zumpuses.\nnumpus = Bool(\"numpus\")\nzumpus = Bool(\"zumpus\")\n\n# Zumpuses are large.\nzumpus = Bool(\"zumpus\")\nlarge = Bool(\"large\")\n\n# Every zumpus is a vumpus.\nzumpus = Bool(\"zumpus\")\nvumpus = Bool(\"vumpus\")\n\n# Vumpuses are blue.\nvumpus = Bool(\"vumpus\")\nblue = Bool(\"blue\")\n\n# Every vumpus is an impus.\nvumpus = Bool(\"vumpus\")\nimpus = Bool(\"impus\")\n\n# Impuses are not aggressive.\nimpus = Bool(\"impus\")\naggressive = Bool(\"aggressive\")\n\n# Impuses are yumpuses.\nimpus = Bool(\"impus\")\nyumpus = Bool(\"yumpus\")\n\n# Fae is a tumpus.\nfae = Bool(\"fae\")\ntumpus = Bool(\"tumpus\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Wumpuses are not sour.\nsolver.add(Implies(wumpus, Not(sour)))\n\n# Each wumpus is a rompus.\nsolver.add(Implies(wumpus, rompus))\n\n# Rompuses are dull.\nsolver.add(Implies(rompus, dull))\n\n# Each rompus is a dumpus.\nsolver.add(Implies(rompus, dumpus))\n\n# Every dumpus is feisty.\nsolver.add(Implies(dumpus, feisty))\n\n# Jompuses are aggressive.\nsolver.add(Implies(jompus, aggressive))\n\n# Dumpuses are tumpuses.\nsolver.add(Implies(dumpus, tumpus))\n\n# Tumpuses are opaque.\nsolver.add(Implies(tumpus, opaque))\n\n# Every tumpus is a numpus.\nsolver.add(Implies(tumpus, numpus))\n\n# Numpuses are hot.\nsolver.add(Implies(numpus, hot))\n\n# Numpuses are zumpuses.\nsolver.add(Implies(numpus, zumpus))\n\n# Zumpuses are large.\nsolver.add(Implies(zumpus, large))\n\n# Every zumpus is a vumpus.\nsolver.add(Implies(zumpus, vumpus))\n\n# Vumpuses are blue.\nsolver.add(Implies(vumpus, blue))\n\n# Every vumpus is an impus.\nsolver.add(Implies(vumpus, impus))\n\n# Impuses are not aggressive.\nsolver.add(Implies(impus, Not(aggressive)))\n\n# Impuses are yumpuses.\nsolver.add(Implies(impus, yumpus))\n\n# Fae is a tumpus.\nsolver.add(Implies(fae, tumpus))\n\n# Create facts in the problem\nsolver.add(fae)\n\n# Create statements to be checked\n# Fae is not aggressive.\nsolver.add(fae, Not(aggressive))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_28",
    "context": "Each impus is small. Each zumpus is not fruity. Every zumpus is a numpus. Each numpus is bitter. Numpuses are rompuses. Rompuses are kind. Rompuses are wumpuses. Every wumpus is not wooden. Wumpuses are yumpuses. Every yumpus is not temperate. Yumpuses are dumpuses. Every dumpus is dull. Dumpuses are tumpuses. Tumpuses are not small. Tumpuses are jompuses. Every jompus is nervous. Each jompus is a vumpus. Alex is a rompus.",
    "question": "Is the following statement true or false? Alex is small.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Each impus is small\nimpus = Bool(\"impus\")\nsmall = Bool(\"small\")\n\n# Each zumpus is not fruity\nzumpus = Bool(\"zumpus\")\nfruity = Bool(\"fruity\")\n\n# Every zumpus is a numpus\nnumpus = Bool(\"numpus\")\n\n# Each numpus is bitter\nbitter = Bool(\"bitter\")\n\n# Numpuses are rompuses\nrompus = Bool(\"rompus\")\n\n# Rompuses are kind\nkind = Bool(\"kind\")\n\n# Rompuses are wumpuses\nwumpus = Bool(\"wumpus\")\n\n# Every wumpus is not wooden\nwooden = Bool(\"wooden\")\n\n# Wumpuses are yumpuses\nyumpus = Bool(\"yumpus\")\n\n# Every yumpus is not temperate\ntemperate = Bool(\"temperate\")\n\n# Yumpuses are dumpuses\ndumpus = Bool(\"dumpus\")\n\n# Every dumpus is dull\ndull = Bool(\"dull\")\n\n# Dumpuses are tumpuses\ntumpus = Bool(\"tumpus\")\n\n# Tumpuses are not small\n# Tumpuses has been defined before\n# Small has been defined before\n\n# Tumpuses are jompuses\njompus = Bool(\"jompus\")\n\n# Every jompus is nervous\nnervous = Bool(\"nervous\")\n\n# Each jompus is a vumpus\nvumpus = Bool(\"vumpus\")\n\n# Alex is a rompus\nalex = Bool(\"alex\")\n# Rompuses has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Each impus is small\nsolver.add(Implies(impus, small))\n\n# Each zumpus is not fruity\nsolver.add(Implies(zumpus, Not(fruity)))\n\n# Every zumpus is a numpus\nsolver.add(Implies(zumpus, numpus))\n\n# Each numpus is bitter\nsolver.add(Implies(numpus, bitter))\n\n# Numpuses are rompuses\nsolver.add(Implies(numpus, rompus))\n\n# Rompuses are kind\nsolver.add(Implies(rompus, kind))\n\n# Rompuses are wumpuses\nsolver.add(Implies(rompus, wumpus))\n\n# Every wumpus is not wooden\nsolver.add(Implies(wumpus, Not(wooden)))\n\n# Wumpuses are yumpuses\nsolver.add(Implies(wumpus, yumpus))\n\n# Every yumpus is not temperate\nsolver.add(Implies(yumpus, Not(temperate)))\n\n# Yumpuses are dumpuses\nsolver.add(Implies(yumpus, dumpus))\n\n# Every dumpus is dull\nsolver.add(Implies(dumpus, dull))\n\n# Dumpuses are tumpuses\nsolver.add(Implies(dumpus, tumpus))\n\n# Tumpuses are not small\nsolver.add(Implies(tumpus, Not(small)))\n\n# Tumpuses are jompuses\nsolver.add(Implies(tumpus, jompus))\n\n# Every jompus is nervous\nsolver.add(Implies(jompus, nervous))\n\n# Each jompus is a vumpus\nsolver.add(Implies(jompus, vumpus))\n\n# Alex is a rompus\nsolver.add(Implies(alex, rompus))\n\n# Create facts in the problem\nsolver.add(alex)\n\n# Create statements to be checked\n# Alex is small\nsolver.add(alex, small)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_29",
    "context": "Every jompus is liquid. Jompuses are rompuses. Every rompus is mean. Rompuses are zumpuses. Each zumpus is transparent. Zumpuses are tumpuses. Tumpuses are not earthy. Each dumpus is bright. Tumpuses are yumpuses. Yumpuses are not bright. Yumpuses are impuses. Impuses are temperate. Impuses are numpuses. Every numpus is feisty. Numpuses are wumpuses. Max is a jompus.",
    "question": "Is the following statement true or false? Max is bright.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every jompus is liquid\njompus = Bool(\"jompus\")\nliquid = Bool(\"liquid\")\n\n# Jompuses are rompuses\n# jompus has been defined before\nrompus = Bool(\"rompus\")\n\n# Every rompus is mean\n# rompus has been defined before\nmean = Bool(\"mean\")\n\n# Rompuses are zumpuses\n# rompus has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Each zumpus is transparent\n# zumpus has been defined before\ntransparent = Bool(\"transparent\")\n\n# Zumpuses are tumpuses\n# zumpus has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Tumpuses are not earthy\n# tumpus has been defined before\nearthy = Bool(\"earthy\")\n\n# Each dumpus is bright\n# tumpus has been defined before\ndumpus = Bool(\"dumpus\")\nbright = Bool(\"bright\")\n\n# Tumpuses are yumpuses\n# tumpus has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Yumpuses are not bright\n# yumpus has been defined before\n# bright has been defined before\n\n# Yumpuses are impuses\n# yumpus has been defined before\nimpus = Bool(\"impus\")\n\n# Impuses are temperate\n# impus has been defined before\ntemperate = Bool(\"temperate\")\n\n# Impuses are numpuses\n# impus has been defined before\nnumpus = Bool(\"numpus\")\n\n# Every numpus is feisty\n# numpus has been defined before\nfeisty = Bool(\"feisty\")\n\n# Numpuses are wumpuses\n# numpus has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Max is a jompus\nmax = Bool(\"max\")\n# jompus has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every jompus is liquid\nsolver.add(Implies(jompus, liquid))\n\n# Jompuses are rompuses\nsolver.add(Implies(jompus, rompus))\n\n# Every rompus is mean\nsolver.add(Implies(rompus, mean))\n\n# Rompuses are zumpuses\nsolver.add(Implies(rompus, zumpus))\n\n# Each zumpus is transparent\nsolver.add(Implies(zumpus, transparent))\n\n# Zumpuses are tumpuses\nsolver.add(Implies(zumpus, tumpus))\n\n# Tumpuses are not earthy\nsolver.add(Implies(tumpus, Not(earthy)))\n\n# Each dumpus is bright\nsolver.add(Implies(dumpus, bright))\n\n# Tumpuses are yumpuses\nsolver.add(Implies(tumpus, yumpus))\n\n# Yumpuses are not bright\nsolver.add(Implies(yumpus, Not(bright)))\n\n# Yumpuses are impuses\nsolver.add(Implies(yumpus, impus))\n\n# Impuses are temperate\nsolver.add(Implies(impus, temperate))\n\n# Impuses are numpuses\nsolver.add(Implies(impus, numpus))\n\n# Every numpus is feisty\nsolver.add(Implies(numpus, feisty))\n\n# Numpuses are wumpuses\nsolver.add(Implies(numpus, wumpus))\n\n# Max is a jompus\nsolver.add(Implies(max, jompus))\n\n# Create facts in the problem\nsolver.add(max)\n\n# Create statements to be checked\n# Max is bright\nsolver.add(max, bright)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_30",
    "context": "Impuses are bright. Every impus is a jompus. Jompuses are mean. Every zumpus is not temperate. Each jompus is a vumpus. Vumpuses are transparent. Every vumpus is a tumpus. Every tumpus is shy. Tumpuses are numpuses. Each numpus is not blue. Every numpus is a dumpus. Dumpuses are not fruity. Each dumpus is a wumpus. Wumpuses are temperate. Wumpuses are rompuses. Rompuses are metallic. Rompuses are yumpuses. Fae is a vumpus.",
    "question": "Is the following statement true or false? Fae is temperate.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Impuses are bright.\nimpus = Bool(\"impus\")\nbright = Bool(\"bright\")\n\n# Every impus is a jompus.\njompus = Bool(\"jompus\")\nimpus_defined = Bool(\"impus_defined\")\n\n# Jompuses are mean.\nmean = Bool(\"mean\")\njompus_defined = Bool(\"jompus_defined\")\n\n# Every zumpus is not temperate.\nzumpus = Bool(\"zumpus\")\ntemperate = Bool(\"temperate\")\nzumpus_defined = Bool(\"zumpus_defined\")\n\n# Each jompus is a vumpus.\nvumpus = Bool(\"vumpus\")\njompus_defined_2 = Bool(\"jompus_defined_2\")\n\n# Vumpuses are transparent.\ntransparent = Bool(\"transparent\")\nvumpus_defined = Bool(\"vumpus_defined\")\n\n# Every vumpus is a tumpus.\ntumpus = Bool(\"tumpus\")\nvumpus_defined_2 = Bool(\"vumpus_defined_2\")\n\n# Every tumpus is shy.\nshy = Bool(\"shy\")\ntumpus_defined = Bool(\"tumpus_defined\")\n\n# Tumpuses are numpuses.\nnumpus = Bool(\"numpus\")\ntumpus_defined_2 = Bool(\"tumpus_defined_2\")\n\n# Each numpus is not blue.\nblue = Bool(\"blue\")\nnumpus_defined = Bool(\"numpus_defined\")\n\n# Every numpus is a dumpus.\ndumpus = Bool(\"dumpus\")\nnumpus_defined_2 = Bool(\"numpus_defined_2\")\n\n# Dumpuses are not fruity.\nfruity = Bool(\"fruity\")\ndumpus_defined = Bool(\"dumpus_defined\")\n\n# Each dumpus is a wumpus.\nwumpus = Bool(\"wumpus\")\ndumpus_defined_2 = Bool(\"dumpus_defined_2\")\n\n# Wumpuses are temperate.\nwumpus_defined = Bool(\"wumpus_defined\")\n\n# Wumpuses are rompuses.\nrompus = Bool(\"rompus\")\nwumpus_defined_2 = Bool(\"wumpus_defined_2\")\n\n# Rompuses are metallic.\nmetallic = Bool(\"metallic\")\nrompus_defined = Bool(\"rompus_defined\")\n\n# Rompuses are yumpuses.\nyumpus = Bool(\"yumpus\")\nrompus_defined_2 = Bool(\"rompus_defined_2\")\n\n# Fae is a vumpus.\nfae = Bool(\"fae\")\nvumpus_defined_3 = Bool(\"vumpus_defined_3\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Impuses are bright.\nsolver.add(Implies(impus, bright))\n\n# Every impus is a jompus.\nsolver.add(Implies(And(impus, impus_defined), jompus))\n\n# Jompuses are mean.\nsolver.add(Implies(And(jompus, jompus_defined), mean))\n\n# Every zumpus is not temperate.\nsolver.add(Implies(And(zumpus, zumpus_defined), Not(temperate)))\n\n# Each jompus is a vumpus.\nsolver.add(Implies(And(jompus, jompus_defined_2), vumpus))\n\n# Vumpuses are transparent.\nsolver.add(Implies(And(vumpus, vumpus_defined), transparent))\n\n# Every vumpus is a tumpus.\nsolver.add(Implies(And(vumpus, vumpus_defined_2), tumpus))\n\n# Every tumpus is shy.\nsolver.add(Implies(And(tumpus, tumpus_defined), shy))\n\n# Tumpuses are numpuses.\nsolver.add(Implies(And(tumpus, tumpus_defined_2), numpus))\n\n# Each numpus is not blue.\nsolver.add(Implies(And(numpus, numpus_defined), Not(blue)))\n\n# Every numpus is a dumpus.\nsolver.add(Implies(And(numpus, numpus_defined_2), dumpus))\n\n# Dumpuses are not fruity.\nsolver.add(Implies(And(dumpus, dumpus_defined), Not(fruity)))\n\n# Each dumpus is a wumpus.\nsolver.add(Implies(And(dumpus, dumpus_defined_2), wumpus))\n\n# Wumpuses are temperate.\nsolver.add(Implies(And(wumpus, wumpus_defined), temperate))\n\n# Wumpuses are rompuses.\nsolver.add(Implies(And(wumpus, wumpus_defined_2), rompus))\n\n# Rompuses are metallic.\nsolver.add(Implies(And(rompus, rompus_defined), metallic))\n\n# Rompuses are yumpuses.\nsolver.add(Implies(And(rompus, rompus_defined_2), yumpus))\n\n# Fae is a vumpus.\nsolver.add(Implies(And(fae, vumpus_defined_3), vumpus))\n\n# Create facts in the problem\nsolver.add(fae)\n\n# Create statements to be checked\n# Fae is temperate.\nsolver.add(And(fae, temperate))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_31",
    "context": "Each jompus is not small. Each wumpus is angry. Each jompus is a zumpus. Zumpuses are temperate. Zumpuses are tumpuses. Tumpuses are brown. Tumpuses are yumpuses. Yumpuses are wooden. Yumpuses are dumpuses. Each dumpus is not angry. Every dumpus is a numpus. Numpuses are not dull. Every numpus is a vumpus. Wren is a jompus.",
    "question": "Is the following statement true or false? Wren is not angry.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Each jompus is not small\njompus = Bool(\"jompus\")\nsmall = Bool(\"small\")\n\n# Each wumpus is angry\nwumpus = Bool(\"wumpus\")\nangry = Bool(\"angry\")\n\n# Each jompus is a zumpus\nzumpus = Bool(\"zumpus\")\n\n# Zumpuses are temperate\ntemperate = Bool(\"temperate\")\n\n# Zumpuses are tumpuses\ntumpus = Bool(\"tumpus\")\n\n# Tumpuses are brown\nbrown = Bool(\"brown\")\n\n# Tumpuses are yumpuses\nyumpus = Bool(\"yumpus\")\n\n# Yumpuses are wooden\nwooden = Bool(\"wooden\")\n\n# Yumpuses are dumpuses\ndumpus = Bool(\"dumpus\")\n\n# Each dumpus is not angry\nangry_dumpus = Bool(\"angry_dumpus\")\n\n# Every dumpus is a numpus\nnumpus = Bool(\"numpus\")\n\n# Numpuses are not dull\ndull = Bool(\"dull\")\n\n# Every numpus is a vumpus\nvumpus = Bool(\"vumpus\")\n\n# Wren is a jompus\nwren = Bool(\"wren\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Each jompus is not small\nsolver.add(Implies(jompus, Not(small)))\n\n# Each wumpus is angry\nsolver.add(Implies(wumpus, angry))\n\n# Each jompus is a zumpus\nsolver.add(Implies(jompus, zumpus))\n\n# Zumpuses are temperate\nsolver.add(Implies(zumpus, temperate))\n\n# Zumpuses are tumpuses\nsolver.add(Implies(zumpus, tumpus))\n\n# Tumpuses are brown\nsolver.add(Implies(tumpus, brown))\n\n# Tumpuses are yumpuses\nsolver.add(Implies(tumpus, yumpus))\n\n# Yumpuses are wooden\nsolver.add(Implies(yumpus, wooden))\n\n# Yumpuses are dumpuses\nsolver.add(Implies(yumpus, dumpus))\n\n# Each dumpus is not angry\nsolver.add(Implies(dumpus, Not(angry_dumpus)))\n\n# Every dumpus is a numpus\nsolver.add(Implies(dumpus, numpus))\n\n# Numpuses are not dull\nsolver.add(Implies(numpus, Not(dull)))\n\n# Every numpus is a vumpus\nsolver.add(Implies(numpus, vumpus))\n\n# Wren is a jompus\nsolver.add(Implies(wren, jompus))\n\n# Create facts in the problem\nsolver.add(wren)\n\n# Create statements to be checked\n# Wren is not angry\nsolver.add(wren, Not(angry))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_32",
    "context": "Numpuses are earthy. Numpuses are vumpuses. Vumpuses are transparent. Each vumpus is a tumpus. Tumpuses are small. Tumpuses are dumpuses. Each dumpus is not aggressive. Dumpuses are wumpuses. Every wumpus is not wooden. Every wumpus is a jompus. Jompuses are not nervous. Each jompus is a zumpus. Each zumpus is temperate. Rompuses are wooden. Zumpuses are impuses. Each impus is blue. Impuses are yumpuses. Sally is a numpus.",
    "question": "Is the following statement true or false? Sally is not wooden.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Numpuses are earthy\nnumpus = Bool(\"numpus\")\nearthy = Bool(\"earthy\")\n\n# Numpuses are vumpuses\n# Numpuses has been defined before\nvumpus = Bool(\"vumpus\")\n\n# Vumpuses are transparent\n# Vumpuses has been defined before\ntransparent = Bool(\"transparent\")\n\n# Each vumpus is a tumpus\n# Vumpuses has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Tumpuses are small\n# Tumpuses has been defined before\nsmall = Bool(\"small\")\n\n# Tumpuses are dumpuses\n# Tumpuses has been defined before\ndumpus = Bool(\"dumpus\")\n\n# Each dumpus is not aggressive\n# Dumpuses has been defined before\naggressive = Bool(\"aggressive\")\n\n# Dumpuses are wumpuses\n# Dumpuses has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Every wumpus is not wooden\n# Wumpuses has been defined before\nwooden = Bool(\"wooden\")\n\n# Every wumpus is a jompus\n# Wumpuses has been defined before\njompus = Bool(\"jompus\")\n\n# Jompuses are not nervous\n# Jompuses has been defined before\nnervous = Bool(\"nervous\")\n\n# Each jompus is a zumpus\n# Jompuses has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Each zumpus is temperate\n# Zumpuses has been defined before\ntemperate = Bool(\"temperate\")\n\n# Rompuses are wooden\nrompus = Bool(\"rompus\")\n# Wooden has been defined before\n\n# Zumpuses are impuses\n# Zumpuses has been defined before\nimpus = Bool(\"impus\")\n\n# Each impus is blue\n# Impuses has been defined before\nblue = Bool(\"blue\")\n\n# Impuses are yumpuses\n# Impuses has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Sally is a numpus\nsally = Bool(\"sally\")\n# Numpuses has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Numpuses are earthy\nsolver.add(Implies(numpus, earthy))\n\n# Numpuses are vumpuses\nsolver.add(Implies(numpus, vumpus))\n\n# Vumpuses are transparent\nsolver.add(Implies(vumpus, transparent))\n\n# Each vumpus is a tumpus\nsolver.add(Implies(vumpus, tumpus))\n\n# Tumpuses are small\nsolver.add(Implies(tumpus, small))\n\n# Tumpuses are dumpuses\nsolver.add(Implies(tumpus, dumpus))\n\n# Each dumpus is not aggressive\nsolver.add(Implies(dumpus, Not(aggressive)))\n\n# Dumpuses are wumpuses\nsolver.add(Implies(dumpus, wumpus))\n\n# Every wumpus is not wooden\nsolver.add(Implies(wumpus, Not(wooden)))\n\n# Every wumpus is a jompus\nsolver.add(Implies(wumpus, jompus))\n\n# Jompuses are not nervous\nsolver.add(Implies(jompus, Not(nervous)))\n\n# Each jompus is a zumpus\nsolver.add(Implies(jompus, zumpus))\n\n# Each zumpus is temperate\nsolver.add(Implies(zumpus, temperate))\n\n# Rompuses are wooden\nsolver.add(Implies(rompus, wooden))\n\n# Zumpuses are impuses\nsolver.add(Implies(zumpus, impus))\n\n# Each impus is blue\nsolver.add(Implies(impus, blue))\n\n# Impuses are yumpuses\nsolver.add(Implies(impus, yumpus))\n\n# Sally is a numpus\nsolver.add(Implies(sally, numpus))\n\n# Create facts in the problem\nsolver.add(sally)\n\n# Create statements to be checked\n# Sally is not wooden\nsolver.add(sally, Not(wooden))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_33",
    "context": "Every yumpus is not temperate. Yumpuses are rompuses. Every rompus is large. Every rompus is an impus. Impuses are not blue. Impuses are tumpuses. Tumpuses are nervous. Tumpuses are wumpuses. Wumpuses are bright. Numpuses are not bright. Each wumpus is a zumpus. Every zumpus is not fruity. Zumpuses are dumpuses. Dumpuses are opaque. Dumpuses are vumpuses. Vumpuses are mean. Vumpuses are jompuses. Stella is a yumpus.",
    "question": "Is the following statement true or false? Stella is not bright.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every yumpus is not temperate\nyumpus = Bool(\"yumpus\")\ntemperate = Bool(\"temperate\")\n\n# Yumpuses are rompuses\n# yumpus has been defined before\nrompus = Bool(\"rompus\")\n\n# Every rompus is large\n# rompus has been defined before\nlarge = Bool(\"large\")\n\n# Every rompus is an impus\n# rompus has been defined before\nimpus = Bool(\"impus\")\n\n# Impuses are not blue\n# impus has been defined before\nblue = Bool(\"blue\")\n\n# Impuses are tumpuses\n# impus has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Tumpuses are nervous\n# tumpus has been defined before\nnervous = Bool(\"nervous\")\n\n# Tumpuses are wumpuses\n# tumpus has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Wumpuses are bright\n# wumpus has been defined before\nbright = Bool(\"bright\")\n\n# Numpuses are not bright\nnumpus = Bool(\"numpus\")\n\n# Each wumpus is a zumpus\n# wumpus has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Every zumpus is not fruity\n# zumpus has been defined before\nfruity = Bool(\"fruity\")\n\n# Zumpuses are dumpuses\n# zumpus has been defined before\ndumpus = Bool(\"dumpus\")\n\n# Dumpuses are opaque\n# dumpus has been defined before\nopaque = Bool(\"opaque\")\n\n# Dumpuses are vumpuses\n# dumpus has been defined before\nvumpus = Bool(\"vumpus\")\n\n# Vumpuses are mean\n# vumpus has been defined before\nmean = Bool(\"mean\")\n\n# Vumpuses are jompuses\n# vumpus has been defined before\njompus = Bool(\"jompus\")\n\n# Stella is a yumpus\nstella = Bool(\"stella\")\n# yumpus has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every yumpus is not temperate\nsolver.add(Implies(yumpus, Not(temperate)))\n\n# Yumpuses are rompuses\nsolver.add(Implies(yumpus, rompus))\n\n# Every rompus is large\nsolver.add(Implies(rompus, large))\n\n# Every rompus is an impus\nsolver.add(Implies(rompus, impus))\n\n# Impuses are not blue\nsolver.add(Implies(impus, Not(blue)))\n\n# Impuses are tumpuses\nsolver.add(Implies(impus, tumpus))\n\n# Tumpuses are nervous\nsolver.add(Implies(tumpus, nervous))\n\n# Tumpuses are wumpuses\nsolver.add(Implies(tumpus, wumpus))\n\n# Wumpuses are bright\nsolver.add(Implies(wumpus, bright))\n\n# Numpuses are not bright\nsolver.add(Implies(numpus, Not(bright)))\n\n# Each wumpus is a zumpus\nsolver.add(Implies(wumpus, zumpus))\n\n# Every zumpus is not fruity\nsolver.add(Implies(zumpus, Not(fruity)))\n\n# Zumpuses are dumpuses\nsolver.add(Implies(zumpus, dumpus))\n\n# Dumpuses are opaque\nsolver.add(Implies(dumpus, opaque))\n\n# Dumpuses are vumpuses\nsolver.add(Implies(dumpus, vumpus))\n\n# Vumpuses are mean\nsolver.add(Implies(vumpus, mean))\n\n# Vumpuses are jompuses\nsolver.add(Implies(vumpus, jompus))\n\n# Stella is a yumpus\nsolver.add(Implies(stella, yumpus))\n\n# Create facts in the problem\nsolver.add(stella)\n\n# Create statements to be checked\n# Stella is not bright\nsolver.add(stella, Not(bright))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_34",
    "context": "Impuses are bright. Every impus is a rompus. Rompuses are floral. Each rompus is a yumpus. Every yumpus is opaque. Yumpuses are numpuses. Each numpus is red. Every numpus is a dumpus. Dumpuses are bitter. Every dumpus is a vumpus. Vumpuses are not mean. Vumpuses are tumpuses. Tumpuses are not shy. Each wumpus is shy. Tumpuses are zumpuses. Each zumpus is temperate. Zumpuses are jompuses. Sam is a yumpus.",
    "question": "Is the following statement true or false? Sam is shy.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Impuses are bright\nimpus = Bool(\"impus\")\nbright = Bool(\"bright\")\n\n# Every impus is a rompus\nimpus = Bool(\"impus\")\nrompus = Bool(\"rompus\")\n\n# Rompuses are floral\nrompus = Bool(\"rompus\")\nfloral = Bool(\"floral\")\n\n# Each rompus is a yumpus\nrompus = Bool(\"rompus\")\nyumpus = Bool(\"yumpus\")\n\n# Every yumpus is opaque\nyumpus = Bool(\"yumpus\")\nopaque = Bool(\"opaque\")\n\n# Yumpuses are numpuses\nyumpus = Bool(\"yumpus\")\nnumpus = Bool(\"numpus\")\n\n# Each numpus is red\nnumpus = Bool(\"numpus\")\nred = Bool(\"red\")\n\n# Every numpus is a dumpus\nnumpus = Bool(\"numpus\")\ndumpus = Bool(\"dumpus\")\n\n# Dumpuses are bitter\ndumpus = Bool(\"dumpus\")\nbitter = Bool(\"bitter\")\n\n# Every dumpus is a vumpus\ndumpus = Bool(\"dumpus\")\nvumpus = Bool(\"vumpus\")\n\n# Vumpuses are not mean\nvumpus = Bool(\"vumpus\")\nmean = Bool(\"mean\")\n\n# Vumpuses are tumpuses\nvumpus = Bool(\"vumpus\")\ntumpus = Bool(\"tumpus\")\n\n# Tumpuses are not shy\ntumpus = Bool(\"tumpus\")\nshy = Bool(\"shy\")\n\n# Each wumpus is shy\nwumpus = Bool(\"wumpus\")\nshy = Bool(\"shy\")\n\n# Tumpuses are zumpuses\ntumpus = Bool(\"tumpus\")\nzumpus = Bool(\"zumpus\")\n\n# Each zumpus is temperate\nzumpus = Bool(\"zumpus\")\ntemperate = Bool(\"temperate\")\n\n# Zumpuses are jompuses\nzumpus = Bool(\"zumpus\")\njompus = Bool(\"jompus\")\n\n# Sam is a yumpus\nsam = Bool(\"sam\")\nyumpus = Bool(\"yumpus\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Impuses are bright\nsolver.add(Implies(impus, bright))\n\n# Every impus is a rompus\nsolver.add(Implies(impus, rompus))\n\n# Rompuses are floral\nsolver.add(Implies(rompus, floral))\n\n# Each rompus is a yumpus\nsolver.add(Implies(rompus, yumpus))\n\n# Every yumpus is opaque\nsolver.add(Implies(yumpus, opaque))\n\n# Yumpuses are numpuses\nsolver.add(Implies(yumpus, numpus))\n\n# Each numpus is red\nsolver.add(Implies(numpus, red))\n\n# Every numpus is a dumpus\nsolver.add(Implies(numpus, dumpus))\n\n# Dumpuses are bitter\nsolver.add(Implies(dumpus, bitter))\n\n# Every dumpus is a vumpus\nsolver.add(Implies(dumpus, vumpus))\n\n# Vumpuses are not mean\nsolver.add(Implies(vumpus, Not(mean)))\n\n# Vumpuses are tumpuses\nsolver.add(Implies(vumpus, tumpus))\n\n# Tumpuses are not shy\nsolver.add(Implies(tumpus, Not(shy)))\n\n# Each wumpus is shy\nsolver.add(Implies(wumpus, shy))\n\n# Tumpuses are zumpuses\nsolver.add(Implies(tumpus, zumpus))\n\n# Each zumpus is temperate\nsolver.add(Implies(zumpus, temperate))\n\n# Zumpuses are jompuses\nsolver.add(Implies(zumpus, jompus))\n\n# Sam is a yumpus\nsolver.add(Implies(sam, yumpus))\n\n# Create facts in the problem\nsolver.add(sam)\n\n# Create statements to be checked\n# Sam is shy\nsolver.add(sam, shy)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_35",
    "context": "Each zumpus is not wooden. Every zumpus is a vumpus. Every vumpus is not sour. Every vumpus is a jompus. Every jompus is floral. Each jompus is a wumpus. Every wumpus is transparent. Wumpuses are impuses. Impuses are dull. Every impus is a yumpus. Each yumpus is feisty. Numpuses are not orange. Every yumpus is a dumpus. Dumpuses are orange. Each dumpus is a rompus. Each rompus is not aggressive. Rompuses are tumpuses. Fae is a jompus.",
    "question": "Is the following statement true or false? Fae is orange.",
    "program": "```python\nfrom z3 import * \n\n# Define boolean variables for all entities\n# Each zumpus is not wooden.\nzumpus = Bool(\"zumpus\")\nwooden = Bool(\"wooden\")\n\n# Every zumpus is a vumpus.\nvumpus = Bool(\"vumpus\")\n\n# Every vumpus is not sour.\nvumpus = Bool(\"vumpus\")\nsour = Bool(\"sour\")\n\n# Every vumpus is a jompus.\njompus = Bool(\"jompus\")\n\n# Every jompus is floral.\njompus = Bool(\"jompus\")\nfloral = Bool(\"floral\")\n\n# Each jompus is a wumpus.\nwumpus = Bool(\"wumpus\")\n\n# Every wumpus is transparent.\nwumpus = Bool(\"wumpus\")\ntransparent = Bool(\"transparent\")\n\n# Wumpuses are impuses.\nwumpus = Bool(\"wumpus\")\nimpus = Bool(\"impus\")\n\n# Impuses are dull.\nimpus = Bool(\"impus\")\ndull = Bool(\"dull\")\n\n# Every impus is a yumpus.\nimpus = Bool(\"impus\")\nyumpus = Bool(\"yumpus\")\n\n# Each yumpus is feisty.\nyumpus = Bool(\"yumpus\")\nfeisty = Bool(\"feisty\")\n\n# Numpuses are not orange.\nnumpus = Bool(\"numpus\")\norange = Bool(\"orange\")\n\n# Every yumpus is a dumpus.\nyumpus = Bool(\"yumpus\")\ndumpus = Bool(\"dumpus\")\n\n# Dumpuses are orange.\ndumpus = Bool(\"dumpus\")\norange = Bool(\"orange\")\n\n# Each dumpus is a rompus.\ndumpus = Bool(\"dumpus\")\nrompus = Bool(\"rompus\")\n\n# Each rompus is not aggressive.\nrompus = Bool(\"rompus\")\naggressive = Bool(\"aggressive\")\n\n# Rompuses are tumpuses.\nrompus = Bool(\"rompus\")\ntumpus = Bool(\"tumpus\")\n\n# Fae is a jompus.\nfae = Bool(\"fae\")\njompus = Bool(\"jompus\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Each zumpus is not wooden.\nsolver.add(Implies(zumpus, Not(wooden)))\n\n# Every zumpus is a vumpus.\nsolver.add(Implies(zumpus, vumpus))\n\n# Every vumpus is not sour.\nsolver.add(Implies(vumpus, Not(sour)))\n\n# Every vumpus is a jompus.\nsolver.add(Implies(vumpus, jompus))\n\n# Every jompus is floral.\nsolver.add(Implies(jompus, floral))\n\n# Each jompus is a wumpus.\nsolver.add(Implies(jompus, wumpus))\n\n# Every wumpus is transparent.\nsolver.add(Implies(wumpus, transparent))\n\n# Wumpuses are impuses.\nsolver.add(Implies(wumpus, impus))\n\n# Impuses are dull.\nsolver.add(Implies(impus, dull))\n\n# Every impus is a yumpus.\nsolver.add(Implies(impus, yumpus))\n\n# Each yumpus is feisty.\nsolver.add(Implies(yumpus, feisty))\n\n# Numpuses are not orange.\nsolver.add(Implies(numpus, Not(orange)))\n\n# Every yumpus is a dumpus.\nsolver.add(Implies(yumpus, dumpus))\n\n# Dumpuses are orange.\nsolver.add(Implies(dumpus, orange))\n\n# Each dumpus is a rompus.\nsolver.add(Implies(dumpus, rompus))\n\n# Each rompus is not aggressive.\nsolver.add(Implies(rompus, Not(aggressive)))\n\n# Rompuses are tumpuses.\nsolver.add(Implies(rompus, tumpus))\n\n# Fae is a jompus.\nsolver.add(Implies(fae, jompus))\n\n# Create statements to be checked\n# Fae is orange.\nsolver.add(fae, orange)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_36",
    "context": "Every jompus is bright. Every jompus is a wumpus. Each wumpus is wooden. Each wumpus is a yumpus. Yumpuses are amenable. Yumpuses are impuses. Impuses are temperate. Impuses are tumpuses. Tumpuses are shy. Every tumpus is a rompus. Rompuses are not small. Every rompus is a numpus. Numpuses are fruity. Each dumpus is not shy. Numpuses are vumpuses. Sally is a jompus.",
    "question": "Is the following statement true or false? Sally is shy.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Every jompus is bright\njompus = Bool(\"jompus\")\nbright = Bool(\"bright\")\n\n# Every jompus is a wumpus\n# jompus has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Each wumpus is wooden\n# wumpus has been defined before\nwooden = Bool(\"wooden\")\n\n# Each wumpus is a yumpus\n# wumpus has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Yumpuses are amenable\n# yumpus has been defined before\namenable = Bool(\"amenable\")\n\n# Yumpuses are impuses\n# yumpus has been defined before\nimpuses = Bool(\"impuses\")\n\n# Impuses are temperate\n# impuses has been defined before\ntemperate = Bool(\"temperate\")\n\n# Impuses are tumpuses\n# impuses has been defined before\ntumpuses = Bool(\"tumpuses\")\n\n# Tumpuses are shy\n# tumpuses has been defined before\nshy = Bool(\"shy\")\n\n# Every tumpus is a rompus\ntumpus = Bool(\"tumpus\")\nrompus = Bool(\"rompus\")\n\n# Rompuses are not small\n# rompus has been defined before\nsmall = Bool(\"small\")\n\n# Every rompus is a numpus\nrompus = Bool(\"rompus\")\nnumpus = Bool(\"numpus\")\n\n# Numpuses are fruity\n# numpus has been defined before\nfruity = Bool(\"fruity\")\n\n# Each dumpus is not shy\ndumpus = Bool(\"dumpus\")\nshy = Bool(\"shy\")\n\n# Numpuses are vumpuses\n# numpus has been defined before\nvumpus = Bool(\"vumpus\")\n\n# Sally is a jompus\nsally = Bool(\"sally\")\njompus = Bool(\"jompus\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Every jompus is bright\nsolver.add(Implies(jompus, bright))\n\n# Every jompus is a wumpus\nsolver.add(Implies(jompus, wumpus))\n\n# Each wumpus is wooden\nsolver.add(Implies(wumpus, wooden))\n\n# Each wumpus is a yumpus\nsolver.add(Implies(wumpus, yumpus))\n\n# Yumpuses are amenable\nsolver.add(Implies(yumpus, amenable))\n\n# Yumpuses are impuses\nsolver.add(Implies(yumpus, impuses))\n\n# Impuses are temperate\nsolver.add(Implies(impuses, temperate))\n\n# Impuses are tumpuses\nsolver.add(Implies(impuses, tumpuses))\n\n# Tumpuses are shy\nsolver.add(Implies(tumpuses, shy))\n\n# Every tumpus is a rompus\nsolver.add(Implies(tumpus, rompus))\n\n# Rompuses are not small\nsolver.add(Implies(rompus, Not(small)))\n\n# Every rompus is a numpus\nsolver.add(Implies(rompus, numpus))\n\n# Numpuses are fruity\nsolver.add(Implies(numpus, fruity))\n\n# Each dumpus is not shy\nsolver.add(Implies(dumpus, Not(shy)))\n\n# Numpuses are vumpuses\nsolver.add(Implies(numpus, vumpus))\n\n# Sally is a jompus\nsolver.add(Implies(sally, jompus))\n\n# Create facts in the problem\nsolver.add(sally)\n\n# Create statements to be checked\n# Sally is shy\nsolver.add(sally, shy)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_37",
    "context": "Impuses are not fruity. Impuses are wumpuses. Each wumpus is not temperate. Wumpuses are dumpuses. Rompuses are not sweet. Dumpuses are kind. Dumpuses are zumpuses. Zumpuses are wooden. Zumpuses are vumpuses. Every vumpus is large. Vumpuses are yumpuses. Yumpuses are transparent. Yumpuses are numpuses. Numpuses are brown. Numpuses are tumpuses. Tumpuses are sweet. Tumpuses are jompuses. Wren is a zumpus.",
    "question": "Is the following statement true or false? Wren is sweet.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Impuses are not fruity\nimpus = Bool(\"impus\")\nfruity = Bool(\"fruity\")\n\n# Impuses are wumpuses\n# Impuses has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Each wumpus is not temperate\n# Wumpus has been defined before\ntemperate = Bool(\"temperate\")\n\n# Wumpuses are dumpuses\n# Wumpuses has been defined before\ndumpus = Bool(\"dumpus\")\n\n# Rompuses are not sweet\nrompus = Bool(\"rompus\")\nsweet = Bool(\"sweet\")\n\n# Dumpuses are kind\n# Dumpuses has been defined before\nkind = Bool(\"kind\")\n\n# Dumpuses are zumpuses\n# Dumpuses has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Zumpuses are wooden\n# Zumpuses has been defined before\nwooden = Bool(\"wooden\")\n\n# Zumpuses are vumpuses\n# Zumpuses has been defined before\nvumpus = Bool(\"vumpus\")\n\n# Every vumpus is large\nvumpus_large = Bool(\"vumpus_large\")\nlarge = Bool(\"large\")\n\n# Vumpuses are yumpuses\n# Vumpuses has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Yumpuses are transparent\n# Yumpuses has been defined before\ntransparent = Bool(\"transparent\")\n\n# Yumpuses are numpuses\n# Yumpuses has been defined before\nnumpus = Bool(\"numpus\")\n\n# Numpuses are brown\n# Numpuses has been defined before\nbrown = Bool(\"brown\")\n\n# Numpuses are tumpuses\n# Numpuses has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Tumpuses are sweet\n# Tumpuses has been defined before\n# Sweet has been defined before\n\n# Tumpuses are jompuses\n# Tumpuses has been defined before\njompus = Bool(\"jompus\")\n\n# Wren is a zumpus\nwren = Bool(\"wren\")\n# Zumpuses has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Impuses are not fruity\nsolver.add(Implies(impus, Not(fruity)))\n\n# Impuses are wumpuses\nsolver.add(Implies(impus, wumpus))\n\n# Each wumpus is not temperate\nsolver.add(Implies(wumpus, Not(temperate)))\n\n# Wumpuses are dumpuses\nsolver.add(Implies(wumpus, dumpus))\n\n# Rompuses are not sweet\nsolver.add(Implies(rompus, Not(sweet)))\n\n# Dumpuses are kind\nsolver.add(Implies(dumpus, kind))\n\n# Dumpuses are zumpuses\nsolver.add(Implies(dumpus, zumpus))\n\n# Zumpuses are wooden\nsolver.add(Implies(zumpus, wooden))\n\n# Zumpuses are vumpuses\nsolver.add(Implies(zumpus, vumpus))\n\n# Every vumpus is large\nsolver.add(Implies(vumpus, vumpus_large))\nsolver.add(Implies(vumpus_large, large))\n\n# Vumpuses are yumpuses\nsolver.add(Implies(vumpus, yumpus))\n\n# Yumpuses are transparent\nsolver.add(Implies(yumpus, transparent))\n\n# Yumpuses are numpuses\nsolver.add(Implies(yumpus, numpus))\n\n# Numpuses are brown\nsolver.add(Implies(numpus, brown))\n\n# Numpuses are tumpuses\nsolver.add(Implies(numpus, tumpus))\n\n# Tumpuses are sweet\nsolver.add(Implies(tumpus, sweet))\n\n# Tumpuses are jompuses\nsolver.add(Implies(tumpus, jompus))\n\n# Wren is a zumpus\nsolver.add(Implies(wren, zumpus))\n\n# Create facts in the problem\nsolver.add(wren)\n\n# Create statements to be checked\n# Wren is sweet\nsolver.add(wren, sweet)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_38",
    "context": "Vumpuses are wooden. Every vumpus is a jompus. Jompuses are earthy. Each jompus is a wumpus. Wumpuses are not transparent. Wumpuses are yumpuses. Yumpuses are not bright. Each yumpus is an impus. Every rompus is happy. Impuses are not happy. Each impus is a dumpus. Dumpuses are brown. Dumpuses are zumpuses. Zumpuses are not sour. Zumpuses are numpuses. Every numpus is not angry. Numpuses are tumpuses. Polly is a vumpus.",
    "question": "Is the following statement true or false? Polly is not happy.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Vumpuses are wooden.\nvumpus = Bool(\"vumpus\")\nwooden = Bool(\"wooden\")\n\n# Every vumpus is a jompus.\nvumpus = Bool(\"vumpus\")\njompus = Bool(\"jompus\")\n\n# Jompuses are earthy.\njompus = Bool(\"jompus\")\nearthy = Bool(\"earthy\")\n\n# Each jompus is a wumpus.\njompus = Bool(\"jompus\")\nwumpus = Bool(\"wumpus\")\n\n# Wumpuses are not transparent.\nwumpus = Bool(\"wumpus\")\ntransparent = Bool(\"transparent\")\n\n# Wumpuses are yumpuses.\nwumpus = Bool(\"wumpus\")\nyumpus = Bool(\"yumpus\")\n\n# Yumpuses are not bright.\nyumpus = Bool(\"yumpus\")\nbright = Bool(\"bright\")\n\n# Each yumpus is an impus.\nyumpus = Bool(\"yumpus\")\nimpus = Bool(\"impus\")\n\n# Every rompus is happy.\nrompus = Bool(\"rompus\")\nhappy = Bool(\"happy\")\n\n# Impuses are not happy.\nimpus = Bool(\"impus\")\nhappy = Bool(\"happy\")\n\n# Each impus is a dumpus.\nimpus = Bool(\"impus\")\ndumpus = Bool(\"dumpus\")\n\n# Dumpuses are brown.\ndumpus = Bool(\"dumpus\")\nbrown = Bool(\"brown\")\n\n# Dumpuses are zumpuses.\ndumpus = Bool(\"dumpus\")\nzumpus = Bool(\"zumpus\")\n\n# Zumpuses are not sour.\nzumpus = Bool(\"zumpus\")\nsour = Bool(\"sour\")\n\n# Zumpuses are numpuses.\nzumpus = Bool(\"zumpus\")\nnumpus = Bool(\"numpus\")\n\n# Every numpus is not angry.\nnumpus = Bool(\"numpus\")\nangry = Bool(\"angry\")\n\n# Numpuses are tumpuses.\nnumpus = Bool(\"numpus\")\ntumpus = Bool(\"tumpus\")\n\n# Polly is a vumpus.\npolly = Bool(\"polly\")\nvumpus = Bool(\"vumpus\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Vumpuses are wooden.\nsolver.add(Implies(vumpus, wooden))\n\n# Every vumpus is a jompus.\nsolver.add(Implies(vumpus, jompus))\n\n# Jompuses are earthy.\nsolver.add(Implies(jompus, earthy))\n\n# Each jompus is a wumpus.\nsolver.add(Implies(jompus, wumpus))\n\n# Wumpuses are not transparent.\nsolver.add(Implies(wumpus, Not(transparent)))\n\n# Wumpuses are yumpuses.\nsolver.add(Implies(wumpus, yumpus))\n\n# Yumpuses are not bright.\nsolver.add(Implies(yumpus, Not(bright)))\n\n# Each yumpus is an impus.\nsolver.add(Implies(yumpus, impus))\n\n# Every rompus is happy.\nsolver.add(Implies(rompus, happy))\n\n# Impuses are not happy.\nsolver.add(Implies(impus, Not(happy)))\n\n# Each impus is a dumpus.\nsolver.add(Implies(impus, dumpus))\n\n# Dumpuses are brown.\nsolver.add(Implies(dumpus, brown))\n\n# Dumpuses are zumpuses.\nsolver.add(Implies(dumpus, zumpus))\n\n# Zumpuses are not sour.\nsolver.add(Implies(zumpus, Not(sour)))\n\n# Zumpuses are numpuses.\nsolver.add(Implies(zumpus, numpus))\n\n# Every numpus is not angry.\nsolver.add(Implies(numpus, Not(angry)))\n\n# Numpuses are tumpuses.\nsolver.add(Implies(numpus, tumpus))\n\n# Create facts in the problem\nsolver.add(polly)\n\n# Create statements to be checked\n# Polly is not happy.\nsolver.add(polly, Not(happy))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_39",
    "context": "Each rompus is amenable. Each rompus is an impus. Impuses are happy. Every impus is a wumpus. Wumpuses are sour. Each wumpus is a zumpus. Zumpuses are fruity. Zumpuses are tumpuses. Each tumpus is not large. Every tumpus is a vumpus. Yumpuses are not hot. Every vumpus is liquid. Every vumpus is a jompus. Jompuses are hot. Jompuses are dumpuses. Stella is a wumpus.",
    "question": "Is the following statement true or false? Stella is not hot.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Each rompus is amenable\nrompus = Bool(\"rompus\")\namenable = Bool(\"amenable\")\n\n# Each rompus is an impus\n# rompus has been defined before\nimpus = Bool(\"impus\")\n\n# Impuses are happy\n# impus has been defined before\nhappy = Bool(\"happy\")\n\n# Every impus is a wumpus\n# impus has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Wumpuses are sour\n# wumpus has been defined before\nsour = Bool(\"sour\")\n\n# Each wumpus is a zumpus\n# wumpus has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Zumpuses are fruity\n# zumpus has been defined before\nfruity = Bool(\"fruity\")\n\n# Zumpuses are tumpuses\n# zumpus has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Each tumpus is not large\n# tumpus has been defined before\nlarge = Bool(\"large\")\n\n# Every tumpus is a vumpus\n# tumpus has been defined before\nvumpus = Bool(\"vumpus\")\n\n# Yumpuses are not hot\nyumpus = Bool(\"yumpus\")\nhot = Bool(\"hot\")\n\n# Every vumpus is liquid\n# vumpus has been defined before\nliquid = Bool(\"liquid\")\n\n# Every vumpus is a jompus\n# vumpus has been defined before\njompus = Bool(\"jompus\")\n\n# Jompuses are hot\n# jompus has been defined before\n# hot has been defined before\n\n# Jompuses are dumpuses\n# jompus has been defined before\ndumpus = Bool(\"dumpus\")\n\n# Stella is a wumpus\nstella = Bool(\"stella\")\n# wumpus has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Each rompus is amenable\nsolver.add(Implies(rompus, amenable))\n\n# Each rompus is an impus\nsolver.add(Implies(rompus, impus))\n\n# Impuses are happy\nsolver.add(Implies(impus, happy))\n\n# Every impus is a wumpus\nsolver.add(Implies(impus, wumpus))\n\n# Wumpuses are sour\nsolver.add(Implies(wumpus, sour))\n\n# Each wumpus is a zumpus\nsolver.add(Implies(wumpus, zumpus))\n\n# Zumpuses are fruity\nsolver.add(Implies(zumpus, fruity))\n\n# Zumpuses are tumpuses\nsolver.add(Implies(zumpus, tumpus))\n\n# Each tumpus is not large\nsolver.add(Implies(tumpus, Not(large)))\n\n# Every tumpus is a vumpus\nsolver.add(Implies(tumpus, vumpus))\n\n# Yumpuses are not hot\nsolver.add(Implies(yumpus, Not(hot)))\n\n# Every vumpus is liquid\nsolver.add(Implies(vumpus, liquid))\n\n# Every vumpus is a jompus\nsolver.add(Implies(vumpus, jompus))\n\n# Jompuses are hot\nsolver.add(Implies(jompus, hot))\n\n# Jompuses are dumpuses\nsolver.add(Implies(jompus, dumpus))\n\n# Stella is a wumpus\nsolver.add(Implies(stella, wumpus))\n\n# Create facts in the problem\nsolver.add(stella)\n\n# Create statements to be checked\n# Stella is not hot\nsolver.add(stella, Not(hot))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_40",
    "context": "Yumpuses are small. Yumpuses are vumpuses. Vumpuses are red. Vumpuses are numpuses. Numpuses are bitter. Each numpus is a wumpus. Each impus is not amenable. Every wumpus is bright. Every wumpus is a dumpus. Every dumpus is temperate. Dumpuses are rompuses. Rompuses are floral. Rompuses are tumpuses. Tumpuses are opaque. Each tumpus is a jompus. Every jompus is amenable. Every jompus is a zumpus. Sally is a wumpus.",
    "question": "Is the following statement true or false? Sally is amenable.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Yumpuses are small.\nyumpus = Bool(\"yumpus\")\nsmall = Bool(\"small\")\n\n# Yumpuses are vumpuses.\n# Yumpuses has been defined before\nvumpus = Bool(\"vumpus\")\n\n# Vumpuses are red.\n# Vumpuses has been defined before\nred = Bool(\"red\")\n\n# Vumpuses are numpuses.\n# Vumpuses has been defined before\nnumpus = Bool(\"numpus\")\n\n# Numpuses are bitter.\n# Numpuses has been defined before\nbitter = Bool(\"bitter\")\n\n# Each numpus is a wumpus.\n# Numpuses has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Each impus is not amenable.\nimpus = Bool(\"impus\")\namenable = Bool(\"amenable\")\n\n# Every wumpus is bright.\n# Wumpus has been defined before\nbright = Bool(\"bright\")\n\n# Every wumpus is a dumpus.\n# Wumpus has been defined before\ndumpus = Bool(\"dumpus\")\n\n# Every dumpus is temperate.\n# Dumpus has been defined before\ntemperate = Bool(\"temperate\")\n\n# Dumpuses are rompuses.\n# Dumpus has been defined before\nrompus = Bool(\"rompus\")\n\n# Rompuses are floral.\n# Rompus has been defined before\nfloral = Bool(\"floral\")\n\n# Rompuses are tumpuses.\n# Rompus has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Tumpuses are opaque.\n# Tumpus has been defined before\nopaque = Bool(\"opaque\")\n\n# Each tumpus is a jompus.\n# Tumpus has been defined before\njompus = Bool(\"jompus\")\n\n# Every jompus is amenable.\n# Jompus has been defined before\n# Amenable has been defined before\n\n# Every jompus is a zumpus.\n# Jompus has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Sally is a wumpus.\nsally = Bool(\"sally\")\n# Wumpus has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Yumpuses are small.\nsolver.add(Implies(yumpus, small))\n\n# Yumpuses are vumpuses.\nsolver.add(Implies(yumpus, vumpus))\n\n# Vumpuses are red.\nsolver.add(Implies(vumpus, red))\n\n# Vumpuses are numpuses.\nsolver.add(Implies(vumpus, numpus))\n\n# Numpuses are bitter.\nsolver.add(Implies(numpus, bitter))\n\n# Each numpus is a wumpus.\nsolver.add(Implies(numpus, wumpus))\n\n# Each impus is not amenable.\nsolver.add(Implies(impus, Not(amenable)))\n\n# Every wumpus is bright.\nsolver.add(Implies(wumpus, bright))\n\n# Every wumpus is a dumpus.\nsolver.add(Implies(wumpus, dumpus))\n\n# Every dumpus is temperate.\nsolver.add(Implies(dumpus, temperate))\n\n# Dumpuses are rompuses.\nsolver.add(Implies(dumpus, rompus))\n\n# Rompuses are floral.\nsolver.add(Implies(rompus, floral))\n\n# Rompuses are tumpuses.\nsolver.add(Implies(rompus, tumpus))\n\n# Tumpuses are opaque.\nsolver.add(Implies(tumpus, opaque))\n\n# Each tumpus is a jompus.\nsolver.add(Implies(tumpus, jompus))\n\n# Every jompus is amenable.\nsolver.add(Implies(jompus, amenable))\n\n# Every jompus is a zumpus.\nsolver.add(Implies(jompus, zumpus))\n\n# Sally is a wumpus.\nsolver.add(Implies(sally, wumpus))\n\n# Create statements to be checked\n# Sally is amenable.\nsolver.add(sally, amenable)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_41",
    "context": "Rompuses are transparent. Every rompus is a yumpus. Yumpuses are earthy. Yumpuses are jompuses. Every jompus is not large. Each jompus is a wumpus. Each wumpus is not brown. Tumpuses are hot. Wumpuses are zumpuses. Every zumpus is dull. Zumpuses are numpuses. Numpuses are bitter. Every numpus is a dumpus. Dumpuses are not shy. Each dumpus is an impus. Impuses are not hot. Impuses are vumpuses. Max is a wumpus.",
    "question": "Is the following statement true or false? Max is not hot.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Rompuses are transparent\nrompus = Bool(\"rompus\")\ntransparent = Bool(\"transparent\")\n\n# Every rompus is a yumpus\nyumpus = Bool(\"yumpus\")\n\n# Yumpuses are earthy\nearthy = Bool(\"earthy\")\n\n# Yumpuses are jompuses\njompus = Bool(\"jompus\")\n\n# Every jompus is not large\nlarge = Bool(\"large\")\njompus = Bool(\"jompus\")\n\n# Each jompus is a wumpus\nwumpus = Bool(\"wumpus\")\n\n# Each wumpus is not brown\nbrown = Bool(\"brown\")\nwumpus = Bool(\"wumpus\")\n\n# Tumpuses are hot\ntumpus = Bool(\"tumpus\")\nhot = Bool(\"hot\")\n\n# Wumpuses are zumpuses\nzumpus = Bool(\"zumpus\")\n\n# Every zumpus is dull\ndull = Bool(\"dull\")\nzumpus = Bool(\"zumpus\")\n\n# Zumpuses are numpuses\nnumpus = Bool(\"numpus\")\n\n# Numpuses are bitter\nbitter = Bool(\"bitter\")\nnumpus = Bool(\"numpus\")\n\n# Every numpus is a dumpus\ndumpus = Bool(\"dumpus\")\n\n# Dumpuses are not shy\nshy = Bool(\"shy\")\ndumpus = Bool(\"dumpus\")\n\n# Each dumpus is an impus\nimpus = Bool(\"impus\")\ndumpus = Bool(\"dumpus\")\n\n# Impuses are not hot\nhot = Bool(\"hot\")\nimpus = Bool(\"impus\")\n\n# Impuses are vumpuses\nvumpus = Bool(\"vumpus\")\nimpus = Bool(\"impus\")\n\n# Max is a wumpus\nmax = Bool(\"max\")\nwumpus = Bool(\"wumpus\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Rompuses are transparent\nsolver.add(Implies(rompus, transparent))\n\n# Every rompus is a yumpus\nsolver.add(Implies(rompus, yumpus))\n\n# Yumpuses are earthy\nsolver.add(Implies(yumpus, earthy))\n\n# Yumpuses are jompuses\nsolver.add(Implies(yumpus, jompus))\n\n# Every jompus is not large\nsolver.add(Implies(jompus, Not(large)))\n\n# Each jompus is a wumpus\nsolver.add(Implies(jompus, wumpus))\n\n# Each wumpus is not brown\nsolver.add(Implies(wumpus, Not(brown)))\n\n# Tumpuses are hot\nsolver.add(Implies(tumpus, hot))\n\n# Wumpuses are zumpuses\nsolver.add(Implies(wumpus, zumpus))\n\n# Every zumpus is dull\nsolver.add(Implies(zumpus, dull))\n\n# Zumpuses are numpuses\nsolver.add(Implies(zumpus, numpus))\n\n# Numpuses are bitter\nsolver.add(Implies(numpus, bitter))\n\n# Every numpus is a dumpus\nsolver.add(Implies(numpus, dumpus))\n\n# Dumpuses are not shy\nsolver.add(Implies(dumpus, Not(shy)))\n\n# Each dumpus is an impus\nsolver.add(Implies(dumpus, impus))\n\n# Impuses are not hot\nsolver.add(Implies(impus, Not(hot)))\n\n# Impuses are vumpuses\nsolver.add(Implies(impus, vumpus))\n\n# Max is a wumpus\nsolver.add(Implies(max, wumpus))\n\n# Create statements to be checked\n# Max is not hot\nsolver.add(max, Not(hot))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_42",
    "context": "Tumpuses are dull. Tumpuses are jompuses. Jompuses are not sour. Each jompus is a vumpus. Vumpuses are feisty. Vumpuses are dumpuses. Dumpuses are cold. Each dumpus is a yumpus. Each yumpus is transparent. Each yumpus is a numpus. Numpuses are not amenable. Numpuses are zumpuses. Each zumpus is orange. Each zumpus is a rompus. Rompuses are earthy. Each impus is not orange. Rompuses are wumpuses. Wren is a vumpus.",
    "question": "Is the following statement true or false? Wren is not orange.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Tumpuses are dull.\ntumpus = Bool(\"tumpus\")\ndull = Bool(\"dull\")\n\n# Tumpuses are jompuses.\n# Tumpuses has been defined before\njompus = Bool(\"jompus\")\n\n# Jompuses are not sour.\n# Jompuses has been defined before\nsour = Bool(\"sour\")\n\n# Each jompus is a vumpus.\nvumpus = Bool(\"vumpus\")\n\n# Vumpuses are feisty.\n# Vumpuses has been defined before\nfeisty = Bool(\"feisty\")\n\n# Vumpuses are dumpuses.\n# Vumpuses has been defined before\ndumpus = Bool(\"dumpus\")\n\n# Dumpuses are cold.\n# Dumpuses has been defined before\ncold = Bool(\"cold\")\n\n# Each dumpus is a yumpus.\nyumpus = Bool(\"yumpus\")\n\n# Each yumpus is transparent.\ntransparent = Bool(\"transparent\")\n\n# Each yumpus is a numpus.\nnumpus = Bool(\"numpus\")\n\n# Numpuses are not amenable.\n# Numpuses has been defined before\namenable = Bool(\"amenable\")\n\n# Numpuses are zumpuses.\n# Numpuses has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Each zumpus is orange.\norange = Bool(\"orange\")\n\n# Each zumpus is a rompus.\nrompus = Bool(\"rompus\")\n\n# Rompuses are earthy.\n# Rompuses has been defined before\nearthy = Bool(\"earthy\")\n\n# Each impus is not orange.\nimpus = Bool(\"impus\")\n\n# Rompuses are wumpuses.\n# Rompuses has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Wren is a vumpus.\nwren = Bool(\"wren\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Tumpuses are dull.\nsolver.add(Implies(tumpus, dull))\n\n# Tumpuses are jompuses.\nsolver.add(Implies(tumpus, jompus))\n\n# Jompuses are not sour.\nsolver.add(Implies(jompus, Not(sour)))\n\n# Each jompus is a vumpus.\nsolver.add(Implies(jompus, vumpus))\n\n# Vumpuses are feisty.\nsolver.add(Implies(vumpus, feisty))\n\n# Vumpuses are dumpuses.\nsolver.add(Implies(vumpus, dumpus))\n\n# Dumpuses are cold.\nsolver.add(Implies(dumpus, cold))\n\n# Each dumpus is a yumpus.\nsolver.add(Implies(dumpus, yumpus))\n\n# Each yumpus is transparent.\nsolver.add(Implies(yumpus, transparent))\n\n# Each yumpus is a numpus.\nsolver.add(Implies(yumpus, numpus))\n\n# Numpuses are not amenable.\nsolver.add(Implies(numpus, Not(amenable)))\n\n# Numpuses are zumpuses.\nsolver.add(Implies(numpus, zumpus))\n\n# Each zumpus is orange.\nsolver.add(Implies(zumpus, orange))\n\n# Each zumpus is a rompus.\nsolver.add(Implies(zumpus, rompus))\n\n# Rompuses are earthy.\nsolver.add(Implies(rompus, earthy))\n\n# Each impus is not orange.\nsolver.add(Implies(impus, Not(orange)))\n\n# Rompuses are wumpuses.\nsolver.add(Implies(rompus, wumpus))\n\n# Wren is a vumpus.\nsolver.add(Implies(wren, vumpus))\n\n# Create facts in the problem\n\n# Create statements to be checked\n# Wren is not orange.\nsolver.add(wren, Not(orange))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_43",
    "context": "Each impus is luminous. Every impus is a zumpus. Every zumpus is shy. Every zumpus is a numpus. Numpuses are not cold. Each numpus is a tumpus. Tumpuses are large. Each tumpus is a yumpus. Each yumpus is angry. Yumpuses are vumpuses. Vumpuses are not earthy. Vumpuses are jompuses. Every jompus is not sour. Dumpuses are not angry. Jompuses are rompuses. Rompuses are not opaque. Rompuses are wumpuses. Polly is an impus.",
    "question": "Is the following statement true or false? Polly is angry.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Each impus is luminous\nimpus = Bool(\"impus\")\nluminous = Bool(\"luminous\")\n\n# Every impus is a zumpus\n# impus has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Every zumpus is shy\n# zumpus has been defined before\nshy = Bool(\"shy\")\n\n# Every zumpus is a numpus\n# zumpus has been defined before\nnumpus = Bool(\"numpus\")\n\n# Numpuses are not cold\n# numpus has been defined before\ncold = Bool(\"cold\")\n\n# Each numpus is a tumpus\n# numpus has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Tumpuses are large\n# tumpus has been defined before\nlarge = Bool(\"large\")\n\n# Each tumpus is a yumpus\n# tumpus has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Each yumpus is angry\n# yumpus has been defined before\nangry = Bool(\"angry\")\n\n# Yumpuses are vumpuses\n# yumpus has been defined before\nvumpus = Bool(\"vumpus\")\n\n# Vumpuses are not earthy\n# vumpus has been defined before\nearthy = Bool(\"earthy\")\n\n# Vumpuses are jompuses\n# vumpus has been defined before\njompus = Bool(\"jompus\")\n\n# Every jompus is not sour\n# jompus has been defined before\nsour = Bool(\"sour\")\n\n# Dumpuses are not angry\ndumpus = Bool(\"dumpus\")\n# Angry has been defined before\n\n# Jompuses are rompuses\n# jompus has been defined before\nrompus = Bool(\"rompus\")\n\n# Rompuses are not opaque\n# rompus has been defined before\nopaque = Bool(\"opaque\")\n\n# Rompuses are wumpuses\n# rompus has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Polly is an impus\npolly = Bool(\"polly\")\n# Impus has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Each impus is luminous\nsolver.add(Implies(impus, luminous))\n\n# Every impus is a zumpus\nsolver.add(Implies(impus, zumpus))\n\n# Every zumpus is shy\nsolver.add(Implies(zumpus, shy))\n\n# Every zumpus is a numpus\nsolver.add(Implies(zumpus, numpus))\n\n# Numpuses are not cold\nsolver.add(Implies(numpus, Not(cold)))\n\n# Each numpus is a tumpus\nsolver.add(Implies(numpus, tumpus))\n\n# Tumpuses are large\nsolver.add(Implies(tumpus, large))\n\n# Each tumpus is a yumpus\nsolver.add(Implies(tumpus, yumpus))\n\n# Each yumpus is angry\nsolver.add(Implies(yumpus, angry))\n\n# Yumpuses are vumpuses\nsolver.add(Implies(yumpus, vumpus))\n\n# Vumpuses are not earthy\nsolver.add(Implies(vumpus, Not(earthy)))\n\n# Vumpuses are jompuses\nsolver.add(Implies(vumpus, jompus))\n\n# Every jompus is not sour\nsolver.add(Implies(jompus, Not(sour)))\n\n# Dumpuses are not angry\nsolver.add(Not(dumpus), Not(angry))\n\n# Jompuses are rompuses\nsolver.add(Implies(jompus, rompus))\n\n# Rompuses are not opaque\nsolver.add(Implies(rompus, Not(opaque)))\n\n# Rompuses are wumpuses\nsolver.add(Implies(rompus, wumpus))\n\n# Polly is an impus\nsolver.add(Implies(polly, impus))\n\n# Create facts in the problem\nsolver.add(polly)\n\n# Create statements to be checked\n# Polly is angry\nsolver.add(polly, angry)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_44",
    "context": "Yumpuses are floral. Each yumpus is a vumpus. Vumpuses are not temperate. Vumpuses are jompuses. Jompuses are not dull. Impuses are not spicy. Jompuses are numpuses. Numpuses are not opaque. Each numpus is a wumpus. Every wumpus is amenable. Wumpuses are rompuses. Each rompus is not red. Rompuses are tumpuses. Tumpuses are spicy. Every tumpus is a dumpus. Dumpuses are shy. Each dumpus is a zumpus. Rex is a jompus.",
    "question": "Is the following statement true or false? Rex is not spicy.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Yumpuses are floral\nyumpus = Bool(\"yumpus\")\nfloral = Bool(\"floral\")\n\n# Each yumpus is a vumpus\nyumpus = Bool(\"yumpus\")\nvumpus = Bool(\"vumpus\")\n\n# Vumpuses are not temperate\nvumpus = Bool(\"vumpus\")\ntemperate = Bool(\"temperate\")\n\n# Vumpuses are jompuses\nvumpus = Bool(\"vumpus\")\njompus = Bool(\"jompus\")\n\n# Jompuses are not dull\njompus = Bool(\"jompus\")\ndull = Bool(\"dull\")\n\n# Impuses are not spicy\nimpus = Bool(\"impus\")\nspicy = Bool(\"spicy\")\n\n# Jompuses are numpuses\njompus = Bool(\"jompus\")\nnumpus = Bool(\"numpus\")\n\n# Numpuses are not opaque\nnumpus = Bool(\"numpus\")\nopaque = Bool(\"opaque\")\n\n# Each numpus is a wumpus\nnumpus = Bool(\"numpus\")\nwumpus = Bool(\"wumpus\")\n\n# Every wumpus is amenable\nwumpus = Bool(\"wumpus\")\namenable = Bool(\"amenable\")\n\n# Wumpuses are rompuses\nwumpus = Bool(\"wumpus\")\nrompus = Bool(\"rompus\")\n\n# Each rompus is not red\nrompus = Bool(\"rompus\")\nred = Bool(\"red\")\n\n# Rompuses are tumpuses\nrompus = Bool(\"rompus\")\ntumpus = Bool(\"tumpus\")\n\n# Tumpuses are spicy\ntumpus = Bool(\"tumpus\")\nspicy = Bool(\"spicy\")\n\n# Every tumpus is a dumpus\ntumpus = Bool(\"tumpus\")\ndumpus = Bool(\"dumpus\")\n\n# Dumpuses are shy\ndumpus = Bool(\"dumpus\")\nshy = Bool(\"shy\")\n\n# Each dumpus is a zumpus\ndumpus = Bool(\"dumpus\")\nzumpus = Bool(\"zumpus\")\n\n# Rex is a jompus\nrex = Bool(\"rex\")\njompus = Bool(\"jompus\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Yumpuses are floral\nsolver.add(Implies(yumpus, floral))\n\n# Each yumpus is a vumpus\nsolver.add(Implies(yumpus, vumpus))\n\n# Vumpuses are not temperate\nsolver.add(Implies(vumpus, Not(temperate)))\n\n# Vumpuses are jompuses\nsolver.add(Implies(vumpus, jompus))\n\n# Jompuses are not dull\nsolver.add(Implies(jompus, Not(dull)))\n\n# Impuses are not spicy\nsolver.add(Implies(impus, Not(spicy)))\n\n# Jompuses are numpuses\nsolver.add(Implies(jompus, numpus))\n\n# Numpuses are not opaque\nsolver.add(Implies(numpus, Not(opaque)))\n\n# Each numpus is a wumpus\nsolver.add(Implies(numpus, wumpus))\n\n# Every wumpus is amenable\nsolver.add(Implies(wumpus, amenable))\n\n# Wumpuses are rompuses\nsolver.add(Implies(wumpus, rompus))\n\n# Each rompus is not red\nsolver.add(Implies(rompus, Not(red)))\n\n# Rompuses are tumpuses\nsolver.add(Implies(rompus, tumpus))\n\n# Tumpuses are spicy\nsolver.add(Implies(tumpus, spicy))\n\n# Every tumpus is a dumpus\nsolver.add(Implies(tumpus, dumpus))\n\n# Dumpuses are shy\nsolver.add(Implies(dumpus, shy))\n\n# Each dumpus is a zumpus\nsolver.add(Implies(dumpus, zumpus))\n\n# Rex is a jompus\nsolver.add(Implies(rex, jompus))\n\n# Create statements to be checked\n# Rex is not spicy\nsolver.add(rex, Not(spicy))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_45",
    "context": "Dumpuses are cold. Dumpuses are numpuses. Each numpus is not bitter. Every numpus is a zumpus. Zumpuses are fruity. Zumpuses are wumpuses. Wumpuses are large. Each tumpus is not wooden. Each wumpus is an impus. Every impus is wooden. Impuses are rompuses. Fae is a dumpus.",
    "question": "Is the following statement true or false? Fae is wooden.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Dumpuses are cold.\ndumpus = Bool(\"dumpus\")\ncold = Bool(\"cold\")\n\n# Dumpuses are numpuses.\n# Dumpuses has been defined before\nnumpus = Bool(\"numpus\")\n\n# Each numpus is not bitter.\nnumpus = Bool(\"numpus\")\nbitter = Bool(\"bitter\")\n\n# Every numpus is a zumpus.\nzumpus = Bool(\"zumpus\")\nnumpus = Bool(\"numpus\")\n\n# Zumpuses are fruity.\n# Zumpuses has been defined before\nfruity = Bool(\"fruity\")\n\n# Zumpuses are wumpuses.\n# Zumpuses has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Wumpuses are large.\n# Wumpuses has been defined before\nlarge = Bool(\"large\")\n\n# Each tumpus is not wooden.\ntumpus = Bool(\"tumpus\")\nwooden = Bool(\"wooden\")\n\n# Each wumpus is an impus.\nwumpus = Bool(\"wumpus\")\nimpus = Bool(\"impus\")\n\n# Every impus is wooden.\n# Impuses has been defined before\nwooden = Bool(\"wooden\")\n\n# Impuses are rompuses.\n# Impuses has been defined before\nrompus = Bool(\"rompus\")\n\n# Fae is a dumpus.\nfae = Bool(\"fae\")\ndumpus = Bool(\"dumpus\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Dumpuses are cold.\nsolver.add(Implies(dumpus, cold))\n\n# Dumpuses are numpuses.\nsolver.add(Implies(dumpus, numpus))\n\n# Each numpus is not bitter.\nsolver.add(Implies(numpus, Not(bitter)))\n\n# Every numpus is a zumpus.\nsolver.add(Implies(numpus, zumpus))\n\n# Zumpuses are fruity.\nsolver.add(Implies(zumpus, fruity))\n\n# Zumpuses are wumpuses.\nsolver.add(Implies(zumpus, wumpus))\n\n# Wumpuses are large.\nsolver.add(Implies(wumpus, large))\n\n# Each tumpus is not wooden.\nsolver.add(Implies(tumpus, Not(wooden)))\n\n# Each wumpus is an impus.\nsolver.add(Implies(wumpus, impus))\n\n# Every impus is wooden.\nsolver.add(Implies(impus, wooden))\n\n# Impuses are rompuses.\nsolver.add(Implies(impus, rompus))\n\n# Fae is a dumpus.\nsolver.add(Implies(fae, dumpus))\n\n# Create facts in the problem\nsolver.add(fae)\n\n# Create statements to be checked\n# Fae is wooden.\nsolver.add(fae, wooden)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_46",
    "context": "Each rompus is nervous. Rompuses are jompuses. Jompuses are angry. Jompuses are tumpuses. Tumpuses are earthy. Every tumpus is a numpus. Each numpus is not cold. Each numpus is an impus. Dumpuses are metallic. Impuses are dull. Each impus is a zumpus. Zumpuses are not opaque. Zumpuses are wumpuses. Every wumpus is blue. Wumpuses are vumpuses. Every vumpus is not metallic. Every vumpus is a yumpus. Sally is a numpus.",
    "question": "Is the following statement true or false? Sally is not metallic.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Each rompus is nervous\nrompus = Bool(\"rompus\")\nnervous = Bool(\"nervous\")\n\n# Rompuses are jompuses\n# rompus has been defined before\njompus = Bool(\"jompus\")\n\n# Jompuses are angry\n# jompus has been defined before\nangry = Bool(\"angry\")\n\n# Jompuses are tumpuses\n# jompus has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Tumpuses are earthy\n# tumpus has been defined before\nearthy = Bool(\"earthy\")\n\n# Every tumpus is a numpus\ntumpus = Bool(\"tumpus\")\nnumpus = Bool(\"numpus\")\n\n# Each numpus is not cold\nnumpus = Bool(\"numpus\")\ncold = Bool(\"cold\")\n\n# Each numpus is an impus\nnumpus = Bool(\"numpus\")\nimpus = Bool(\"impus\")\n\n# Dumpuses are metallic\ndumpus = Bool(\"dumpus\")\nmetallic = Bool(\"metallic\")\n\n# Impuses are dull\nimpus = Bool(\"impus\")\ndull = Bool(\"dull\")\n\n# Each impus is a zumpus\nimpus = Bool(\"impus\")\nzumpus = Bool(\"zumpus\")\n\n# Zumpuses are not opaque\nzumpus = Bool(\"zumpus\")\nopaque = Bool(\"opaque\")\n\n# Zumpuses are wumpuses\n# zumpus has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Every wumpus is blue\nwumpus = Bool(\"wumpus\")\nblue = Bool(\"blue\")\n\n# Wumpuses are vumpuses\n# wumpus has been defined before\nvumpus = Bool(\"vumpus\")\n\n# Every vumpus is not metallic\nvumpus = Bool(\"vumpus\")\nmetallic = Bool(\"metallic\")\n\n# Every vumpus is a yumpus\nvumpus = Bool(\"vumpus\")\nyumpus = Bool(\"yumpus\")\n\n# Sally is a numpus\nsally = Bool(\"sally\")\nnumpus = Bool(\"numpus\")\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Each rompus is nervous\nsolver.add(Implies(rompus, nervous))\n\n# Rompuses are jompuses\nsolver.add(Implies(rompus, jompus))\n\n# Jompuses are angry\nsolver.add(Implies(jompus, angry))\n\n# Jompuses are tumpuses\nsolver.add(Implies(jompus, tumpus))\n\n# Tumpuses are earthy\nsolver.add(Implies(tumpus, earthy))\n\n# Every tumpus is a numpus\nsolver.add(Implies(tumpus, numpus))\n\n# Each numpus is not cold\nsolver.add(Implies(numpus, Not(cold)))\n\n# Each numpus is an impus\nsolver.add(Implies(numpus, impus))\n\n# Dumpuses are metallic\nsolver.add(Implies(dumpus, metallic))\n\n# Impuses are dull\nsolver.add(Implies(impus, dull))\n\n# Each impus is a zumpus\nsolver.add(Implies(impus, zumpus))\n\n# Zumpuses are not opaque\nsolver.add(Implies(zumpus, Not(opaque)))\n\n# Zumpuses are wumpuses\nsolver.add(Implies(zumpus, wumpus))\n\n# Every wumpus is blue\nsolver.add(Implies(wumpus, blue))\n\n# Wumpuses are vumpuses\nsolver.add(Implies(wumpus, vumpus))\n\n# Every vumpus is not metallic\nsolver.add(Implies(vumpus, Not(metallic)))\n\n# Every vumpus is a yumpus\nsolver.add(Implies(vumpus, yumpus))\n\n# Sally is a numpus\nsolver.add(Implies(sally, numpus))\n\n# Create facts in the problem\nsolver.add(sally)\n\n# Create statements to be checked\n# Sally is not metallic\nsolver.add(sally, Not(metallic))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_47",
    "context": "Vumpuses are fruity. Vumpuses are jompuses. Jompuses are opaque. Every jompus is a wumpus. Every wumpus is nervous. Each wumpus is an impus. Every impus is sour. Impuses are tumpuses. Every tumpus is not amenable. Each tumpus is a yumpus. Yumpuses are not metallic. Yumpuses are numpuses. Numpuses are large. Every numpus is a rompus. Dumpuses are not cold. Each rompus is cold. Each rompus is a zumpus. Max is an impus.",
    "question": "Is the following statement true or false? Max is not cold.",
    "program": "```python\nfrom z3 import * \n\n# Define boolean variables for all entities\n# Vumpuses are fruity\nvumpus = Bool(\"vumpus\")\nfruity = Bool(\"fruity\")\n\n# Vumpuses are jompuses\n# Vumpuses has been defined before\njompus = Bool(\"jompus\")\n\n# Jompuses are opaque\n# Jompuses has been defined before\nopaque = Bool(\"opaque\")\n\n# Every jompus is a wumpus\n# Jompuses has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Every wumpus is nervous\n# Wumpus has been defined before\nnervous = Bool(\"nervous\")\n\n# Each wumpus is an impus\n# Wumpus has been defined before\nimpus = Bool(\"impus\")\n\n# Every impus is sour\n# Impus has been defined before\nsour = Bool(\"sour\")\n\n# Impuses are tumpuses\n# Impus has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Every tumpus is not amenable\n# Tumpus has been defined before\namenable = Bool(\"amenable\")\n\n# Each tumpus is a yumpus\n# Tumpus has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Yumpuses are not metallic\n# Yumpus has been defined before\nmetallic = Bool(\"metallic\")\n\n# Yumpuses are numpuses\n# Yumpus has been defined before\nnumpus = Bool(\"numpus\")\n\n# Numpuses are large\n# Numpus has been defined before\nlarge = Bool(\"large\")\n\n# Every numpus is a rompus\n# Numpus has been defined before\nrompus = Bool(\"rompus\")\n\n# Dumpuses are not cold\ndumpus = Bool(\"dumpus\")\ncold = Bool(\"cold\")\n\n# Each rompus is cold\n# Rompus has been defined before\n# Cold has been defined before\n\n# Each rompus is a zumpus\n# Rompus has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Max is an impus\nmax = Bool(\"max\")\n# Impus has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Vumpuses are fruity\nsolver.add(Implies(vumpus, fruity))\n\n# Vumpuses are jompuses\nsolver.add(Implies(vumpus, jompus))\n\n# Jompuses are opaque\nsolver.add(Implies(jompus, opaque))\n\n# Every jompus is a wumpus\nsolver.add(Implies(jompus, wumpus))\n\n# Every wumpus is nervous\nsolver.add(Implies(wumpus, nervous))\n\n# Each wumpus is an impus\nsolver.add(Implies(wumpus, impus))\n\n# Every impus is sour\nsolver.add(Implies(impus, sour))\n\n# Impuses are tumpuses\nsolver.add(Implies(impus, tumpus))\n\n# Every tumpus is not amenable\nsolver.add(Implies(tumpus, Not(amenable)))\n\n# Each tumpus is a yumpus\nsolver.add(Implies(tumpus, yumpus))\n\n# Yumpuses are not metallic\nsolver.add(Implies(yumpus, Not(metallic)))\n\n# Yumpuses are numpuses\nsolver.add(Implies(yumpus, numpus))\n\n# Numpuses are large\nsolver.add(Implies(numpus, large))\n\n# Every numpus is a rompus\nsolver.add(Implies(numpus, rompus))\n\n# Dumpuses are not cold\nsolver.add(Implies(dumpus, Not(cold)))\n\n# Each rompus is cold\nsolver.add(Implies(rompus, cold))\n\n# Each rompus is a zumpus\nsolver.add(Implies(rompus, zumpus))\n\n# Max is an impus\nsolver.add(Implies(max, impus))\n\n# Create facts in the problem\nsolver.add(max)\n\n# Create statements to be checked\n# Max is not cold\nsolver.add(max, Not(cold))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_48",
    "context": "Tumpuses are fruity. Yumpuses are nervous. Yumpuses are numpuses. Each numpus is large. Each numpus is a rompus. Each rompus is red. Rompuses are vumpuses. Vumpuses are temperate. Each vumpus is a jompus. Every jompus is spicy. Each jompus is an impus. Impuses are not metallic. Impuses are wumpuses. Each wumpus is bright. Wumpuses are zumpuses. Zumpuses are not fruity. Each zumpus is a dumpus. Sam is a vumpus.",
    "question": "Is the following statement true or false? Sam is not fruity.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Tumpuses are fruity\ntumpus = Bool(\"tumpus\")\nfruity = Bool(\"fruity\")\n\n# Yumpuses are nervous\nyumpus = Bool(\"yumpus\")\nnervous = Bool(\"nervous\")\n\n# Yumpuses are numpuses\n# Yumpuses has been defined before\nnumpus = Bool(\"numpus\")\n\n# Each numpus is large\n# Numpus has been defined before\nlarge = Bool(\"large\")\n\n# Each numpus is a rompus\n# Numpus has been defined before\nrompus = Bool(\"rompus\")\n\n# Each rompus is red\n# Rompus has been defined before\nred = Bool(\"red\")\n\n# Rompuses are vumpuses\n# Rompuses has been defined before\nvumpus = Bool(\"vumpus\")\n\n# Vumpuses are temperate\n# Vumpuses has been defined before\ntemperate = Bool(\"temperate\")\n\n# Each vumpus is a jompus\n# Vumpus has been defined before\njompus = Bool(\"jompus\")\n\n# Every jompus is spicy\n# Jompus has been defined before\nspicy = Bool(\"spicy\")\n\n# Each jompus is an impus\n# Jompus has been defined before\nimpus = Bool(\"impus\")\n\n# Impuses are not metallic\n# Impuses has been defined before\nmetallic = Bool(\"metallic\")\n\n# Impuses are wumpuses\n# Impuses has been defined before\nwumpus = Bool(\"wumpus\")\n\n# Each wumpus is bright\n# Wumpus has been defined before\nbright = Bool(\"bright\")\n\n# Wumpuses are zumpuses\n# Wumpuses has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Zumpuses are not fruity\n# Zumpuses has been defined before\n# Fruity has been defined before\n\n# Each zumpus is a dumpus\n# Zumpus has been defined before\ndumpus = Bool(\"dumpus\")\n\n# Sam is a vumpus\nsam = Bool(\"sam\")\n# Vumpuses has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Tumpuses are fruity\nsolver.add(Implies(tumpus, fruity))\n\n# Yumpuses are nervous\nsolver.add(Implies(yumpus, nervous))\n\n# Yumpuses are numpuses\nsolver.add(Implies(yumpus, numpus))\n\n# Each numpus is large\nsolver.add(Implies(numpus, large))\n\n# Each numpus is a rompus\nsolver.add(Implies(numpus, rompus))\n\n# Each rompus is red\nsolver.add(Implies(rompus, red))\n\n# Rompuses are vumpuses\nsolver.add(Implies(rompus, vumpus))\n\n# Vumpuses are temperate\nsolver.add(Implies(vumpus, temperate))\n\n# Each vumpus is a jompus\nsolver.add(Implies(vumpus, jompus))\n\n# Every jompus is spicy\nsolver.add(Implies(jompus, spicy))\n\n# Each jompus is an impus\nsolver.add(Implies(jompus, impus))\n\n# Impuses are not metallic\nsolver.add(Implies(impus, Not(metallic)))\n\n# Impuses are wumpuses\nsolver.add(Implies(impus, wumpus))\n\n# Each wumpus is bright\nsolver.add(Implies(wumpus, bright))\n\n# Wumpuses are zumpuses\nsolver.add(Implies(wumpus, zumpus))\n\n# Zumpuses are not fruity\nsolver.add(Implies(zumpus, Not(fruity)))\n\n# Each zumpus is a dumpus\nsolver.add(Implies(zumpus, dumpus))\n\n# Sam is a vumpus\nsolver.add(Implies(sam, vumpus))\n\n# Create facts in the problem\nsolver.add(sam)\n\n# Create statements to be checked\n# Sam is not fruity\nsolver.add(sam, Not(fruity))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "A"
  },
  {
    "id": "ProntoQA_49",
    "context": "Wumpuses are dull. Wumpuses are rompuses. Every rompus is not cold. Rompuses are dumpuses. Dumpuses are feisty. Dumpuses are numpuses. Numpuses are mean. Numpuses are zumpuses. Every zumpus is not earthy. Every zumpus is a tumpus. Every tumpus is opaque. Impuses are liquid. Tumpuses are vumpuses. Every vumpus is not liquid. Vumpuses are jompuses. Each jompus is not spicy. Jompuses are yumpuses. Wren is a dumpus.",
    "question": "Is the following statement true or false? Wren is liquid.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Wumpuses are dull.\nwumpus = Bool(\"wumpus\")\ndull = Bool(\"dull\")\n\n# Wumpuses are rompuses.\n# Wumpuses has been defined before\nrompus = Bool(\"rompus\")\n\n# Every rompus is not cold.\nrompus = Bool(\"rompus\")\ncold = Bool(\"cold\")\n\n# Rompuses are dumpuses.\n# Rompuses has been defined before\ndumpus = Bool(\"dumpus\")\n\n# Dumpuses are feisty.\n# Dumpuses has been defined before\nfeisty = Bool(\"feisty\")\n\n# Dumpuses are numpuses.\n# Dumpuses has been defined before\nnumpus = Bool(\"numpus\")\n\n# Numpuses are mean.\n# Numpuses has been defined before\nmean = Bool(\"mean\")\n\n# Numpuses are zumpuses.\n# Numpuses has been defined before\nzumpus = Bool(\"zumpus\")\n\n# Every zumpus is not earthy.\nzumpus = Bool(\"zumpus\")\nearthy = Bool(\"earthy\")\n\n# Every zumpus is a tumpus.\n# Zumpuses has been defined before\ntumpus = Bool(\"tumpus\")\n\n# Every tumpus is opaque.\n# Tumpuses has been defined before\nopaque = Bool(\"opaque\")\n\n# Impuses are liquid.\nimpus = Bool(\"impus\")\nliquid = Bool(\"liquid\")\n\n# Tumpuses are vumpuses.\n# Tumpuses has been defined before\nvumpus = Bool(\"vumpus\")\n\n# Every vumpus is not liquid.\n# Vumpuses has been defined before\nliquid = Bool(\"liquid\")\n\n# Vumpuses are jompuses.\n# Vumpuses has been defined before\njompus = Bool(\"jompus\")\n\n# Each jompus is not spicy.\n# Jompuses has been defined before\nspicy = Bool(\"spicy\")\n\n# Jompuses are yumpuses.\n# Jompuses has been defined before\nyumpus = Bool(\"yumpus\")\n\n# Wren is a dumpus.\nwren = Bool(\"wren\")\n# Dumpuses has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Wumpuses are dull.\nsolver.add(Implies(wumpus, dull))\n\n# Wumpuses are rompuses.\nsolver.add(Implies(wumpus, rompus))\n\n# Every rompus is not cold.\nsolver.add(Implies(rompus, Not(cold)))\n\n# Rompuses are dumpuses.\nsolver.add(Implies(rompus, dumpus))\n\n# Dumpuses are feisty.\nsolver.add(Implies(dumpus, feisty))\n\n# Dumpuses are numpuses.\nsolver.add(Implies(dumpus, numpus))\n\n# Numpuses are mean.\nsolver.add(Implies(numpus, mean))\n\n# Numpuses are zumpuses.\nsolver.add(Implies(numpus, zumpus))\n\n# Every zumpus is not earthy.\nsolver.add(Implies(zumpus, Not(earthy)))\n\n# Every zumpus is a tumpus.\nsolver.add(Implies(zumpus, tumpus))\n\n# Every tumpus is opaque.\nsolver.add(Implies(tumpus, opaque))\n\n# Impuses are liquid.\nsolver.add(Implies(impus, liquid))\n\n# Tumpuses are vumpuses.\nsolver.add(Implies(tumpus, vumpus))\n\n# Every vumpus is not liquid.\nsolver.add(Implies(vumpus, Not(liquid)))\n\n# Vumpuses are jompuses.\nsolver.add(Implies(vumpus, jompus))\n\n# Each jompus is not spicy.\nsolver.add(Implies(jompus, Not(spicy)))\n\n# Jompuses are yumpuses.\nsolver.add(Implies(jompus, yumpus))\n\n# Wren is a dumpus.\nsolver.add(Implies(wren, dumpus))\n\n# Create statements to be checked\n# Wren is liquid.\nsolver.add(wren, liquid)\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  },
  {
    "id": "ProntoQA_50",
    "context": "Jompuses are not blue. Each rompus is happy. Rompuses are dumpuses. Dumpuses are not cold. Each dumpus is a wumpus. Each wumpus is liquid. Each wumpus is an impus. Each impus is kind. Every impus is a yumpus. Each yumpus is bright. Yumpuses are zumpuses. Each zumpus is sour. Each zumpus is a vumpus. Every vumpus is small. Vumpuses are tumpuses. Every tumpus is blue. Every tumpus is a numpus. Fae is an impus.",
    "question": "Is the following statement true or false? Fae is not blue.",
    "program": "```python\nfrom z3 import *\n\n# Define boolean variables for all entities\n# Jompuses are not blue\njompus = Bool(\"jompus\")\nblue = Bool(\"blue\")\n\n# Each rompus is happy\nrompus = Bool(\"rompus\")\nhappy = Bool(\"happy\")\n\n# Rompuses are dumpuses\ndumpus = Bool(\"dumpus\")\n\n# Dumpuses are not cold\ncold = Bool(\"cold\")\n\n# Each dumpus is a wumpus\nwumpus = Bool(\"wumpus\")\n\n# Each wumpus is liquid\nliquid = Bool(\"liquid\")\n\n# Each wumpus is an impus\nimpus = Bool(\"impus\")\n\n# Each impus is kind\nkind = Bool(\"kind\")\n\n# Every impus is a yumpus\nyumpus = Bool(\"yumpus\")\n\n# Each yumpus is bright\nbright = Bool(\"bright\")\n\n# Yumpuses are zumpuses\nzumpus = Bool(\"zumpus\")\n\n# Each zumpus is sour\nsour = Bool(\"sour\")\n\n# Each zumpus is a vumpus\nvumpus = Bool(\"vumpus\")\n\n# Every vumpus is small\nsmall = Bool(\"small\")\n\n# Vumpuses are tumpuses\ntumpus = Bool(\"tumpus\")\n\n# Every tumpus is blue\n# Tumpuses has been defined before\n# Blue has been defined before\n\n# Every tumpus is a numpus\nnumpus = Bool(\"numpus\")\n\n# Fae is an impus\nfae = Bool(\"fae\")\n# Impus has been defined before\n\n# Create a solver instance\nsolver = Solver()\n\n# Parse the problem into relationships\n# Jompuses are not blue\nsolver.add(Implies(jompus, Not(blue)))\n\n# Each rompus is happy\nsolver.add(Implies(rompus, happy))\n\n# Rompuses are dumpuses\nsolver.add(Implies(rompus, dumpus))\n\n# Dumpuses are not cold\nsolver.add(Implies(dumpus, Not(cold)))\n\n# Each dumpus is a wumpus\nsolver.add(Implies(dumpus, wumpus))\n\n# Each wumpus is liquid\nsolver.add(Implies(wumpus, liquid))\n\n# Each wumpus is an impus\nsolver.add(Implies(wumpus, impus))\n\n# Each impus is kind\nsolver.add(Implies(impus, kind))\n\n# Every impus is a yumpus\nsolver.add(Implies(impus, yumpus))\n\n# Each yumpus is bright\nsolver.add(Implies(yumpus, bright))\n\n# Yumpuses are zumpuses\nsolver.add(Implies(yumpus, zumpus))\n\n# Each zumpus is sour\nsolver.add(Implies(zumpus, sour))\n\n# Each zumpus is a vumpus\nsolver.add(Implies(zumpus, vumpus))\n\n# Every vumpus is small\nsolver.add(Implies(vumpus, small))\n\n# Vumpuses are tumpuses\nsolver.add(Implies(vumpus, tumpus))\n\n# Every tumpus is blue\nsolver.add(Implies(tumpus, blue))\n\n# Every tumpus is a numpus\nsolver.add(Implies(tumpus, numpus))\n\n# Fae is an impus\nsolver.add(Implies(fae, impus))\n\n# Create statements to be checked\n# Fae is not blue\nsolver.add(fae, Not(blue))\n\n# Check if the solver can find a model that satisfies the conditions\nif solver.check() == sat:\n    print(\"A\")  # The statement is true\nelse:\n    print(\"B\")  # The statement is false\n```",
    "answer": "B"
  }
]