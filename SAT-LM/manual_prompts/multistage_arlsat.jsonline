{"id": "sigz3", "style_template": "sigtpl", "prompt": "### write python code to answer the question\n\"\"\"\nNine different treatments are available for a certain illness: three antibiotics\u2014F, G, and H\u2014three dietary regimens\u2014M, N, and O\u2014and three physical therapies\u2014U, V, and W. For each case of the illness, a doctor will prescribe exactly five of the treatments, in accordance with the following conditions: If two of the antibiotics are prescribed, the remaining antibiotic cannot be prescribed. There must be exactly one dietary regimen prescribed. If O is not prescribed, F cannot be prescribed. If W is prescribed, F cannot be prescribed. G cannot be prescribed if both N and U are prescribed. V cannot be prescribed unless both H and M are prescribed.\nQuestion: If O is prescribed for a given case, which one of the following is a pair of treatments both of which must also be prescribed for that case?\nChoices:\n(A) F, M\n(B) G, V\n(C) N, U\n(D) U, V\n(E) U, W\n\"\"\"\n# declare variables\ntreatments = EnumSort([F, G, H, M, N, O, U, V, W])\nantibiotics = EnumSort([F, G, H])\ndietary_regimens = EnumSort([M, N, O])\nphysical_therapies = EnumSort([U, V, W])\nprescribed = Function(treatments, bool)\n\n# Question: If O is prescribed for a given case, which one of the following is a pair of treatments both of which must also be prescribed for that case?\n# we check whether the options must be true\nprint(check_valid())\n\n\n\n### write python code to answer the question\n\"\"\"\nEach of five students\u2014Hubert, Lori, Paul, Regina, and Sharon\u2014will visit exactly one of three cities\u2014Montreal, Toronto, or Vancouver\u2014for the month of March, according to the following conditions: Sharon visits a different city than Paul. Hubert visits the same city as Regina. Lori visits Montreal or else Toronto. If Paul visits Vancouver, Hubert visits Vancouver with him. Each student visits one of the cities with at least one of the other four students.\nQuestion: Which one of the following must be true for March?\nChoices:\n(A) If any of the students visits Montreal, Lori visits Montreal.\n(B) If any of the students visits Montreal, exactly two of them do.\n(C) If any of the students visits Toronto, exactly three of them do.\n(D) If any of the students visits Vancouver, Paul visits Vancouver.\n(E) If any of the students visits Vancouver, exactly three of them do.\n\"\"\"\n# declare variables\nstudents = EnumSort([Hubert, Lori, Paul, Regina, Sharon])\ncities = EnumSort([Montreal, Toronto, Vancouver])\nvisits = Function(students, cities)\n\n# Question: Which one of the following must be true for March?\n# we check whether the options must be true\nprint(check_valid())\n\n\n\n### write python code to answer the question\n\"\"\"\nA travel magazine has hired six interns\u2014Farber, Gombarick, Hall, Jackson, Kanze, and Lha\u2014to assist in covering three stories\u2014Romania, Spain, and Tuscany. Each intern will be trained either as a photographer's assistant or as a writer's assistant. Each story is assigned a team of two interns\u2014one photographer's assistant and one writer's assistant\u2014in accordance with the following conditions: Gombarick and Lha will be trained in the same field. Farber and Kanze will be trained in different fields. Hall will be trained as a photographer's assistant. Jackson is assigned to Tuscany. Kanze is not assigned to Spain.\nQuestion: Which one of the following interns CANNOT be assigned to Tuscany?\nChoices:\n(A) Farber\n(B) Gombarick\n(C) Hall\n(D) Kanze\n(E) Lha\n\"\"\"\n# declare variables\ninterns = EnumSort([Farber, Gombarick, Hall, Jackson, Kanze, Lha])\nstories = EnumSort([Romania, Spain, Tuscany])\nassistants = EnumSort([photographer, writer])\nassigned = Function(interns, stories)\ntrained = Function(interns, assistants)\n\n# Question: Which one of the following interns CANNOT be assigned to Tuscany?\n# we check whether the options can never be true\nprint(check_unsat())\n\n\n\n### write python code to answer the question\n\"\"\"\nIn a repair facility there are exactly six technicians: Stacy, Urma, Wim, Xena, Yolanda, and Zane. Each technician repairs machines of at least one of the following three types\u2014radios, televisions, and VCRs\u2014and no other types. The following conditions apply: Xena and exactly three other technicians repair radios. Yolanda repairs both televisions and VCRs. Stacy does not repair any type of machine that Yolanda repairs. Zane repairs more types of machines than Yolanda repairs. Wim does not repair any type of machine that Stacy repairs. Urma repairs exactly two types of machines.\nQuestion: Which one of the following pairs of technicians could repair all and only the same types of machines as each other?\nChoices:\n(A) Stacy and Urma\n(B) Urma and Yolanda\n(C) Urma and Xena\n(D) Wim and Xena\n(E) Xena and Yolanda\n\"\"\"\n# declare variables\ntechnicians = EnumSort([Stacy, Urma, Wim, Xena, Yolanda, Zane])\nmachines = EnumSort([radios, televisions, VCRs])\nrepairs = Function(technicians, machines, bool)\n\n# Question: Which one of the following pairs of technicians could repair all and only the same types of machines as each other?\n# we check whether the options can possibly be true\nprint(check_sat())\n\n\n\n### write python code to answer the question\n\"\"\"\nEach of five experts\u2014a lawyer, a naturalist, an oceanographer, a physicist, and a statistician\u2014individually gives exactly one presentation at a conference. The five presentations are given consecutively. Each presentation is in exactly one of the four following languages: French, Hindi, Japanese, or Mandarin. Each expert speaks exactly one of the languages. The following conditions must hold: Exactly two of the presentations are in the same language as each other. The statistician gives the second presentation in Hindi. The lawyer gives the fourth presentation in either Mandarin or French. The oceanographer presents in either French or Japanese; the same is true of the physicist. The first presentation and the last presentation are in Japanese.\nQuestion: Which one of the following could be the order in which the experts give their presentations, from first to last?\nChoices:\n(A) the physicist, the statistician, the lawyer, the naturalist, the oceanographer\n(B) the physicist, the naturalist, the oceanographer, the lawyer, the statistician\n(C) the oceanographer, the statistician, the naturalist, the lawyer, the physicist\n(D) the oceanographer, the statistician, the lawyer, the naturalist, the physicist\n\"\"\"\n# declare variables\nexperts = EnumSort([lawyer, naturalist, oceanographer, physicist, statistician])\nlanguages = EnumSort([French, Hindi, Japanese, Mandarin])\nspeaks = Function(experts, languages)\norder = Function(experts, int)\nDistinct([e:experts], order(e))\nForAll([e:experts], And(1 <= order(e), order(e) <= 5))\n\n# Question: Which one of the following could be the order in which the experts give their presentations, from first to last?\n# we check whether the options can possibly be true\nprint(check_sat())\n\n\n\n### write python code to answer the question\n\"\"\"\nFive candidates for mayor\u2014Q, R, S, T, and U\u2014will each speak exactly once at each of three town meetings\u2014meetings 1, 2, and 3. At each meeting, each candidate will speak in one of five consecutive time slots. No two candidates will speak in the same time slot as each other at any meeting. The order in which the candidates will speak will meet the following conditions: Each candidate must speak either first or second at at least one of the meetings. Any candidate who speaks fifth at any of the meetings must speak first at at least one of the other meetings. No candidate can speak fourth at more than one of the meetings.\nQuestion: If R speaks second at meeting 2 and first at meeting 3, which one of the following is a complete and accurate list of those time slots any one of which could be the time slot in which R speaks at meeting 1?\nChoices:\n(A) fourth, fifth\n(B) first, second, fifth\n(C) second, third, fifth\n(D) third, fourth, fifth\n(E) second, third, fourth, fifth\n\"\"\"\n# declare variables\ncandidates = EnumSort([Q, R, S, T, U])\nmeetings = EnumSort([1, 2, 3])\nspeaks = Function(meetings, candidates, int)\nForAll([m:meetings, c:candidates], And(1 <= speaks(m, c), speaks(m, c) <= 5))\nForAll([m:meetings], Distinct([c:candidates], speaks(m, c)))\n\n# Question: If R speaks second at meeting 2 and first at meeting 3, which one of the following is a complete and accurate list of those time slots any one of which could be the time slot in which R speaks at meeting 1?\n# we check whether the options are complete and accurate lists\nprint(check_accurate_list())\n\n\n\n### write python code to answer the question\n\"\"\"\nWorkers at a water treatment plant open eight valves\u2014G, H, I, K, L, N, O, and P\u2014to flush out a system of pipes that needs emergency repairs. To maximize safety and efficiency, each valve is opened exactly once, and no two valves are opened at the same time. The valves are opened in accordance with the following conditions: Both K and P are opened before H. O is opened before L but after H. L is opened after G. N is opened before H. I is opened after K.\nQuestion: Each of the following could be the fifth valve opened EXCEPT:\nChoices:\n(A) H\n(B) I\n(C) K\n(D) N\n(E) O\n\"\"\"\n# declare variables\nvalves = EnumSort([G, H, I, K, L, N, O, P])\nopened = Function(valves, int)\nDistinct([v:valves], opened(v))\nForAll([v:valves], And(1 <= opened(v), opened(v) <= 8))\n\n# Question: Each of the following could be the fifth valve opened EXCEPT:\n# we check whether the options can possibly be true, and find the exception\nprint(exception(check_sat()))\n\n\n\n### write python code to answer the question\n\"\"\"\nOn Tuesday Vladimir and Wendy each eat exactly four separate meals: breakfast, lunch, dinner, and a snack. The following is all that is known about what they eat during that day: At no meal does Vladimir eat the same kind of food as Wendy. Neither of them eats the same kind of food more than once during the day. For breakfast, each eats exactly one of the following: hot cakes, poached eggs, or omelet. For lunch, each eats exactly one of the following: fish, hot cakes, macaroni, or omelet. For dinner, each eats exactly one of the following: fish, hot cakes, macaroni, or omelet. For a snack, each eats exactly one of the following: fish or omelet. Wendy eats an omelet for lunch.\nQuestion: Vladimir must eat which one of the following foods?\nChoices:\n(A) fish\n(B) hot cakes\n(C) macaroni\n(D) omelet\n(E) poached eggs\n\"\"\"\n# declare variables\npeople = EnumSort([Vladimir, Wendy])\nmeals = EnumSort([breakfast, lunch, dinner, snack])\nfoods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])\neats = Function(people, meals, foods)\n\n# Question: Vladimir must eat which one of the following foods?\n# we check whether the options must be true\nprint(check_valid())"}
